
DualCubeToUSB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00002014  000020a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002014  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016c  0080011c  0080011c  000020c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020c4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f0  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004b06  00000000  00000000  000023e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000175c  00000000  00000000  00006eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000166a  00000000  00000000  00008646  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000080c  00000000  00000000  00009cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000011b7  00000000  00000000  0000a4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000370f  00000000  00000000  0000b673  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000408  00000000  00000000  0000ed82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__ctors_end>
       4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      28:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <__vector_10>
      2c:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__vector_11>
      30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	09 04       	cpc	r0, r9
      ae:	00 00       	nop
      b0:	01 03       	mulsu	r16, r17
      b2:	00 00       	nop
      b4:	00 09       	sbc	r16, r0
      b6:	21 01       	movw	r4, r2
      b8:	01 00       	.word	0x0001	; ????
      ba:	01 22       	and	r0, r17
      bc:	76 00       	.word	0x0076	; ????
      be:	07 05       	cpc	r16, r7
      c0:	81 03       	fmuls	r16, r17
      c2:	40 00       	.word	0x0040	; ????
      c4:	01 05       	cpc	r16, r1

000000c5 <_hidReportDescriptor2>:
      c5:	05 01 09 05 a1 01 85 01 a1 00 05 09 19 01 29 20     ..............) 
      d5:	15 00 25 01 95 20 75 01 81 02 05 01 09 30 09 31     ..%.. u......0.1
      e5:	09 33 09 34 09 35 09 36 15 00 26 ff 03 75 0a 95     .3.4.5.6..&..u..
      f5:	06 81 02 95 01 75 04 81 03 c0 c0 05 01 09 05 a1     .....u..........
     105:	01 85 02 a1 00 05 09 19 01 29 20 15 00 25 01 95     .........) ..%..
     115:	20 75 01 81 02 05 01 09 30 09 31 09 33 09 34 09      u......0.1.3.4.
     125:	35 09 36 15 00 26 ff 03 75 0a 95 06 81 02 95 01     5.6..&..u.......
     135:	75 04 81 03 c0 c0                                   u.....

0000013b <_hidInterface>:
     13b:	09 04 00 00 01 03 00 00 00 09 21 01 01 00 01 22     ..........!...."
     14b:	3b 00 07 05 81 03 40 00 01                          ;.....@..

00000154 <_hidReportDescriptor>:
     154:	05 01 09 05 a1 01 85 01 a1 00 05 09 19 01 29 20     ..............) 
     164:	15 00 25 01 95 20 75 01 81 02 05 01 09 30 09 31     ..%.. u......0.1
     174:	09 33 09 34 09 35 09 36 15 00 26 ff 03 75 0a 95     .3.4.5.6..&..u..
     184:	06 81 02 95 01 75 04 81 03 c0 c0                    .....u.....

0000018f <_initEndpoints>:
     18f:	00 c1                                               ..

00000191 <USB_DeviceDescriptorA>:
     191:	12 01 00 02 00 00 00 40 4f 1b 34 12 00 01 01 02     .......@O.4.....
     1a1:	00 01                                               ..

000001a3 <USB_DeviceDescriptor>:
     1a3:	12 01 00 02 00 00 00 40 4f 1b 34 12 00 01 01 02     .......@O.4.....
     1b3:	00 01                                               ..

000001b5 <STRING_IMANUFACTURER>:
     1b5:	18 03 53 00 70 00 61 00 72 00 6b 00 46 00 75 00     ..S.p.a.r.k.F.u.
     1c5:	6e 00 20 00 20 00 20 00                             n. . . .

000001cd <STRING_IPRODUCT>:
     1cd:	22 03 4e 00 69 00 6e 00 74 00 65 00 6e 00 64 00     ".N.i.n.t.e.n.d.
     1dd:	6f 00 20 00 54 00 6f 00 20 00 55 00 53 00 42 00     o. .T.o. .U.S.B.
     1ed:	20 00                                                .

000001ef <STRING_LANGUAGE>:
     1ef:	04 03 09 04 00                                      .....

000001f4 <__ctors_start>:
     1f4:	91 0b       	sbc	r25, r17
     1f6:	51 0c       	add	r5, r1

000001f8 <__ctors_end>:
     1f8:	11 24       	eor	r1, r1
     1fa:	1f be       	out	0x3f, r1	; 63
     1fc:	cf ef       	ldi	r28, 0xFF	; 255
     1fe:	da e0       	ldi	r29, 0x0A	; 10
     200:	de bf       	out	0x3e, r29	; 62
     202:	cd bf       	out	0x3d, r28	; 61

00000204 <__do_copy_data>:
     204:	11 e0       	ldi	r17, 0x01	; 1
     206:	a0 e0       	ldi	r26, 0x00	; 0
     208:	b1 e0       	ldi	r27, 0x01	; 1
     20a:	e4 e1       	ldi	r30, 0x14	; 20
     20c:	f0 e2       	ldi	r31, 0x20	; 32
     20e:	02 c0       	rjmp	.+4      	; 0x214 <__do_copy_data+0x10>
     210:	05 90       	lpm	r0, Z+
     212:	0d 92       	st	X+, r0
     214:	ac 31       	cpi	r26, 0x1C	; 28
     216:	b1 07       	cpc	r27, r17
     218:	d9 f7       	brne	.-10     	; 0x210 <__do_copy_data+0xc>

0000021a <__do_clear_bss>:
     21a:	22 e0       	ldi	r18, 0x02	; 2
     21c:	ac e1       	ldi	r26, 0x1C	; 28
     21e:	b1 e0       	ldi	r27, 0x01	; 1
     220:	01 c0       	rjmp	.+2      	; 0x224 <.do_clear_bss_start>

00000222 <.do_clear_bss_loop>:
     222:	1d 92       	st	X+, r1

00000224 <.do_clear_bss_start>:
     224:	a8 38       	cpi	r26, 0x88	; 136
     226:	b2 07       	cpc	r27, r18
     228:	e1 f7       	brne	.-8      	; 0x222 <.do_clear_bss_loop>

0000022a <__do_global_ctors>:
     22a:	11 e0       	ldi	r17, 0x01	; 1
     22c:	c8 ef       	ldi	r28, 0xF8	; 248
     22e:	d1 e0       	ldi	r29, 0x01	; 1
     230:	04 c0       	rjmp	.+8      	; 0x23a <__do_global_ctors+0x10>
     232:	22 97       	sbiw	r28, 0x02	; 2
     234:	fe 01       	movw	r30, r28
     236:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__tablejump__>
     23a:	c4 3f       	cpi	r28, 0xF4	; 244
     23c:	d1 07       	cpc	r29, r17
     23e:	c9 f7       	brne	.-14     	; 0x232 <__do_global_ctors+0x8>
     240:	0e 94 2b 0b 	call	0x1656	; 0x1656 <main>
     244:	0c 94 08 10 	jmp	0x2010	; 0x2010 <_exit>

00000248 <__bad_interrupt>:
     248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <gamecubeBuildReport>:
	return memcmp(last_built_report, last_sent_report, GCN64_REPORT_SIZE);
}

static int gamecubeBuildReport(unsigned char *reportBuffer, int id)
{
	if (reportBuffer != NULL)
     24c:	00 97       	sbiw	r24, 0x00	; 0
     24e:	41 f0       	breq	.+16     	; 0x260 <gamecubeBuildReport+0x14>
		memcpy(reportBuffer, last_built_report, GCN64_REPORT_SIZE);
     250:	28 e0       	ldi	r18, 0x08	; 8
     252:	e2 e3       	ldi	r30, 0x32	; 50
     254:	f1 e0       	ldi	r31, 0x01	; 1
     256:	dc 01       	movw	r26, r24
     258:	01 90       	ld	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	2a 95       	dec	r18
     25e:	e1 f7       	brne	.-8      	; 0x258 <gamecubeBuildReport+0xc>
	
	memcpy(last_sent_report, last_built_report, GCN64_REPORT_SIZE);	
     260:	88 e0       	ldi	r24, 0x08	; 8
     262:	e2 e3       	ldi	r30, 0x32	; 50
     264:	f1 e0       	ldi	r31, 0x01	; 1
     266:	aa e2       	ldi	r26, 0x2A	; 42
     268:	b1 e0       	ldi	r27, 0x01	; 1
     26a:	01 90       	ld	r0, Z+
     26c:	0d 92       	st	X+, r0
     26e:	8a 95       	dec	r24
     270:	e1 f7       	brne	.-8      	; 0x26a <gamecubeBuildReport+0x1e>
	return GCN64_REPORT_SIZE;
}
     272:	88 e0       	ldi	r24, 0x08	; 8
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	08 95       	ret

00000278 <gamecubeChanged>:
	return 0;
}

static char gamecubeChanged(int id)
{
	return memcmp(last_built_report, last_sent_report, GCN64_REPORT_SIZE);
     278:	48 e0       	ldi	r20, 0x08	; 8
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	6a e2       	ldi	r22, 0x2A	; 42
     27e:	71 e0       	ldi	r23, 0x01	; 1
     280:	82 e3       	ldi	r24, 0x32	; 50
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <memcmp>
}
     288:	08 95       	ret

0000028a <gamecubeUpdate>:
		data[i] = data[i] + centers[i];
	}
}

static char gamecubeUpdate(boolean isCont2)
{
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	66 97       	sbiw	r28, 0x16	; 22
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	f8 94       	cli
     29a:	de bf       	out	0x3e, r29	; 62
     29c:	0f be       	out	0x3f, r0	; 63
     29e:	cd bf       	out	0x3d, r28	; 61
     2a0:	18 2f       	mov	r17, r24
	int i;
	unsigned char tmp=0;
     2a2:	19 82       	std	Y+1, r1	; 0x01
	 * 
	 * If we don't do that, the wavebird does not work.  
	 */
	tmp = GC_GETID;
	
	if (isCont2)
     2a4:	88 23       	and	r24, r24
     2a6:	39 f0       	breq	.+14     	; 0x2b6 <gamecubeUpdate+0x2c>
	{
		count = gcn64_transaction2(&tmp, 1);
     2a8:	61 e0       	ldi	r22, 0x01	; 1
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	ce 01       	movw	r24, r28
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <gcn64_transaction2>
     2b4:	06 c0       	rjmp	.+12     	; 0x2c2 <gamecubeUpdate+0x38>
	}
	else
	{
		count = gcn64_transaction(&tmp, 1);
     2b6:	61 e0       	ldi	r22, 0x01	; 1
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <gcn64_transaction>
	}
	if (count != GC_GETID_REPLY_LENGTH) {
     2c2:	88 31       	cpi	r24, 0x18	; 24
     2c4:	09 f0       	breq	.+2      	; 0x2c8 <gamecubeUpdate+0x3e>
     2c6:	53 c2       	rjmp	.+1190   	; 0x76e <gamecubeUpdate+0x4e4>
		return 1;
	}

	tmpdata[0] = GC_GETSTATUS1;
     2c8:	80 e4       	ldi	r24, 0x40	; 64
     2ca:	8a 83       	std	Y+2, r24	; 0x02
	tmpdata[1] = GC_GETSTATUS2;
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	8b 83       	std	Y+3, r24	; 0x03
	tmpdata[2] = GC_GETSTATUS3;
     2d0:	1c 82       	std	Y+4, r1	; 0x04

	if (isCont2)
     2d2:	11 23       	and	r17, r17
     2d4:	39 f0       	breq	.+14     	; 0x2e4 <gamecubeUpdate+0x5a>
	{
		count = gcn64_transaction2(tmpdata, 3);
     2d6:	63 e0       	ldi	r22, 0x03	; 3
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	ce 01       	movw	r24, r28
     2dc:	02 96       	adiw	r24, 0x02	; 2
     2de:	0e 94 dd 04 	call	0x9ba	; 0x9ba <gcn64_transaction2>
     2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <gamecubeUpdate+0x66>
	}
	else
	{
		count = gcn64_transaction(tmpdata, 3);
     2e4:	63 e0       	ldi	r22, 0x03	; 3
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	ce 01       	movw	r24, r28
     2ea:	02 96       	adiw	r24, 0x02	; 2
     2ec:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <gcn64_transaction>
	}
	if (count != GC_GETSTATUS_REPLY_LENGTH) {
     2f0:	80 34       	cpi	r24, 0x40	; 64
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <gamecubeUpdate+0x6c>
     2f4:	3e c2       	rjmp	.+1148   	; 0x772 <gamecubeUpdate+0x4e8>
 */
	
	/* Convert the one-byte-per-bit data generated
	 * by the assembler mess above to nicely packed
	 * binary data. */	
	memset(tmpdata, 0, sizeof(tmpdata));
     2f6:	fe 01       	movw	r30, r28
     2f8:	32 96       	adiw	r30, 0x02	; 2
     2fa:	88 e0       	ldi	r24, 0x08	; 8
     2fc:	df 01       	movw	r26, r30
     2fe:	1d 92       	st	X+, r1
     300:	8a 95       	dec	r24
     302:	e9 f7       	brne	.-6      	; 0x2fe <gamecubeUpdate+0x74>
     304:	8a 81       	ldd	r24, Y+2	; 0x02

	for (i=0; i<8; i++) // X axis
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
		tmpdata[0] |= gcn64_workbuf[i+16] ? (0x80>>i) : 0;
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	40 e8       	ldi	r20, 0x80	; 128
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	68 2f       	mov	r22, r24
     312:	f9 01       	movw	r30, r18
     314:	ec 56       	subi	r30, 0x6C	; 108
     316:	fe 4f       	sbci	r31, 0xFE	; 254
     318:	80 81       	ld	r24, Z
     31a:	88 23       	and	r24, r24
     31c:	41 f0       	breq	.+16     	; 0x32e <gamecubeUpdate+0xa4>
     31e:	ca 01       	movw	r24, r20
     320:	02 2e       	mov	r0, r18
     322:	02 c0       	rjmp	.+4      	; 0x328 <gamecubeUpdate+0x9e>
     324:	95 95       	asr	r25
     326:	87 95       	ror	r24
     328:	0a 94       	dec	r0
     32a:	e2 f7       	brpl	.-8      	; 0x324 <gamecubeUpdate+0x9a>
     32c:	01 c0       	rjmp	.+2      	; 0x330 <gamecubeUpdate+0xa6>
     32e:	87 2f       	mov	r24, r23
     330:	86 2b       	or	r24, r22
	/* Convert the one-byte-per-bit data generated
	 * by the assembler mess above to nicely packed
	 * binary data. */	
	memset(tmpdata, 0, sizeof(tmpdata));

	for (i=0; i<8; i++) // X axis
     332:	2f 5f       	subi	r18, 0xFF	; 255
     334:	3f 4f       	sbci	r19, 0xFF	; 255
     336:	28 30       	cpi	r18, 0x08	; 8
     338:	31 05       	cpc	r19, r1
     33a:	51 f7       	brne	.-44     	; 0x310 <gamecubeUpdate+0x86>
     33c:	8a 83       	std	Y+2, r24	; 0x02
     33e:	8b 81       	ldd	r24, Y+3	; 0x03
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
		tmpdata[0] |= gcn64_workbuf[i+16] ? (0x80>>i) : 0;
	
	for (i=0; i<8; i++) // Y axis
		tmpdata[1] |= gcn64_workbuf[i+24] ? (0x80>>i) : 0;
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	40 e8       	ldi	r20, 0x80	; 128
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	68 2f       	mov	r22, r24
     34c:	f9 01       	movw	r30, r18
     34e:	e4 56       	subi	r30, 0x64	; 100
     350:	fe 4f       	sbci	r31, 0xFE	; 254
     352:	80 81       	ld	r24, Z
     354:	88 23       	and	r24, r24
     356:	41 f0       	breq	.+16     	; 0x368 <gamecubeUpdate+0xde>
     358:	ca 01       	movw	r24, r20
     35a:	02 2e       	mov	r0, r18
     35c:	02 c0       	rjmp	.+4      	; 0x362 <gamecubeUpdate+0xd8>
     35e:	95 95       	asr	r25
     360:	87 95       	ror	r24
     362:	0a 94       	dec	r0
     364:	e2 f7       	brpl	.-8      	; 0x35e <gamecubeUpdate+0xd4>
     366:	01 c0       	rjmp	.+2      	; 0x36a <gamecubeUpdate+0xe0>
     368:	87 2f       	mov	r24, r23
     36a:	86 2b       	or	r24, r22
	memset(tmpdata, 0, sizeof(tmpdata));

	for (i=0; i<8; i++) // X axis
		tmpdata[0] |= gcn64_workbuf[i+16] ? (0x80>>i) : 0;
	
	for (i=0; i<8; i++) // Y axis
     36c:	2f 5f       	subi	r18, 0xFF	; 255
     36e:	3f 4f       	sbci	r19, 0xFF	; 255
     370:	28 30       	cpi	r18, 0x08	; 8
     372:	31 05       	cpc	r19, r1
     374:	51 f7       	brne	.-44     	; 0x34a <gamecubeUpdate+0xc0>
		tmpdata[1] |= gcn64_workbuf[i+24] ? (0x80>>i) : 0;
	tmpdata[1] ^= 0xff;
     376:	80 95       	com	r24
     378:	8b 83       	std	Y+3, r24	; 0x03
     37a:	8c 81       	ldd	r24, Y+4	; 0x04

	for (i=0; i<8; i++) // C X axis
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
		tmpdata[2] |= gcn64_workbuf[i+32] ? (0x80>>i) : 0;
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	40 e8       	ldi	r20, 0x80	; 128
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	68 2f       	mov	r22, r24
     388:	f9 01       	movw	r30, r18
     38a:	ec 55       	subi	r30, 0x5C	; 92
     38c:	fe 4f       	sbci	r31, 0xFE	; 254
     38e:	80 81       	ld	r24, Z
     390:	88 23       	and	r24, r24
     392:	41 f0       	breq	.+16     	; 0x3a4 <gamecubeUpdate+0x11a>
     394:	ca 01       	movw	r24, r20
     396:	02 2e       	mov	r0, r18
     398:	02 c0       	rjmp	.+4      	; 0x39e <gamecubeUpdate+0x114>
     39a:	95 95       	asr	r25
     39c:	87 95       	ror	r24
     39e:	0a 94       	dec	r0
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <gamecubeUpdate+0x110>
     3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <gamecubeUpdate+0x11c>
     3a4:	87 2f       	mov	r24, r23
     3a6:	86 2b       	or	r24, r22
	
	for (i=0; i<8; i++) // Y axis
		tmpdata[1] |= gcn64_workbuf[i+24] ? (0x80>>i) : 0;
	tmpdata[1] ^= 0xff;

	for (i=0; i<8; i++) // C X axis
     3a8:	2f 5f       	subi	r18, 0xFF	; 255
     3aa:	3f 4f       	sbci	r19, 0xFF	; 255
     3ac:	28 30       	cpi	r18, 0x08	; 8
     3ae:	31 05       	cpc	r19, r1
     3b0:	51 f7       	brne	.-44     	; 0x386 <gamecubeUpdate+0xfc>
     3b2:	8c 83       	std	Y+4, r24	; 0x04
     3b4:	6d 81       	ldd	r22, Y+5	; 0x05
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
#if INVERTED_VERTICAL_C_STICK
	for (i=0; i<8; i++) // C Y axis
		tmpdata[3] |= gcn64_workbuf[i+40] ? (0x80>>i) : 0;	
#else
	for (i=0; i<8; i++) // C Y axis
		tmpdata[3] |= gcn64_workbuf[i+40] ? 0 : (0x80>>i);	
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	40 e8       	ldi	r20, 0x80	; 128
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	f9 01       	movw	r30, r18
     3c2:	e4 55       	subi	r30, 0x54	; 84
     3c4:	fe 4f       	sbci	r31, 0xFE	; 254
     3c6:	80 81       	ld	r24, Z
     3c8:	81 11       	cpse	r24, r1
     3ca:	08 c0       	rjmp	.+16     	; 0x3dc <gamecubeUpdate+0x152>
     3cc:	ca 01       	movw	r24, r20
     3ce:	02 2e       	mov	r0, r18
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <gamecubeUpdate+0x14c>
     3d2:	95 95       	asr	r25
     3d4:	87 95       	ror	r24
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <gamecubeUpdate+0x148>
     3da:	01 c0       	rjmp	.+2      	; 0x3de <gamecubeUpdate+0x154>
     3dc:	87 2f       	mov	r24, r23
     3de:	68 2b       	or	r22, r24
	
#if INVERTED_VERTICAL_C_STICK
	for (i=0; i<8; i++) // C Y axis
		tmpdata[3] |= gcn64_workbuf[i+40] ? (0x80>>i) : 0;	
#else
	for (i=0; i<8; i++) // C Y axis
     3e0:	2f 5f       	subi	r18, 0xFF	; 255
     3e2:	3f 4f       	sbci	r19, 0xFF	; 255
     3e4:	28 30       	cpi	r18, 0x08	; 8
     3e6:	31 05       	cpc	r19, r1
     3e8:	59 f7       	brne	.-42     	; 0x3c0 <gamecubeUpdate+0x136>
     3ea:	6d 83       	std	Y+5, r22	; 0x05
     3ec:	8e 81       	ldd	r24, Y+6	; 0x06
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
		tmpdata[3] |= gcn64_workbuf[i+40] ? 0 : (0x80>>i);	
#endif

	for (i=0; i<8; i++) // Left btn value
		tmpdata[4] |= gcn64_workbuf[i+48] ? (0x80>>i) : 0;
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	40 e8       	ldi	r20, 0x80	; 128
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	68 2f       	mov	r22, r24
     3fa:	f9 01       	movw	r30, r18
     3fc:	ec 54       	subi	r30, 0x4C	; 76
     3fe:	fe 4f       	sbci	r31, 0xFE	; 254
     400:	80 81       	ld	r24, Z
     402:	88 23       	and	r24, r24
     404:	41 f0       	breq	.+16     	; 0x416 <gamecubeUpdate+0x18c>
     406:	ca 01       	movw	r24, r20
     408:	02 2e       	mov	r0, r18
     40a:	02 c0       	rjmp	.+4      	; 0x410 <gamecubeUpdate+0x186>
     40c:	95 95       	asr	r25
     40e:	87 95       	ror	r24
     410:	0a 94       	dec	r0
     412:	e2 f7       	brpl	.-8      	; 0x40c <gamecubeUpdate+0x182>
     414:	01 c0       	rjmp	.+2      	; 0x418 <gamecubeUpdate+0x18e>
     416:	87 2f       	mov	r24, r23
     418:	86 2b       	or	r24, r22
#else
	for (i=0; i<8; i++) // C Y axis
		tmpdata[3] |= gcn64_workbuf[i+40] ? 0 : (0x80>>i);	
#endif

	for (i=0; i<8; i++) // Left btn value
     41a:	2f 5f       	subi	r18, 0xFF	; 255
     41c:	3f 4f       	sbci	r19, 0xFF	; 255
     41e:	28 30       	cpi	r18, 0x08	; 8
     420:	31 05       	cpc	r19, r1
     422:	51 f7       	brne	.-44     	; 0x3f8 <gamecubeUpdate+0x16e>
		tmpdata[4] |= gcn64_workbuf[i+48] ? (0x80>>i) : 0;
	tmpdata[4] ^= 0xff;
     424:	80 95       	com	r24
     426:	8e 83       	std	Y+6, r24	; 0x06
     428:	8f 81       	ldd	r24, Y+7	; 0x07
	
	for (i=0; i<8; i++) // Right btn value
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
		tmpdata[5] |= gcn64_workbuf[i+56] ? (0x80>>i) : 0;	
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	40 e8       	ldi	r20, 0x80	; 128
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	68 2f       	mov	r22, r24
     436:	f9 01       	movw	r30, r18
     438:	e4 54       	subi	r30, 0x44	; 68
     43a:	fe 4f       	sbci	r31, 0xFE	; 254
     43c:	80 81       	ld	r24, Z
     43e:	88 23       	and	r24, r24
     440:	41 f0       	breq	.+16     	; 0x452 <gamecubeUpdate+0x1c8>
     442:	ca 01       	movw	r24, r20
     444:	02 2e       	mov	r0, r18
     446:	02 c0       	rjmp	.+4      	; 0x44c <gamecubeUpdate+0x1c2>
     448:	95 95       	asr	r25
     44a:	87 95       	ror	r24
     44c:	0a 94       	dec	r0
     44e:	e2 f7       	brpl	.-8      	; 0x448 <gamecubeUpdate+0x1be>
     450:	01 c0       	rjmp	.+2      	; 0x454 <gamecubeUpdate+0x1ca>
     452:	87 2f       	mov	r24, r23
     454:	86 2b       	or	r24, r22

	for (i=0; i<8; i++) // Left btn value
		tmpdata[4] |= gcn64_workbuf[i+48] ? (0x80>>i) : 0;
	tmpdata[4] ^= 0xff;
	
	for (i=0; i<8; i++) // Right btn value
     456:	2f 5f       	subi	r18, 0xFF	; 255
     458:	3f 4f       	sbci	r19, 0xFF	; 255
     45a:	28 30       	cpi	r18, 0x08	; 8
     45c:	31 05       	cpc	r19, r1
     45e:	51 f7       	brne	.-44     	; 0x434 <gamecubeUpdate+0x1aa>
		tmpdata[5] |= gcn64_workbuf[i+56] ? (0x80>>i) : 0;	
	tmpdata[5] ^= 0xff;
     460:	80 95       	com	r24
     462:	8f 83       	std	Y+7, r24	; 0x07
     464:	48 85       	ldd	r20, Y+8	; 0x08
        //i+3
	for (i=0; i<5; i++) // St Y X B A
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	87 e0       	ldi	r24, 0x07	; 7
     46c:	90 e0       	ldi	r25, 0x00	; 0
		tmpdata[6] |= gcn64_workbuf[7-i] ? (0x01<<i) : 0;
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	61 e0       	ldi	r22, 0x01	; 1
     472:	fc 01       	movw	r30, r24
     474:	e2 1b       	sub	r30, r18
     476:	f3 0b       	sbc	r31, r19
     478:	ec 57       	subi	r30, 0x7C	; 124
     47a:	fe 4f       	sbci	r31, 0xFE	; 254
     47c:	50 81       	ld	r21, Z
     47e:	55 23       	and	r21, r21
     480:	39 f0       	breq	.+14     	; 0x490 <gamecubeUpdate+0x206>
     482:	56 2f       	mov	r21, r22
     484:	02 2e       	mov	r0, r18
     486:	01 c0       	rjmp	.+2      	; 0x48a <gamecubeUpdate+0x200>
     488:	55 0f       	add	r21, r21
     48a:	0a 94       	dec	r0
     48c:	ea f7       	brpl	.-6      	; 0x488 <gamecubeUpdate+0x1fe>
     48e:	01 c0       	rjmp	.+2      	; 0x492 <gamecubeUpdate+0x208>
     490:	57 2f       	mov	r21, r23
     492:	45 2b       	or	r20, r21
	
	for (i=0; i<8; i++) // Right btn value
		tmpdata[5] |= gcn64_workbuf[i+56] ? (0x80>>i) : 0;	
	tmpdata[5] ^= 0xff;
        //i+3
	for (i=0; i<5; i++) // St Y X B A
     494:	2f 5f       	subi	r18, 0xFF	; 255
     496:	3f 4f       	sbci	r19, 0xFF	; 255
     498:	25 30       	cpi	r18, 0x05	; 5
     49a:	31 05       	cpc	r19, r1
     49c:	51 f7       	brne	.-44     	; 0x472 <gamecubeUpdate+0x1e8>
		tmpdata[6] |= gcn64_workbuf[7-i] ? (0x01<<i) : 0;
	for (i=0; i<3; i++) // L R Z
		tmpdata[6] |= gcn64_workbuf[i+9] ? (0x20<<i) : 0;
     49e:	80 91 8d 01 	lds	r24, 0x018D
     4a2:	88 23       	and	r24, r24
     4a4:	11 f0       	breq	.+4      	; 0x4aa <gamecubeUpdate+0x220>
     4a6:	50 e2       	ldi	r21, 0x20	; 32
     4a8:	01 c0       	rjmp	.+2      	; 0x4ac <gamecubeUpdate+0x222>
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	45 2b       	or	r20, r21
     4ae:	80 91 8e 01 	lds	r24, 0x018E
     4b2:	88 23       	and	r24, r24
     4b4:	11 f0       	breq	.+4      	; 0x4ba <gamecubeUpdate+0x230>
     4b6:	50 e4       	ldi	r21, 0x40	; 64
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <gamecubeUpdate+0x232>
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	45 2b       	or	r20, r21
     4be:	80 91 8f 01 	lds	r24, 0x018F
     4c2:	88 23       	and	r24, r24
     4c4:	11 f0       	breq	.+4      	; 0x4ca <gamecubeUpdate+0x240>
     4c6:	80 e8       	ldi	r24, 0x80	; 128
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <gamecubeUpdate+0x242>
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	48 2b       	or	r20, r24
     4ce:	48 87       	std	Y+8, r20	; 0x08
     4d0:	29 85       	ldd	r18, Y+9	; 0x09
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
	
	for (i=0; i<4; i++) // Up,Down,Right,Left
		tmpdata[7] |= gcn64_workbuf[i+12] ? (0x01<<i) : 0;
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	fc 01       	movw	r30, r24
     4dc:	e0 57       	subi	r30, 0x70	; 112
     4de:	fe 4f       	sbci	r31, 0xFE	; 254
     4e0:	30 81       	ld	r19, Z
     4e2:	33 23       	and	r19, r19
     4e4:	39 f0       	breq	.+14     	; 0x4f4 <gamecubeUpdate+0x26a>
     4e6:	34 2f       	mov	r19, r20
     4e8:	08 2e       	mov	r0, r24
     4ea:	01 c0       	rjmp	.+2      	; 0x4ee <gamecubeUpdate+0x264>
     4ec:	33 0f       	add	r19, r19
     4ee:	0a 94       	dec	r0
     4f0:	ea f7       	brpl	.-6      	; 0x4ec <gamecubeUpdate+0x262>
     4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <gamecubeUpdate+0x26c>
     4f4:	35 2f       	mov	r19, r21
     4f6:	23 2b       	or	r18, r19
	for (i=0; i<5; i++) // St Y X B A
		tmpdata[6] |= gcn64_workbuf[7-i] ? (0x01<<i) : 0;
	for (i=0; i<3; i++) // L R Z
		tmpdata[6] |= gcn64_workbuf[i+9] ? (0x20<<i) : 0;
	
	for (i=0; i<4; i++) // Up,Down,Right,Left
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	84 30       	cpi	r24, 0x04	; 4
     4fc:	91 05       	cpc	r25, r1
     4fe:	69 f7       	brne	.-38     	; 0x4da <gamecubeUpdate+0x250>
     500:	29 87       	std	Y+9, r18	; 0x09
{ 
		
		int i = 0;
		unsigned char count;
	
		unsigned char tmp = GC_GETORIGIN;
     502:	81 e4       	ldi	r24, 0x41	; 65
     504:	8e 8b       	std	Y+22, r24	; 0x16
		int tmpdata[6] = {0,0,0,0,0,0};
     506:	fe 01       	movw	r30, r28
     508:	3a 96       	adiw	r30, 0x0a	; 10
     50a:	8c e0       	ldi	r24, 0x0C	; 12
     50c:	df 01       	movw	r26, r30
     50e:	1d 92       	st	X+, r1
     510:	8a 95       	dec	r24
     512:	e9 f7       	brne	.-6      	; 0x50e <gamecubeUpdate+0x284>
			
		if (isCont2)
     514:	11 23       	and	r17, r17
     516:	39 f0       	breq	.+14     	; 0x526 <gamecubeUpdate+0x29c>
		{
			count = gcn64_transaction2(&tmp, 1);
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	ce 01       	movw	r24, r28
     51e:	46 96       	adiw	r24, 0x16	; 22
     520:	0e 94 dd 04 	call	0x9ba	; 0x9ba <gcn64_transaction2>
     524:	06 c0       	rjmp	.+12     	; 0x532 <gamecubeUpdate+0x2a8>
		}
		else
		{
			count = gcn64_transaction(&tmp, 1);
     526:	61 e0       	ldi	r22, 0x01	; 1
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	ce 01       	movw	r24, r28
     52c:	46 96       	adiw	r24, 0x16	; 22
     52e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <gcn64_transaction>
		}
		if (count == GC_GETORIGIN_REPLY_LENGTH)
     532:	80 35       	cpi	r24, 0x50	; 80
     534:	09 f0       	breq	.+2      	; 0x538 <gamecubeUpdate+0x2ae>
     536:	f1 c0       	rjmp	.+482    	; 0x71a <gamecubeUpdate+0x490>
     538:	4a 85       	ldd	r20, Y+10	; 0x0a
     53a:	5b 85       	ldd	r21, Y+11	; 0x0b
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
		{
			for (i=0; i<8; i++) // X axis
			tmpdata[0] |= gcn64_workbuf[i+16] ? (0x80>>i) : 0;
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	60 e8       	ldi	r22, 0x80	; 128
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	fc 01       	movw	r30, r24
     54a:	ec 56       	subi	r30, 0x6C	; 108
     54c:	fe 4f       	sbci	r31, 0xFE	; 254
     54e:	20 81       	ld	r18, Z
     550:	22 23       	and	r18, r18
     552:	41 f0       	breq	.+16     	; 0x564 <gamecubeUpdate+0x2da>
     554:	9b 01       	movw	r18, r22
     556:	08 2e       	mov	r0, r24
     558:	02 c0       	rjmp	.+4      	; 0x55e <gamecubeUpdate+0x2d4>
     55a:	35 95       	asr	r19
     55c:	27 95       	ror	r18
     55e:	0a 94       	dec	r0
     560:	e2 f7       	brpl	.-8      	; 0x55a <gamecubeUpdate+0x2d0>
     562:	02 c0       	rjmp	.+4      	; 0x568 <gamecubeUpdate+0x2de>
     564:	2b 2f       	mov	r18, r27
     566:	3a 2f       	mov	r19, r26
     568:	42 2b       	or	r20, r18
     56a:	53 2b       	or	r21, r19
		{
			count = gcn64_transaction(&tmp, 1);
		}
		if (count == GC_GETORIGIN_REPLY_LENGTH)
		{
			for (i=0; i<8; i++) // X axis
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	88 30       	cpi	r24, 0x08	; 8
     570:	91 05       	cpc	r25, r1
     572:	51 f7       	brne	.-44     	; 0x548 <gamecubeUpdate+0x2be>
     574:	5b 87       	std	Y+11, r21	; 0x0b
     576:	4a 87       	std	Y+10, r20	; 0x0a
     578:	4c 85       	ldd	r20, Y+12	; 0x0c
     57a:	5d 85       	ldd	r21, Y+13	; 0x0d
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0
			tmpdata[0] |= gcn64_workbuf[i+16] ? (0x80>>i) : 0;
			
			for (i=0; i<8; i++) // Y axis
			tmpdata[1] |= gcn64_workbuf[i+24] ? (0x80>>i) : 0;
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	a0 e0       	ldi	r26, 0x00	; 0
     584:	60 e8       	ldi	r22, 0x80	; 128
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	fc 01       	movw	r30, r24
     58a:	e4 56       	subi	r30, 0x64	; 100
     58c:	fe 4f       	sbci	r31, 0xFE	; 254
     58e:	20 81       	ld	r18, Z
     590:	22 23       	and	r18, r18
     592:	41 f0       	breq	.+16     	; 0x5a4 <gamecubeUpdate+0x31a>
     594:	9b 01       	movw	r18, r22
     596:	08 2e       	mov	r0, r24
     598:	02 c0       	rjmp	.+4      	; 0x59e <gamecubeUpdate+0x314>
     59a:	35 95       	asr	r19
     59c:	27 95       	ror	r18
     59e:	0a 94       	dec	r0
     5a0:	e2 f7       	brpl	.-8      	; 0x59a <gamecubeUpdate+0x310>
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <gamecubeUpdate+0x31e>
     5a4:	2b 2f       	mov	r18, r27
     5a6:	3a 2f       	mov	r19, r26
     5a8:	24 2b       	or	r18, r20
     5aa:	35 2b       	or	r19, r21
		if (count == GC_GETORIGIN_REPLY_LENGTH)
		{
			for (i=0; i<8; i++) // X axis
			tmpdata[0] |= gcn64_workbuf[i+16] ? (0x80>>i) : 0;
			
			for (i=0; i<8; i++) // Y axis
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	88 30       	cpi	r24, 0x08	; 8
     5b0:	91 05       	cpc	r25, r1
     5b2:	11 f0       	breq	.+4      	; 0x5b8 <gamecubeUpdate+0x32e>
			tmpdata[1] |= gcn64_workbuf[i+24] ? (0x80>>i) : 0;
     5b4:	a9 01       	movw	r20, r18
     5b6:	e8 cf       	rjmp	.-48     	; 0x588 <gamecubeUpdate+0x2fe>
			tmpdata[1] ^= 0xff;
     5b8:	20 95       	com	r18
     5ba:	3d 87       	std	Y+13, r19	; 0x0d
     5bc:	2c 87       	std	Y+12, r18	; 0x0c
     5be:	4e 85       	ldd	r20, Y+14	; 0x0e
     5c0:	5f 85       	ldd	r21, Y+15	; 0x0f

			for (i=0; i<8; i++) // C X axis
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
				tmpdata[2] |= gcn64_workbuf[i+32] ? (0x80>>i) : 0;
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	a0 e0       	ldi	r26, 0x00	; 0
     5ca:	60 e8       	ldi	r22, 0x80	; 128
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	fc 01       	movw	r30, r24
     5d0:	ec 55       	subi	r30, 0x5C	; 92
     5d2:	fe 4f       	sbci	r31, 0xFE	; 254
     5d4:	20 81       	ld	r18, Z
     5d6:	22 23       	and	r18, r18
     5d8:	41 f0       	breq	.+16     	; 0x5ea <gamecubeUpdate+0x360>
     5da:	9b 01       	movw	r18, r22
     5dc:	08 2e       	mov	r0, r24
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <gamecubeUpdate+0x35a>
     5e0:	35 95       	asr	r19
     5e2:	27 95       	ror	r18
     5e4:	0a 94       	dec	r0
     5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <gamecubeUpdate+0x356>
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <gamecubeUpdate+0x364>
     5ea:	2b 2f       	mov	r18, r27
     5ec:	3a 2f       	mov	r19, r26
     5ee:	42 2b       	or	r20, r18
     5f0:	53 2b       	or	r21, r19
			
			for (i=0; i<8; i++) // Y axis
			tmpdata[1] |= gcn64_workbuf[i+24] ? (0x80>>i) : 0;
			tmpdata[1] ^= 0xff;

			for (i=0; i<8; i++) // C X axis
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	88 30       	cpi	r24, 0x08	; 8
     5f6:	91 05       	cpc	r25, r1
     5f8:	51 f7       	brne	.-44     	; 0x5ce <gamecubeUpdate+0x344>
     5fa:	5f 87       	std	Y+15, r21	; 0x0f
     5fc:	4e 87       	std	Y+14, r20	; 0x0e
     5fe:	48 89       	ldd	r20, Y+16	; 0x10
     600:	59 89       	ldd	r21, Y+17	; 0x11
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
		#if INVERTED_VERTICAL_C_STICK
			for (i=0; i<8; i++) // C Y axis
				tmpdata[3] |= gcn64_workbuf[i+40] ? (0x80>>i) : 0;	
		#else
			for (i=0; i<8; i++) // C Y axis
				tmpdata[3] |= gcn64_workbuf[i+40] ? 0 : (0x80>>i);	
     606:	b0 e0       	ldi	r27, 0x00	; 0
     608:	a0 e0       	ldi	r26, 0x00	; 0
     60a:	60 e8       	ldi	r22, 0x80	; 128
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	fc 01       	movw	r30, r24
     610:	e4 55       	subi	r30, 0x54	; 84
     612:	fe 4f       	sbci	r31, 0xFE	; 254
     614:	20 81       	ld	r18, Z
     616:	21 11       	cpse	r18, r1
     618:	08 c0       	rjmp	.+16     	; 0x62a <gamecubeUpdate+0x3a0>
     61a:	9b 01       	movw	r18, r22
     61c:	08 2e       	mov	r0, r24
     61e:	02 c0       	rjmp	.+4      	; 0x624 <gamecubeUpdate+0x39a>
     620:	35 95       	asr	r19
     622:	27 95       	ror	r18
     624:	0a 94       	dec	r0
     626:	e2 f7       	brpl	.-8      	; 0x620 <gamecubeUpdate+0x396>
     628:	02 c0       	rjmp	.+4      	; 0x62e <gamecubeUpdate+0x3a4>
     62a:	2b 2f       	mov	r18, r27
     62c:	3a 2f       	mov	r19, r26
     62e:	24 2b       	or	r18, r20
     630:	35 2b       	or	r19, r21
			
		#if INVERTED_VERTICAL_C_STICK
			for (i=0; i<8; i++) // C Y axis
				tmpdata[3] |= gcn64_workbuf[i+40] ? (0x80>>i) : 0;	
		#else
			for (i=0; i<8; i++) // C Y axis
     632:	01 96       	adiw	r24, 0x01	; 1
     634:	88 30       	cpi	r24, 0x08	; 8
     636:	91 05       	cpc	r25, r1
     638:	11 f0       	breq	.+4      	; 0x63e <gamecubeUpdate+0x3b4>
				tmpdata[3] |= gcn64_workbuf[i+40] ? 0 : (0x80>>i);	
     63a:	a9 01       	movw	r20, r18
     63c:	e8 cf       	rjmp	.-48     	; 0x60e <gamecubeUpdate+0x384>
     63e:	39 8b       	std	Y+17, r19	; 0x11
     640:	28 8b       	std	Y+16, r18	; 0x10
     642:	4a 89       	ldd	r20, Y+18	; 0x12
     644:	5b 89       	ldd	r21, Y+19	; 0x13
			
		#if INVERTED_VERTICAL_C_STICK
			for (i=0; i<8; i++) // C Y axis
				tmpdata[3] |= gcn64_workbuf[i+40] ? (0x80>>i) : 0;	
		#else
			for (i=0; i<8; i++) // C Y axis
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
				tmpdata[3] |= gcn64_workbuf[i+40] ? 0 : (0x80>>i);	
		#endif

			for (i=0; i<8; i++) // Left btn value
				tmpdata[4] |= gcn64_workbuf[i+48] ? (0x80>>i) : 0;
     64a:	b0 e0       	ldi	r27, 0x00	; 0
     64c:	a0 e0       	ldi	r26, 0x00	; 0
     64e:	60 e8       	ldi	r22, 0x80	; 128
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	fc 01       	movw	r30, r24
     654:	ec 54       	subi	r30, 0x4C	; 76
     656:	fe 4f       	sbci	r31, 0xFE	; 254
     658:	20 81       	ld	r18, Z
     65a:	22 23       	and	r18, r18
     65c:	41 f0       	breq	.+16     	; 0x66e <gamecubeUpdate+0x3e4>
     65e:	9b 01       	movw	r18, r22
     660:	08 2e       	mov	r0, r24
     662:	02 c0       	rjmp	.+4      	; 0x668 <gamecubeUpdate+0x3de>
     664:	35 95       	asr	r19
     666:	27 95       	ror	r18
     668:	0a 94       	dec	r0
     66a:	e2 f7       	brpl	.-8      	; 0x664 <gamecubeUpdate+0x3da>
     66c:	02 c0       	rjmp	.+4      	; 0x672 <gamecubeUpdate+0x3e8>
     66e:	2b 2f       	mov	r18, r27
     670:	3a 2f       	mov	r19, r26
     672:	24 2b       	or	r18, r20
     674:	35 2b       	or	r19, r21
		#else
			for (i=0; i<8; i++) // C Y axis
				tmpdata[3] |= gcn64_workbuf[i+40] ? 0 : (0x80>>i);	
		#endif

			for (i=0; i<8; i++) // Left btn value
     676:	01 96       	adiw	r24, 0x01	; 1
     678:	88 30       	cpi	r24, 0x08	; 8
     67a:	91 05       	cpc	r25, r1
     67c:	11 f0       	breq	.+4      	; 0x682 <gamecubeUpdate+0x3f8>
				tmpdata[4] |= gcn64_workbuf[i+48] ? (0x80>>i) : 0;
     67e:	a9 01       	movw	r20, r18
     680:	e8 cf       	rjmp	.-48     	; 0x652 <gamecubeUpdate+0x3c8>
			tmpdata[4] ^= 0xff;
     682:	20 95       	com	r18
     684:	3b 8b       	std	Y+19, r19	; 0x13
     686:	2a 8b       	std	Y+18, r18	; 0x12
     688:	4c 89       	ldd	r20, Y+20	; 0x14
     68a:	5d 89       	ldd	r21, Y+21	; 0x15
			
			for (i=0; i<8; i++) // Right btn value
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
				tmpdata[5] |= gcn64_workbuf[i+56] ? (0x80>>i) : 0;	
     690:	b0 e0       	ldi	r27, 0x00	; 0
     692:	a0 e0       	ldi	r26, 0x00	; 0
     694:	60 e8       	ldi	r22, 0x80	; 128
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	fc 01       	movw	r30, r24
     69a:	e4 54       	subi	r30, 0x44	; 68
     69c:	fe 4f       	sbci	r31, 0xFE	; 254
     69e:	20 81       	ld	r18, Z
     6a0:	22 23       	and	r18, r18
     6a2:	41 f0       	breq	.+16     	; 0x6b4 <gamecubeUpdate+0x42a>
     6a4:	9b 01       	movw	r18, r22
     6a6:	08 2e       	mov	r0, r24
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <gamecubeUpdate+0x424>
     6aa:	35 95       	asr	r19
     6ac:	27 95       	ror	r18
     6ae:	0a 94       	dec	r0
     6b0:	e2 f7       	brpl	.-8      	; 0x6aa <gamecubeUpdate+0x420>
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <gamecubeUpdate+0x42e>
     6b4:	2b 2f       	mov	r18, r27
     6b6:	3a 2f       	mov	r19, r26
     6b8:	24 2b       	or	r18, r20
     6ba:	35 2b       	or	r19, r21

			for (i=0; i<8; i++) // Left btn value
				tmpdata[4] |= gcn64_workbuf[i+48] ? (0x80>>i) : 0;
			tmpdata[4] ^= 0xff;
			
			for (i=0; i<8; i++) // Right btn value
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	88 30       	cpi	r24, 0x08	; 8
     6c0:	91 05       	cpc	r25, r1
     6c2:	11 f0       	breq	.+4      	; 0x6c8 <gamecubeUpdate+0x43e>
				tmpdata[5] |= gcn64_workbuf[i+56] ? (0x80>>i) : 0;	
     6c4:	a9 01       	movw	r20, r18
     6c6:	e8 cf       	rjmp	.-48     	; 0x698 <gamecubeUpdate+0x40e>
			tmpdata[5] ^= 0xff;
     6c8:	20 95       	com	r18
     6ca:	3d 8b       	std	Y+21, r19	; 0x15
     6cc:	2c 8b       	std	Y+20, r18	; 0x14
     6ce:	fe 01       	movw	r30, r28
     6d0:	3a 96       	adiw	r30, 0x0a	; 10
     6d2:	ae e1       	ldi	r26, 0x1E	; 30
     6d4:	b1 e0       	ldi	r27, 0x01	; 1
     6d6:	ae 01       	movw	r20, r28
     6d8:	4e 5e       	subi	r20, 0xEE	; 238
     6da:	5f 4f       	sbci	r21, 0xFF	; 255
			
			for (i = 0; i < 4; i++)
			{
				centers[i] = 127 - tmpdata[i] ;
     6dc:	2f e7       	ldi	r18, 0x7F	; 127
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	81 91       	ld	r24, Z+
     6e2:	91 91       	ld	r25, Z+
     6e4:	b9 01       	movw	r22, r18
     6e6:	68 1b       	sub	r22, r24
     6e8:	79 0b       	sbc	r23, r25
     6ea:	6d 93       	st	X+, r22
     6ec:	7d 93       	st	X+, r23
			
			for (i=0; i<8; i++) // Right btn value
				tmpdata[5] |= gcn64_workbuf[i+56] ? (0x80>>i) : 0;	
			tmpdata[5] ^= 0xff;
			
			for (i = 0; i < 4; i++)
     6ee:	e4 17       	cp	r30, r20
     6f0:	f5 07       	cpc	r31, r21
     6f2:	b1 f7       	brne	.-20     	; 0x6e0 <gamecubeUpdate+0x456>
				centers[i] = 127 - tmpdata[i] ;
				
			}
			for (i = 4; i < 6; i++)
			{
				centers[i] = SLIDER_END - tmpdata[i];
     6f4:	85 ef       	ldi	r24, 0xF5	; 245
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	2a 89       	ldd	r18, Y+18	; 0x12
     6fa:	3b 89       	ldd	r19, Y+19	; 0x13
     6fc:	dc 01       	movw	r26, r24
     6fe:	a2 1b       	sub	r26, r18
     700:	b3 0b       	sbc	r27, r19
     702:	b0 93 27 01 	sts	0x0127, r27
     706:	a0 93 26 01 	sts	0x0126, r26
     70a:	2c 89       	ldd	r18, Y+20	; 0x14
     70c:	3d 89       	ldd	r19, Y+21	; 0x15
     70e:	82 1b       	sub	r24, r18
     710:	93 0b       	sbc	r25, r19
     712:	90 93 29 01 	sts	0x0129, r25
     716:	80 93 28 01 	sts	0x0128, r24
     71a:	ee e1       	ldi	r30, 0x1E	; 30
     71c:	f1 e0       	ldi	r31, 0x01	; 1
     71e:	de 01       	movw	r26, r28
     720:	12 96       	adiw	r26, 0x02	; 2
     722:	8a e2       	ldi	r24, 0x2A	; 42
     724:	91 e0       	ldi	r25, 0x01	; 1
{
	setCenters(isCont2);
	int i;
	for (i = 0; i < 6; i++)
	{
		data[i] = data[i] + centers[i];
     726:	20 81       	ld	r18, Z
     728:	32 96       	adiw	r30, 0x02	; 2
     72a:	3c 91       	ld	r19, X
     72c:	23 0f       	add	r18, r19
     72e:	2d 93       	st	X+, r18

static void constrainAxis(unsigned char* data, boolean isCont2)
{
	setCenters(isCont2);
	int i;
	for (i = 0; i < 6; i++)
     730:	e8 17       	cp	r30, r24
     732:	f9 07       	cpc	r31, r25
     734:	c1 f7       	brne	.-16     	; 0x726 <gamecubeUpdate+0x49c>
		
	constrainAxis(tmpdata, isCont2);
	// report id
	//last_built_report[0] = 1;

	memcpy(last_built_report, tmpdata, 6);
     736:	86 e0       	ldi	r24, 0x06	; 6
     738:	fe 01       	movw	r30, r28
     73a:	32 96       	adiw	r30, 0x02	; 2
     73c:	a2 e3       	ldi	r26, 0x32	; 50
     73e:	b1 e0       	ldi	r27, 0x01	; 1
     740:	01 90       	ld	r0, Z+
     742:	0d 92       	st	X+, r0
     744:	8a 95       	dec	r24
     746:	e1 f7       	brne	.-8      	; 0x740 <gamecubeUpdate+0x4b6>

	if (gc_analog_lr_disable) {
     748:	80 91 1c 01 	lds	r24, 0x011C
     74c:	90 91 1d 01 	lds	r25, 0x011D
     750:	89 2b       	or	r24, r25
     752:	29 f0       	breq	.+10     	; 0x75e <gamecubeUpdate+0x4d4>
		last_built_report[4] = 0x7f;
     754:	8f e7       	ldi	r24, 0x7F	; 127
     756:	80 93 36 01 	sts	0x0136, r24
		last_built_report[5] = 0x7f;
     75a:	80 93 37 01 	sts	0x0137, r24
	}
	last_built_report[6] = tmpdata[6];
     75e:	88 85       	ldd	r24, Y+8	; 0x08
     760:	80 93 38 01 	sts	0x0138, r24
	last_built_report[7] = tmpdata[7];
     764:	89 85       	ldd	r24, Y+9	; 0x09
     766:	80 93 39 01 	sts	0x0139, r24

	return 0; // success
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	03 c0       	rjmp	.+6      	; 0x774 <gamecubeUpdate+0x4ea>
	else
	{
		count = gcn64_transaction(&tmp, 1);
	}
	if (count != GC_GETID_REPLY_LENGTH) {
		return 1;
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	01 c0       	rjmp	.+2      	; 0x774 <gamecubeUpdate+0x4ea>
	else
	{
		count = gcn64_transaction(tmpdata, 3);
	}
	if (count != GC_GETSTATUS_REPLY_LENGTH) {
		return 1; // failure
     772:	81 e0       	ldi	r24, 0x01	; 1
	}
	last_built_report[6] = tmpdata[6];
	last_built_report[7] = tmpdata[7];

	return 0; // success
}
     774:	66 96       	adiw	r28, 0x16	; 22
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	08 95       	ret

00000788 <gamecubeProbe>:

static char gamecubeProbe(boolean isCont2)
{
	if (0 == gamecubeUpdate(isCont2))
     788:	0e 94 45 01 	call	0x28a	; 0x28a <gamecubeUpdate>
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	81 11       	cpse	r24, r1
     790:	90 e0       	ldi	r25, 0x00	; 0
		return 1;

	return 0;
}
     792:	89 2f       	mov	r24, r25
     794:	08 95       	ret

00000796 <gamecubeInit>:
		}
}

static void gamecubeInit(boolean isCont2)
{
	if (0 == gamecubeUpdate(isCont2)) {
     796:	0e 94 45 01 	call	0x28a	; 0x28a <gamecubeUpdate>
     79a:	81 11       	cpse	r24, r1
     79c:	13 c0       	rjmp	.+38     	; 0x7c4 <gamecubeInit+0x2e>
		if (gcn64_workbuf[GC_BTN_L] && gcn64_workbuf[GC_BTN_R]) {
     79e:	80 91 8d 01 	lds	r24, 0x018D
     7a2:	88 23       	and	r24, r24
     7a4:	59 f0       	breq	.+22     	; 0x7bc <gamecubeInit+0x26>
     7a6:	80 91 8e 01 	lds	r24, 0x018E
     7aa:	88 23       	and	r24, r24
     7ac:	39 f0       	breq	.+14     	; 0x7bc <gamecubeInit+0x26>
			gc_analog_lr_disable = 1;
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	90 93 1d 01 	sts	0x011D, r25
     7b6:	80 93 1c 01 	sts	0x011C, r24
     7ba:	08 95       	ret
		} else {
			gc_analog_lr_disable = 0;
     7bc:	10 92 1d 01 	sts	0x011D, r1
     7c0:	10 92 1c 01 	sts	0x011C, r1
     7c4:	08 95       	ret

000007c6 <gamecubeGetGamepad>:
};

GCpad *gamecubeGetGamepad()
{
	return &GamecubeGamepad;
}
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	08 95       	ret

000007cc <gcn64protocol_hwinit>:
}

void gcn64protocol_hwinit()
{
	// data as input
	GCN64_DATA_DDR &= ~(GCN64_DATA_BIT);
     7cc:	3e 98       	cbi	0x07, 6	; 7

	// keep data low. By toggling the direction, we make the
	// pin act as an open-drain output.
	GCN64_DATA_PORT &= ~GCN64_DATA_BIT;
     7ce:	46 98       	cbi	0x08, 6	; 8
     7d0:	08 95       	ret

000007d2 <gcn64_transaction>:
 *
 * The result is in gcn64_workbuf, where each byte represents
 * a bit.
 */
int gcn64_transaction(unsigned char *data_out, int data_out_len)
{
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
	int count;
        cli();
     7da:	f8 94       	cli

static void gcn64_sendBytes(unsigned char *data, unsigned char n_bytes)
{
	unsigned int bits;

	if (n_bytes == 0)
     7dc:	66 23       	and	r22, r22
     7de:	09 f4       	brne	.+2      	; 0x7e2 <gcn64_transaction+0x10>
     7e0:	5d c0       	rjmp	.+186    	; 0x89c <sb_wait_high_done150>
		return;

	// Explode the data to one byte per bit for very easy transmission in assembly.
	// This trades memory for ease of implementation.
	bits = bitsToWorkbufBytes(data, n_bytes, 0);
     7e2:	77 27       	eor	r23, r23
static int bitsToWorkbufBytes(unsigned char *bytes, int num_bytes, int workbuf_bit_offset)
{
	int i, bit;
	unsigned char p;

	for (i=0,bit=0; i<num_bytes; i++) {
     7e4:	16 16       	cp	r1, r22
     7e6:	17 06       	cpc	r1, r23
     7e8:	0c f5       	brge	.+66     	; 0x82c <gcn64_transaction+0x5a>
     7ea:	a8 2f       	mov	r26, r24
     7ec:	b9 2f       	mov	r27, r25
     7ee:	66 0f       	add	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	66 0f       	add	r22, r22
     7f4:	77 1f       	adc	r23, r23
     7f6:	66 0f       	add	r22, r22
     7f8:	77 1f       	adc	r23, r23
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	50 e0       	ldi	r21, 0x00	; 0
 *
 * The result is in gcn64_workbuf, where each byte represents
 * a bit.
 */
int gcn64_transaction(unsigned char *data_out, int data_out_len)
{
     7fe:	10 e8       	ldi	r17, 0x80	; 128
     800:	0f c0       	rjmp	.+30     	; 0x820 <gcn64_transaction+0x4e>
	int i, bit;
	unsigned char p;

	for (i=0,bit=0; i<num_bytes; i++) {
		for (p=0x80; p; p>>=1) {
			gcn64_workbuf[bit+workbuf_bit_offset] = bytes[i] & p;
     802:	dc 91       	ld	r29, X
     804:	dc 23       	and	r29, r28
     806:	fc 01       	movw	r30, r24
     808:	ec 57       	subi	r30, 0x7C	; 124
     80a:	fe 4f       	sbci	r31, 0xFE	; 254
     80c:	d0 83       	st	Z, r29
			bit++;
     80e:	01 96       	adiw	r24, 0x01	; 1
{
	int i, bit;
	unsigned char p;

	for (i=0,bit=0; i<num_bytes; i++) {
		for (p=0x80; p; p>>=1) {
     810:	c6 95       	lsr	r28
     812:	28 17       	cp	r18, r24
     814:	39 07       	cpc	r19, r25
     816:	a9 f7       	brne	.-22     	; 0x802 <gcn64_transaction+0x30>
     818:	11 96       	adiw	r26, 0x01	; 1
static int bitsToWorkbufBytes(unsigned char *bytes, int num_bytes, int workbuf_bit_offset)
{
	int i, bit;
	unsigned char p;

	for (i=0,bit=0; i<num_bytes; i++) {
     81a:	46 17       	cp	r20, r22
     81c:	57 07       	cpc	r21, r23
     81e:	41 f0       	breq	.+16     	; 0x830 <gcn64_transaction+0x5e>
     820:	ca 01       	movw	r24, r20
     822:	48 5f       	subi	r20, 0xF8	; 248
     824:	5f 4f       	sbci	r21, 0xFF	; 255
     826:	9a 01       	movw	r18, r20
 *
 * The result is in gcn64_workbuf, where each byte represents
 * a bit.
 */
int gcn64_transaction(unsigned char *data_out, int data_out_len)
{
     828:	c1 2f       	mov	r28, r17
     82a:	eb cf       	rjmp	.-42     	; 0x802 <gcn64_transaction+0x30>
static int bitsToWorkbufBytes(unsigned char *bytes, int num_bytes, int workbuf_bit_offset)
{
	int i, bit;
	unsigned char p;

	for (i=0,bit=0; i<num_bytes; i++) {
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
#define DLY_LARGE_1ST	"ldi r17, 9\n rcall sb_dly%=\n"
#define DLY_SHORT_2ND	"\n" 
#define DLY_LARGE_2ND	"ldi r17, 5\n rcall sb_dly%=\n nop\nnop\n"
#endif

	asm volatile(
     830:	e4 e8       	ldi	r30, 0x84	; 132
     832:	f1 e0       	ldi	r31, 0x01	; 1
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	ef 93       	push	r30
     83a:	ff 93       	push	r31

0000083c <sb_loop150>:
     83c:	01 91       	ld	r16, Z+
     83e:	00 23       	and	r16, r16
     840:	11 f0       	breq	.+4      	; 0x846 <sb_send0150>
     842:	69 f4       	brne	.+26     	; 0x85e <sb_send1150>
     844:	1b c0       	rjmp	.+54     	; 0x87c <sb_end150>

00000846 <sb_send0150>:
     846:	00 00       	nop
     848:	3e 9a       	sbi	0x07, 6	; 7
     84a:	1d e0       	ldi	r17, 0x0D	; 13
     84c:	14 d0       	rcall	.+40     	; 0x876 <sb_dly150>
     84e:	3e 98       	cbi	0x07, 6	; 7
	...
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	81 f7       	brne	.-32     	; 0x83c <sb_loop150>
     85c:	0f c0       	rjmp	.+30     	; 0x87c <sb_end150>

0000085e <sb_send1150>:
     85e:	3e 9a       	sbi	0x07, 6	; 7
     860:	12 e0       	ldi	r17, 0x02	; 2
     862:	00 00       	nop
     864:	08 d0       	rcall	.+16     	; 0x876 <sb_dly150>
     866:	3e 98       	cbi	0x07, 6	; 7
     868:	19 e0       	ldi	r17, 0x09	; 9
     86a:	05 d0       	rcall	.+10     	; 0x876 <sb_dly150>
     86c:	00 00       	nop
     86e:	00 00       	nop
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	21 f7       	brne	.-56     	; 0x83c <sb_loop150>
     874:	03 c0       	rjmp	.+6      	; 0x87c <sb_end150>

00000876 <sb_dly150>:
     876:	1a 95       	dec	r17
     878:	f1 f7       	brne	.-4      	; 0x876 <sb_dly150>
     87a:	08 95       	ret

0000087c <sb_end150>:
     87c:	00 00       	nop
     87e:	00 00       	nop
     880:	ff 91       	pop	r31
     882:	ef 91       	pop	r30
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	3e 9a       	sbi	0x07, 6	; 7
     88a:	12 e0       	ldi	r17, 0x02	; 2
     88c:	00 00       	nop
     88e:	f3 df       	rcall	.-26     	; 0x876 <sb_dly150>
     890:	3e 98       	cbi	0x07, 6	; 7
     892:	0f ef       	ldi	r16, 0xFF	; 255

00000894 <sb_waitHigh150>:
     894:	0a 95       	dec	r16
     896:	11 f0       	breq	.+4      	; 0x89c <sb_wait_high_done150>
     898:	36 9b       	sbis	0x06, 6	; 6
     89a:	fc cf       	rjmp	.-8      	; 0x894 <sb_waitHigh150>

0000089c <sb_wait_high_done150>:

	// The data line has been released. 
	// The receive part below expects it to be still high
	// and will wait for it to become low before beginning
	// the counting.
	asm volatile(
     89c:	e4 e8       	ldi	r30, 0x84	; 132
     89e:	f1 e0       	ldi	r31, 0x01	; 1
     8a0:	ef 93       	push	r30
     8a2:	ff 93       	push	r31
     8a4:	88 27       	eor	r24, r24
     8a6:	00 27       	eor	r16, r16

000008a8 <initial_wait_low>:
     8a8:	03 95       	inc	r16
     8aa:	a1 f0       	breq	.+40     	; 0x8d4 <overflow>
     8ac:	36 99       	sbic	0x06, 6	; 6
     8ae:	fc cf       	rjmp	.-8      	; 0x8a8 <initial_wait_low>
     8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <waithigh>

000008b2 <waitlow>:
     8b2:	0b e4       	ldi	r16, 0x4B	; 75

000008b4 <waitlow_lp>:
     8b4:	03 95       	inc	r16
     8b6:	72 f0       	brmi	.+28     	; 0x8d4 <overflow>
     8b8:	36 99       	sbic	0x06, 6	; 6
     8ba:	fc cf       	rjmp	.-8      	; 0x8b4 <waitlow_lp>
     8bc:	83 95       	inc	r24
     8be:	51 f0       	breq	.+20     	; 0x8d4 <overflow>
     8c0:	01 93       	st	Z+, r16

000008c2 <waithigh>:
     8c2:	0b e4       	ldi	r16, 0x4B	; 75

000008c4 <waithigh_lp>:
     8c4:	03 95       	inc	r16
     8c6:	32 f0       	brmi	.+12     	; 0x8d4 <overflow>
     8c8:	36 9b       	sbis	0x06, 6	; 6
     8ca:	fc cf       	rjmp	.-8      	; 0x8c4 <waithigh_lp>
     8cc:	83 95       	inc	r24
     8ce:	11 f0       	breq	.+4      	; 0x8d4 <overflow>
     8d0:	01 93       	st	Z+, r16
     8d2:	ef cf       	rjmp	.-34     	; 0x8b2 <waitlow>

000008d4 <overflow>:
     8d4:	ff 91       	pop	r31
     8d6:	ef 91       	pop	r30
     8d8:	78 2f       	mov	r23, r24
int gcn64_transaction(unsigned char *data_out, int data_out_len)
{
	int count;
        cli();
	gcn64_sendBytes(data_out, data_out_len);
	count = gcn64_receive();
     8da:	28 2f       	mov	r18, r24
     8dc:	30 e0       	ldi	r19, 0x00	; 0
	if (!count)
     8de:	21 15       	cp	r18, r1
     8e0:	31 05       	cpc	r19, r1
     8e2:	11 f1       	breq	.+68     	; 0x928 <overflow+0x54>
		return 0;

	if (!(count & 0x01)) {
     8e4:	80 ff       	sbrs	r24, 0
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <overflow+0x5a>
    //  
    //  
    // No64 us = microseconds

	// This operation takes approximately 100uS on 64bit gamecube messages
	for (i=0; i<count; i++) {
     8e8:	88 23       	and	r24, r24
     8ea:	81 f0       	breq	.+32     	; 0x90c <overflow+0x38>
     8ec:	df 01       	movw	r26, r30
		t = *input; 
		input++;

		*output = t < *input;
     8ee:	c1 e0       	ldi	r28, 0x01	; 1
     8f0:	d0 e0       	ldi	r29, 0x00	; 0
     8f2:	cd 01       	movw	r24, r26
    //  
    // No64 us = microseconds

	// This operation takes approximately 100uS on 64bit gamecube messages
	for (i=0; i<count; i++) {
		t = *input; 
     8f4:	60 81       	ld	r22, Z
		input++;

		*output = t < *input;
     8f6:	51 81       	ldd	r21, Z+1	; 0x01
     8f8:	4c 2f       	mov	r20, r28
     8fa:	65 17       	cp	r22, r21
     8fc:	08 f0       	brcs	.+2      	; 0x900 <overflow+0x2c>
     8fe:	4d 2f       	mov	r20, r29
     900:	4d 93       	st	X+, r20
     902:	32 96       	adiw	r30, 0x02	; 2
     904:	4a 2f       	mov	r20, r26
     906:	48 1b       	sub	r20, r24
    //  
    //  
    // No64 us = microseconds

	// This operation takes approximately 100uS on 64bit gamecube messages
	for (i=0; i<count; i++) {
     908:	47 17       	cp	r20, r23
     90a:	a0 f3       	brcs	.-24     	; 0x8f4 <overflow+0x20>
		// is why we should receive and odd number of lengths.
		return 0;
	}

	gcn64_decodeWorkbuf(count);
	sei();
     90c:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     90e:	8a e1       	ldi	r24, 0x1A	; 26
     910:	8a 95       	dec	r24
     912:	f1 f7       	brne	.-4      	; 0x910 <overflow+0x3c>
     914:	00 c0       	rjmp	.+0      	; 0x916 <overflow+0x42>
	 * a rumble-on or rumble-off command (probably init too), the following
	 * get status fails. This starts to work at 2us. 5 should be safe. */
	_delay_us(5);
	
	/* return the number of full bits received. */
	return (count-1) / 2;
     916:	21 50       	subi	r18, 0x01	; 1
     918:	31 09       	sbc	r19, r1
     91a:	c9 01       	movw	r24, r18
     91c:	99 23       	and	r25, r25
     91e:	0c f4       	brge	.+2      	; 0x922 <overflow+0x4e>
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	95 95       	asr	r25
     924:	87 95       	ror	r24
     926:	05 c0       	rjmp	.+10     	; 0x932 <overflow+0x5e>
	int count;
        cli();
	gcn64_sendBytes(data_out, data_out_len);
	count = gcn64_receive();
	if (!count)
		return 0;
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	02 c0       	rjmp	.+4      	; 0x932 <overflow+0x5e>
		// something is wrong. 
		//
		// The stop bit is a short (~1us) low state followed by an "infinite"
		// high state, which timeouts and lets the function return. This
		// is why we should receive and odd number of lengths.
		return 0;
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
	 * get status fails. This starts to work at 2us. 5 should be safe. */
	_delay_us(5);
	
	/* return the number of full bits received. */
	return (count-1) / 2;
}
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	08 95       	ret

0000093c <gcn64_detectController>:

#if (GC_GETID != 	N64_GET_CAPABILITIES)
#error N64 vs GC detection commnad broken
#endif
int gcn64_detectController()
{
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	1f 92       	push	r1
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmp = GC_GETID;
     946:	19 82       	std	Y+1, r1	; 0x01
	int count;
	unsigned char nib;

	count = gcn64_transaction(&tmp, 1);
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	ce 01       	movw	r24, r28
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <gcn64_transaction>
	if (count == 0) {
     954:	00 97       	sbiw	r24, 0x00	; 0
     956:	11 f1       	breq	.+68     	; 0x99c <gcn64_detectController+0x60>
		return CONTROLLER_IS_ABSENT;
	}
	if (count != 24) {
     958:	48 97       	sbiw	r24, 0x18	; 24
     95a:	19 f5       	brne	.+70     	; 0x9a2 <gcn64_detectController+0x66>
	 * a gamecube controller too.
	 *
	 * */

	nib = 0;
	if (gcn64_workbuf[4])
     95c:	80 91 88 01 	lds	r24, 0x0188
     960:	81 11       	cpse	r24, r1
		nib |= 0x8;
     962:	88 e0       	ldi	r24, 0x08	; 8
	if (gcn64_workbuf[5])
     964:	90 91 89 01 	lds	r25, 0x0189
     968:	91 11       	cpse	r25, r1
		nib |= 0x4;
     96a:	84 60       	ori	r24, 0x04	; 4
	if (gcn64_workbuf[6])
     96c:	90 91 8a 01 	lds	r25, 0x018A
     970:	91 11       	cpse	r25, r1
		nib |= 0x2;
     972:	82 60       	ori	r24, 0x02	; 2
	if (gcn64_workbuf[7])
     974:	90 91 8b 01 	lds	r25, 0x018B
     978:	91 11       	cpse	r25, r1
		nib |= 0x1;
     97a:	81 60       	ori	r24, 0x01	; 1
		
	switch(nib)
     97c:	8a 30       	cpi	r24, 0x0A	; 10
     97e:	28 f4       	brcc	.+10     	; 0x98a <gcn64_detectController+0x4e>
     980:	88 30       	cpi	r24, 0x08	; 8
     982:	90 f4       	brcc	.+36     	; 0x9a8 <gcn64_detectController+0x6c>
     984:	85 30       	cpi	r24, 0x05	; 5
     986:	21 f0       	breq	.+8      	; 0x990 <gcn64_detectController+0x54>
     988:	06 c0       	rjmp	.+12     	; 0x996 <gcn64_detectController+0x5a>
     98a:	8b 30       	cpi	r24, 0x0B	; 11
     98c:	69 f0       	breq	.+26     	; 0x9a8 <gcn64_detectController+0x6c>
     98e:	03 c0       	rjmp	.+6      	; 0x996 <gcn64_detectController+0x5a>
	{
		case 0x5: return CONTROLLER_IS_N64;
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0b c0       	rjmp	.+22     	; 0x9ac <gcn64_detectController+0x70>
		case 0x9: // normal controllers
		case 0x8: // wavebird, controller off.
		case 0xb: // Never saw this one, but it is mentionned above.
			return CONTROLLER_IS_GC;

		default: return CONTROLLER_IS_UNKNOWN;
     996:	84 e0       	ldi	r24, 0x04	; 4
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	08 c0       	rjmp	.+16     	; 0x9ac <gcn64_detectController+0x70>
	int count;
	unsigned char nib;

	count = gcn64_transaction(&tmp, 1);
	if (count == 0) {
		return CONTROLLER_IS_ABSENT;
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <gcn64_detectController+0x70>
	}
	if (count != 24) {
		return CONTROLLER_IS_UNKNOWN;
     9a2:	84 e0       	ldi	r24, 0x04	; 4
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <gcn64_detectController+0x70>
		case 0x5: return CONTROLLER_IS_N64;
		
		case 0x9: // normal controllers
		case 0x8: // wavebird, controller off.
		case 0xb: // Never saw this one, but it is mentionned above.
			return CONTROLLER_IS_GC;
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	90 e0       	ldi	r25, 0x00	; 0
		default: return CONTROLLER_IS_UNKNOWN;
	}
	

	return 0;
}
     9ac:	0f 90       	pop	r0
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <gcn64protocol_hwinit2>:
}

void gcn64protocol_hwinit2()
{
	// data as input
	GCN64_DATA_DDR2 &= ~(GCN64_DATA_BIT2);
     9b4:	87 98       	cbi	0x10, 7	; 16

	// keep data low. By toggling the direction, we make the
	// pin act as an open-drain output.
	GCN64_DATA_PORT2 &= ~GCN64_DATA_BIT2;
     9b6:	8f 98       	cbi	0x11, 7	; 17
     9b8:	08 95       	ret

000009ba <gcn64_transaction2>:
 *
 * The result is in gcn64_workbuf2, where each byte represents
 * a bit.
 */
int gcn64_transaction2(unsigned char *data_out, int data_out_len)
{
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
	int count;
        cli();
     9c2:	f8 94       	cli

static void gcn64_sendBytes2(unsigned char *data, unsigned char n_bytes)
{
	unsigned int bits;

	if (n_bytes == 0)
     9c4:	66 23       	and	r22, r22
     9c6:	09 f4       	brne	.+2      	; 0x9ca <gcn64_transaction2+0x10>
     9c8:	5a c0       	rjmp	.+180    	; 0xa7e <sb_wait_high_done155>
		return;

	// Explode the data to one byte per bit for very easy transmission in assembly.
	// This trades memory for ease of implementation.
	bits = bitsToWorkbufBytes2(data, n_bytes, 0);
     9ca:	77 27       	eor	r23, r23
static int bitsToWorkbufBytes2(unsigned char *bytes, int num_bytes, int workbuf_bit_offset)
{
	int i, bit;
	unsigned char p;

	for (i=0,bit=0; i<num_bytes; i++) {
     9cc:	16 16       	cp	r1, r22
     9ce:	17 06       	cpc	r1, r23
     9d0:	f4 f4       	brge	.+60     	; 0xa0e <gcn64_transaction2+0x54>
     9d2:	ec 01       	movw	r28, r24
     9d4:	86 0f       	add	r24, r22
     9d6:	97 1f       	adc	r25, r23
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
 *
 * The result is in gcn64_workbuf2, where each byte represents
 * a bit.
 */
int gcn64_transaction2(unsigned char *data_out, int data_out_len)
{
     9dc:	10 e8       	ldi	r17, 0x80	; 128
     9de:	10 c0       	rjmp	.+32     	; 0xa00 <gcn64_transaction2+0x46>
	int i, bit;
	unsigned char p;

	for (i=0,bit=0; i<num_bytes; i++) {
		for (p=0x80; p; p>>=1) {
			gcn64_workbuf[bit+workbuf_bit_offset] = bytes[i] & p;
     9e0:	78 81       	ld	r23, Y
     9e2:	76 23       	and	r23, r22
     9e4:	fd 01       	movw	r30, r26
     9e6:	ec 57       	subi	r30, 0x7C	; 124
     9e8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ea:	70 83       	st	Z, r23
			bit++;
     9ec:	11 96       	adiw	r26, 0x01	; 1
{
	int i, bit;
	unsigned char p;

	for (i=0,bit=0; i<num_bytes; i++) {
		for (p=0x80; p; p>>=1) {
     9ee:	66 95       	lsr	r22
     9f0:	a2 17       	cp	r26, r18
     9f2:	b3 07       	cpc	r27, r19
     9f4:	a9 f7       	brne	.-22     	; 0x9e0 <gcn64_transaction2+0x26>
     9f6:	21 96       	adiw	r28, 0x01	; 1
static int bitsToWorkbufBytes2(unsigned char *bytes, int num_bytes, int workbuf_bit_offset)
{
	int i, bit;
	unsigned char p;

	for (i=0,bit=0; i<num_bytes; i++) {
     9f8:	c8 17       	cp	r28, r24
     9fa:	d9 07       	cpc	r29, r25
     9fc:	51 f0       	breq	.+20     	; 0xa12 <gcn64_transaction2+0x58>
     9fe:	9a 01       	movw	r18, r20
     a00:	d9 01       	movw	r26, r18
     a02:	a9 01       	movw	r20, r18
     a04:	48 5f       	subi	r20, 0xF8	; 248
     a06:	5f 4f       	sbci	r21, 0xFF	; 255
     a08:	9a 01       	movw	r18, r20
 *
 * The result is in gcn64_workbuf2, where each byte represents
 * a bit.
 */
int gcn64_transaction2(unsigned char *data_out, int data_out_len)
{
     a0a:	61 2f       	mov	r22, r17
     a0c:	e9 cf       	rjmp	.-46     	; 0x9e0 <gcn64_transaction2+0x26>
static int bitsToWorkbufBytes2(unsigned char *bytes, int num_bytes, int workbuf_bit_offset)
{
	int i, bit;
	unsigned char p;

	for (i=0,bit=0; i<num_bytes; i++) {
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
#define DLY_LARGE_1ST	"ldi r17, 9\n rcall sb_dly%=\n"
#define DLY_SHORT_2ND	"\n" 
#define DLY_LARGE_2ND	"ldi r17, 5\n rcall sb_dly%=\n nop\nnop\n"
#endif

	asm volatile(
     a12:	e4 e8       	ldi	r30, 0x84	; 132
     a14:	f1 e0       	ldi	r31, 0x01	; 1
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	ef 93       	push	r30
     a1c:	ff 93       	push	r31

00000a1e <sb_loop155>:
     a1e:	01 91       	ld	r16, Z+
     a20:	00 23       	and	r16, r16
     a22:	11 f0       	breq	.+4      	; 0xa28 <sb_send0155>
     a24:	69 f4       	brne	.+26     	; 0xa40 <sb_send1155>
     a26:	1b c0       	rjmp	.+54     	; 0xa5e <sb_end155>

00000a28 <sb_send0155>:
     a28:	00 00       	nop
     a2a:	87 9a       	sbi	0x10, 7	; 16
     a2c:	1d e0       	ldi	r17, 0x0D	; 13
     a2e:	14 d0       	rcall	.+40     	; 0xa58 <sb_dly155>
     a30:	87 98       	cbi	0x10, 7	; 16
	...
     a3a:	11 97       	sbiw	r26, 0x01	; 1
     a3c:	81 f7       	brne	.-32     	; 0xa1e <sb_loop155>
     a3e:	0f c0       	rjmp	.+30     	; 0xa5e <sb_end155>

00000a40 <sb_send1155>:
     a40:	87 9a       	sbi	0x10, 7	; 16
     a42:	12 e0       	ldi	r17, 0x02	; 2
     a44:	00 00       	nop
     a46:	08 d0       	rcall	.+16     	; 0xa58 <sb_dly155>
     a48:	87 98       	cbi	0x10, 7	; 16
     a4a:	19 e0       	ldi	r17, 0x09	; 9
     a4c:	05 d0       	rcall	.+10     	; 0xa58 <sb_dly155>
     a4e:	00 00       	nop
     a50:	00 00       	nop
     a52:	11 97       	sbiw	r26, 0x01	; 1
     a54:	21 f7       	brne	.-56     	; 0xa1e <sb_loop155>
     a56:	03 c0       	rjmp	.+6      	; 0xa5e <sb_end155>

00000a58 <sb_dly155>:
     a58:	1a 95       	dec	r17
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <sb_dly155>
     a5c:	08 95       	ret

00000a5e <sb_end155>:
     a5e:	00 00       	nop
     a60:	00 00       	nop
     a62:	ff 91       	pop	r31
     a64:	ef 91       	pop	r30
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	87 9a       	sbi	0x10, 7	; 16
     a6c:	12 e0       	ldi	r17, 0x02	; 2
     a6e:	00 00       	nop
     a70:	f3 df       	rcall	.-26     	; 0xa58 <sb_dly155>
     a72:	87 98       	cbi	0x10, 7	; 16
     a74:	0f ef       	ldi	r16, 0xFF	; 255

00000a76 <sb_waitHigh155>:
     a76:	0a 95       	dec	r16
     a78:	11 f0       	breq	.+4      	; 0xa7e <sb_wait_high_done155>
     a7a:	7f 9b       	sbis	0x0f, 7	; 15
     a7c:	fc cf       	rjmp	.-8      	; 0xa76 <sb_waitHigh155>

00000a7e <sb_wait_high_done155>:

	// The data line has been released. 
	// The receive part below expects it to be still high
	// and will wait for it to become low before beginning
	// the counting.
	asm volatile(
     a7e:	e4 e8       	ldi	r30, 0x84	; 132
     a80:	f1 e0       	ldi	r31, 0x01	; 1
     a82:	ef 93       	push	r30
     a84:	ff 93       	push	r31
     a86:	88 27       	eor	r24, r24
     a88:	00 27       	eor	r16, r16

00000a8a <initial_wait_low>:
     a8a:	03 95       	inc	r16
     a8c:	a1 f0       	breq	.+40     	; 0xab6 <overflow>
     a8e:	7f 99       	sbic	0x0f, 7	; 15
     a90:	fc cf       	rjmp	.-8      	; 0xa8a <initial_wait_low>
     a92:	08 c0       	rjmp	.+16     	; 0xaa4 <waithigh>

00000a94 <waitlow>:
     a94:	0b e4       	ldi	r16, 0x4B	; 75

00000a96 <waitlow_lp>:
     a96:	03 95       	inc	r16
     a98:	72 f0       	brmi	.+28     	; 0xab6 <overflow>
     a9a:	7f 99       	sbic	0x0f, 7	; 15
     a9c:	fc cf       	rjmp	.-8      	; 0xa96 <waitlow_lp>
     a9e:	83 95       	inc	r24
     aa0:	51 f0       	breq	.+20     	; 0xab6 <overflow>
     aa2:	01 93       	st	Z+, r16

00000aa4 <waithigh>:
     aa4:	0b e4       	ldi	r16, 0x4B	; 75

00000aa6 <waithigh_lp>:
     aa6:	03 95       	inc	r16
     aa8:	32 f0       	brmi	.+12     	; 0xab6 <overflow>
     aaa:	7f 9b       	sbis	0x0f, 7	; 15
     aac:	fc cf       	rjmp	.-8      	; 0xaa6 <waithigh_lp>
     aae:	83 95       	inc	r24
     ab0:	11 f0       	breq	.+4      	; 0xab6 <overflow>
     ab2:	01 93       	st	Z+, r16
     ab4:	ef cf       	rjmp	.-34     	; 0xa94 <waitlow>

00000ab6 <overflow>:
     ab6:	ff 91       	pop	r31
     ab8:	ef 91       	pop	r30
     aba:	78 2f       	mov	r23, r24
int gcn64_transaction2(unsigned char *data_out, int data_out_len)
{
	int count;
        cli();
	gcn64_sendBytes2(data_out, data_out_len);
	count = gcn64_receive2();
     abc:	28 2f       	mov	r18, r24
     abe:	30 e0       	ldi	r19, 0x00	; 0
	if (!count)
     ac0:	21 15       	cp	r18, r1
     ac2:	31 05       	cpc	r19, r1
     ac4:	11 f1       	breq	.+68     	; 0xb0a <__stack+0xb>
		return 0;

	if (!(count & 0x01)) {
     ac6:	80 ff       	sbrs	r24, 0
     ac8:	23 c0       	rjmp	.+70     	; 0xb10 <__stack+0x11>
    //  
    //  
    // No64 us = microseconds

	// This operation takes approximately 100uS on 64bit gamecube messages
	for (i=0; i<count; i++) {
     aca:	88 23       	and	r24, r24
     acc:	81 f0       	breq	.+32     	; 0xaee <overflow+0x38>
     ace:	df 01       	movw	r26, r30
		t = *input; 
		input++;

		*output = t < *input;
     ad0:	c1 e0       	ldi	r28, 0x01	; 1
     ad2:	d0 e0       	ldi	r29, 0x00	; 0
     ad4:	cd 01       	movw	r24, r26
    //  
    // No64 us = microseconds

	// This operation takes approximately 100uS on 64bit gamecube messages
	for (i=0; i<count; i++) {
		t = *input; 
     ad6:	60 81       	ld	r22, Z
		input++;

		*output = t < *input;
     ad8:	51 81       	ldd	r21, Z+1	; 0x01
     ada:	4c 2f       	mov	r20, r28
     adc:	65 17       	cp	r22, r21
     ade:	08 f0       	brcs	.+2      	; 0xae2 <overflow+0x2c>
     ae0:	4d 2f       	mov	r20, r29
     ae2:	4d 93       	st	X+, r20
     ae4:	32 96       	adiw	r30, 0x02	; 2
     ae6:	4a 2f       	mov	r20, r26
     ae8:	48 1b       	sub	r20, r24
    //  
    //  
    // No64 us = microseconds

	// This operation takes approximately 100uS on 64bit gamecube messages
	for (i=0; i<count; i++) {
     aea:	47 17       	cp	r20, r23
     aec:	a0 f3       	brcs	.-24     	; 0xad6 <overflow+0x20>
		// is why we should receive and odd number of lengths.
		return 0;
	}

	gcn64_decodeWorkbuf2(count);
	sei();
     aee:	78 94       	sei
     af0:	8a e1       	ldi	r24, 0x1A	; 26
     af2:	8a 95       	dec	r24
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <overflow+0x3c>
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <overflow+0x42>
	 * a rumble-on or rumble-off command (probably init too), the following
	 * get status fails. This starts to work at 2us. 5 should be safe. */
	_delay_us(5);
	
	/* return the number of full bits received. */
	return (count-1) / 2;
     af8:	21 50       	subi	r18, 0x01	; 1
     afa:	31 09       	sbc	r19, r1
     afc:	c9 01       	movw	r24, r18
     afe:	99 23       	and	r25, r25
     b00:	0c f4       	brge	.+2      	; 0xb04 <__stack+0x5>
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	95 95       	asr	r25
     b06:	87 95       	ror	r24
     b08:	05 c0       	rjmp	.+10     	; 0xb14 <__stack+0x15>
	int count;
        cli();
	gcn64_sendBytes2(data_out, data_out_len);
	count = gcn64_receive2();
	if (!count)
		return 0;
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <__stack+0x15>
		// something is wrong. 
		//
		// The stop bit is a short (~1us) low state followed by an "infinite"
		// high state, which timeouts and lets the function return. This
		// is why we should receive and odd number of lengths.
		return 0;
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
	 * get status fails. This starts to work at 2us. 5 should be safe. */
	_delay_us(5);
	
	/* return the number of full bits received. */
	return (count-1) / 2;
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	08 95       	ret

00000b1e <gcn64_detectController2>:

#if (GC_GETID != 	N64_GET_CAPABILITIES)
#error N64 vs GC detection commnad broken
#endif
int gcn64_detectController2()
{
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	1f 92       	push	r1
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmp = GC_GETID;
     b28:	19 82       	std	Y+1, r1	; 0x01
	int count;
	unsigned char nib;

	count = gcn64_transaction2(&tmp, 1);
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	0e 94 dd 04 	call	0x9ba	; 0x9ba <gcn64_transaction2>
	if (count == 0) {
     b36:	00 97       	sbiw	r24, 0x00	; 0
     b38:	11 f1       	breq	.+68     	; 0xb7e <gcn64_detectController2+0x60>
		return CONTROLLER_IS_ABSENT;
	}
	if (count != 24) {
     b3a:	48 97       	sbiw	r24, 0x18	; 24
     b3c:	19 f5       	brne	.+70     	; 0xb84 <gcn64_detectController2+0x66>
	 * a gamecube controller too.
	 *
	 * */

	nib = 0;
	if (gcn64_workbuf[4])
     b3e:	80 91 88 01 	lds	r24, 0x0188
     b42:	81 11       	cpse	r24, r1
		nib |= 0x8;
     b44:	88 e0       	ldi	r24, 0x08	; 8
	if (gcn64_workbuf[5])
     b46:	90 91 89 01 	lds	r25, 0x0189
     b4a:	91 11       	cpse	r25, r1
		nib |= 0x4;
     b4c:	84 60       	ori	r24, 0x04	; 4
	if (gcn64_workbuf[6])
     b4e:	90 91 8a 01 	lds	r25, 0x018A
     b52:	91 11       	cpse	r25, r1
		nib |= 0x2;
     b54:	82 60       	ori	r24, 0x02	; 2
	if (gcn64_workbuf[7])
     b56:	90 91 8b 01 	lds	r25, 0x018B
     b5a:	91 11       	cpse	r25, r1
		nib |= 0x1;
     b5c:	81 60       	ori	r24, 0x01	; 1
		
	switch(nib)
     b5e:	8a 30       	cpi	r24, 0x0A	; 10
     b60:	28 f4       	brcc	.+10     	; 0xb6c <gcn64_detectController2+0x4e>
     b62:	88 30       	cpi	r24, 0x08	; 8
     b64:	90 f4       	brcc	.+36     	; 0xb8a <gcn64_detectController2+0x6c>
     b66:	85 30       	cpi	r24, 0x05	; 5
     b68:	21 f0       	breq	.+8      	; 0xb72 <gcn64_detectController2+0x54>
     b6a:	06 c0       	rjmp	.+12     	; 0xb78 <gcn64_detectController2+0x5a>
     b6c:	8b 30       	cpi	r24, 0x0B	; 11
     b6e:	69 f0       	breq	.+26     	; 0xb8a <gcn64_detectController2+0x6c>
     b70:	03 c0       	rjmp	.+6      	; 0xb78 <gcn64_detectController2+0x5a>
	{
		case 0x5: return CONTROLLER_IS_N64;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0b c0       	rjmp	.+22     	; 0xb8e <gcn64_detectController2+0x70>
		case 0x9: // normal controllers
		case 0x8: // wavebird, controller off.
		case 0xb: // Never saw this one, but it is mentionned above.
			return CONTROLLER_IS_GC;

		default: return CONTROLLER_IS_UNKNOWN;
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	08 c0       	rjmp	.+16     	; 0xb8e <gcn64_detectController2+0x70>
	int count;
	unsigned char nib;

	count = gcn64_transaction2(&tmp, 1);
	if (count == 0) {
		return CONTROLLER_IS_ABSENT;
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	05 c0       	rjmp	.+10     	; 0xb8e <gcn64_detectController2+0x70>
	}
	if (count != 24) {
		return CONTROLLER_IS_UNKNOWN;
     b84:	84 e0       	ldi	r24, 0x04	; 4
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <gcn64_detectController2+0x70>
		case 0x5: return CONTROLLER_IS_N64;
		
		case 0x9: // normal controllers
		case 0x8: // wavebird, controller off.
		case 0xb: // Never saw this one, but it is mentionned above.
			return CONTROLLER_IS_GC;
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	90 e0       	ldi	r25, 0x00	; 0
		default: return CONTROLLER_IS_UNKNOWN;
	}
	

	return 0;
}
     b8e:	0f 90       	pop	r0
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <n64BuildReport>:
	return memcmp(last_built_report, last_sent_report, GCN64_REPORT_SIZE);
}

static int n64BuildReport(unsigned char *reportBuffer, int id)
{
	if (reportBuffer) 
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	41 f0       	breq	.+16     	; 0xbaa <n64BuildReport+0x14>
		memcpy(reportBuffer, last_built_report, GCN64_REPORT_SIZE);
     b9a:	28 e0       	ldi	r18, 0x08	; 8
     b9c:	e2 e4       	ldi	r30, 0x42	; 66
     b9e:	f1 e0       	ldi	r31, 0x01	; 1
     ba0:	dc 01       	movw	r26, r24
     ba2:	01 90       	ld	r0, Z+
     ba4:	0d 92       	st	X+, r0
     ba6:	2a 95       	dec	r18
     ba8:	e1 f7       	brne	.-8      	; 0xba2 <n64BuildReport+0xc>
	
	memcpy(	last_sent_report, last_built_report, GCN64_REPORT_SIZE);	
     baa:	88 e0       	ldi	r24, 0x08	; 8
     bac:	e2 e4       	ldi	r30, 0x42	; 66
     bae:	f1 e0       	ldi	r31, 0x01	; 1
     bb0:	aa e3       	ldi	r26, 0x3A	; 58
     bb2:	b1 e0       	ldi	r27, 0x01	; 1
     bb4:	01 90       	ld	r0, Z+
     bb6:	0d 92       	st	X+, r0
     bb8:	8a 95       	dec	r24
     bba:	e1 f7       	brne	.-8      	; 0xbb4 <n64BuildReport+0x1e>
	return GCN64_REPORT_SIZE;
}
     bbc:	88 e0       	ldi	r24, 0x08	; 8
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	08 95       	ret

00000bc2 <n64Update>:
#define RSTATE_UNAVAILABLE	5
static unsigned char n64_rumble_state = RSTATE_UNAVAILABLE;


static char n64Update(boolean isCont2)
{
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	a6 97       	sbiw	r28, 0x26	; 38
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	18 2f       	mov	r17, r24
	 * 0x050002 : 0000 0101 0000 0000 0000 0010 : Expansion pack removed
	 *
	 * Bit 0 tells us if there is something connected to the expansion port.
	 * Bit 1 tells is if there was something connected that has been removed.
	 */
	tmpdata[0] = N64_GET_CAPABILITIES;
     bda:	19 82       	std	Y+1, r1	; 0x01
	if (!isCont2)
     bdc:	81 11       	cpse	r24, r1
     bde:	07 c0       	rjmp	.+14     	; 0xbee <n64Update+0x2c>
	{
		count = gcn64_transaction(tmpdata, 1);
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	ce 01       	movw	r24, r28
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <gcn64_transaction>
     bec:	06 c0       	rjmp	.+12     	; 0xbfa <n64Update+0x38>
	}
	else
	{
		count = gcn64_transaction2(tmpdata, 1);
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	ce 01       	movw	r24, r28
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <gcn64_transaction2>
	}
	if (count != N64_CAPS_REPLY_LENGTH) {
     bfa:	88 31       	cpi	r24, 0x18	; 24
     bfc:	21 f0       	breq	.+8      	; 0xc06 <n64Update+0x44>
		// a failed read could mean the pack or controller was gone. Init
		// will be necessary next time we detect a pack is present.
		n64_rumble_state = RSTATE_INIT;
     bfe:	10 92 18 01 	sts	0x0118, r1
		return -1;
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	e0 c0       	rjmp	.+448    	; 0xdc6 <n64Update+0x204>
	}
	
	/* Detect when a pack becomes present and schedule initialisation when it happens. */
	if (gcn64_workbuf[OFFSET_EXT_PRESENT] && (n64_rumble_state == RSTATE_UNAVAILABLE)) {
     c06:	80 91 9b 01 	lds	r24, 0x019B
     c0a:	88 23       	and	r24, r24
     c0c:	31 f0       	breq	.+12     	; 0xc1a <n64Update+0x58>
     c0e:	80 91 18 01 	lds	r24, 0x0118
     c12:	85 30       	cpi	r24, 0x05	; 5
     c14:	11 f4       	brne	.+4      	; 0xc1a <n64Update+0x58>
		n64_rumble_state = RSTATE_INIT;	
     c16:	10 92 18 01 	sts	0x0118, r1
	}

	/* Detect when a pack is removed. */
	if (!gcn64_workbuf[OFFSET_EXT_PRESENT]) {
     c1a:	80 91 9b 01 	lds	r24, 0x019B
     c1e:	81 11       	cpse	r24, r1
     c20:	03 c0       	rjmp	.+6      	; 0xc28 <n64Update+0x66>
		n64_rumble_state = RSTATE_UNAVAILABLE;
     c22:	85 e0       	ldi	r24, 0x05	; 5
     c24:	80 93 18 01 	sts	0x0118, r24
			}
			break;
	}
	*/

	tmpdata[0] = N64_GET_STATUS;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	89 83       	std	Y+1, r24	; 0x01
	if (!isCont2)
     c2c:	11 11       	cpse	r17, r1
     c2e:	07 c0       	rjmp	.+14     	; 0xc3e <n64Update+0x7c>
	{
		count = gcn64_transaction(tmpdata, 1);
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <gcn64_transaction>
     c3c:	06 c0       	rjmp	.+12     	; 0xc4a <n64Update+0x88>
	}
	else
	{
		count = gcn64_transaction2(tmpdata, 1);
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	ce 01       	movw	r24, r28
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	0e 94 dd 04 	call	0x9ba	; 0x9ba <gcn64_transaction2>
	}
	if (count != N64_GET_STATUS_REPLY_LENGTH) {
     c4a:	80 32       	cpi	r24, 0x20	; 32
     c4c:	09 f0       	breq	.+2      	; 0xc50 <n64Update+0x8e>
     c4e:	b8 c0       	rjmp	.+368    	; 0xdc0 <n64Update+0x1fe>
	15	C Right
	16-23: analog X axis
	24-31: analog Y axis
 */

	tmpdata[0]=0;
     c50:	19 82       	std	Y+1, r1	; 0x01
	tmpdata[1]=0;
     c52:	1a 82       	std	Y+2, r1	; 0x02
	tmpdata[2]=0;
     c54:	1b 82       	std	Y+3, r1	; 0x03
	tmpdata[3]=0;
     c56:	1c 82       	std	Y+4, r1	; 0x04
     c58:	20 e0       	ldi	r18, 0x00	; 0

	for (i=0; i<4; i++) // A B Z START
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
		tmpdata[2] |= gcn64_workbuf[i] ? (0x01<<i) : 0;
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	41 e0       	ldi	r20, 0x01	; 1
     c62:	fc 01       	movw	r30, r24
     c64:	ec 57       	subi	r30, 0x7C	; 124
     c66:	fe 4f       	sbci	r31, 0xFE	; 254
     c68:	30 81       	ld	r19, Z
     c6a:	33 23       	and	r19, r19
     c6c:	39 f0       	breq	.+14     	; 0xc7c <n64Update+0xba>
     c6e:	34 2f       	mov	r19, r20
     c70:	08 2e       	mov	r0, r24
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <n64Update+0xb4>
     c74:	33 0f       	add	r19, r19
     c76:	0a 94       	dec	r0
     c78:	ea f7       	brpl	.-6      	; 0xc74 <n64Update+0xb2>
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <n64Update+0xbc>
     c7c:	35 2f       	mov	r19, r21
     c7e:	23 2b       	or	r18, r19
	tmpdata[0]=0;
	tmpdata[1]=0;
	tmpdata[2]=0;
	tmpdata[3]=0;

	for (i=0; i<4; i++) // A B Z START
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	84 30       	cpi	r24, 0x04	; 4
     c84:	91 05       	cpc	r25, r1
     c86:	69 f7       	brne	.-38     	; 0xc62 <n64Update+0xa0>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
		tmpdata[2] |= gcn64_workbuf[i] ? (0x01<<i) : 0;

	for (i=0; i<4; i++) // C-UP C-DOWN C-LEFT C-RIGHT
		tmpdata[2] |= gcn64_workbuf[i+12] ? (0x10<<i) : 0;
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	40 e1       	ldi	r20, 0x10	; 16
     c90:	fc 01       	movw	r30, r24
     c92:	e0 57       	subi	r30, 0x70	; 112
     c94:	fe 4f       	sbci	r31, 0xFE	; 254
     c96:	30 81       	ld	r19, Z
     c98:	33 23       	and	r19, r19
     c9a:	39 f0       	breq	.+14     	; 0xcaa <n64Update+0xe8>
     c9c:	34 2f       	mov	r19, r20
     c9e:	08 2e       	mov	r0, r24
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <n64Update+0xe2>
     ca2:	33 0f       	add	r19, r19
     ca4:	0a 94       	dec	r0
     ca6:	ea f7       	brpl	.-6      	; 0xca2 <n64Update+0xe0>
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <n64Update+0xea>
     caa:	35 2f       	mov	r19, r21
     cac:	23 2b       	or	r18, r19
	tmpdata[3]=0;

	for (i=0; i<4; i++) // A B Z START
		tmpdata[2] |= gcn64_workbuf[i] ? (0x01<<i) : 0;

	for (i=0; i<4; i++) // C-UP C-DOWN C-LEFT C-RIGHT
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	84 30       	cpi	r24, 0x04	; 4
     cb2:	91 05       	cpc	r25, r1
     cb4:	69 f7       	brne	.-38     	; 0xc90 <n64Update+0xce>
     cb6:	2b 83       	std	Y+3, r18	; 0x03
		tmpdata[2] |= gcn64_workbuf[i+12] ? (0x10<<i) : 0;
	
	for (i=0; i<2; i++) // L R
		tmpdata[3] |= gcn64_workbuf[i+10] ? (0x01<<i) : 0;
     cb8:	90 91 8e 01 	lds	r25, 0x018E
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	91 11       	cpse	r25, r1
     cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <n64Update+0x102>
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	9c 81       	ldd	r25, Y+4	; 0x04
     cc6:	89 2b       	or	r24, r25
     cc8:	90 91 8f 01 	lds	r25, 0x018F
     ccc:	99 23       	and	r25, r25
     cce:	11 f0       	breq	.+4      	; 0xcd4 <n64Update+0x112>
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <n64Update+0x114>
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	89 2b       	or	r24, r25
     cd8:	8c 83       	std	Y+4, r24	; 0x04
     cda:	29 81       	ldd	r18, Y+1	; 0x01
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0

	for (i=0; i<8; i++) // X axis
		tmpdata[0] |= gcn64_workbuf[i+16] ? (0x80>>i) : 0;
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	40 e8       	ldi	r20, 0x80	; 128
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	62 2f       	mov	r22, r18
     ce8:	fc 01       	movw	r30, r24
     cea:	ec 56       	subi	r30, 0x6C	; 108
     cec:	fe 4f       	sbci	r31, 0xFE	; 254
     cee:	20 81       	ld	r18, Z
     cf0:	22 23       	and	r18, r18
     cf2:	41 f0       	breq	.+16     	; 0xd04 <n64Update+0x142>
     cf4:	9a 01       	movw	r18, r20
     cf6:	08 2e       	mov	r0, r24
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <n64Update+0x13c>
     cfa:	35 95       	asr	r19
     cfc:	27 95       	ror	r18
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <n64Update+0x138>
     d02:	01 c0       	rjmp	.+2      	; 0xd06 <n64Update+0x144>
     d04:	27 2f       	mov	r18, r23
     d06:	26 2b       	or	r18, r22
		tmpdata[2] |= gcn64_workbuf[i+12] ? (0x10<<i) : 0;
	
	for (i=0; i<2; i++) // L R
		tmpdata[3] |= gcn64_workbuf[i+10] ? (0x01<<i) : 0;

	for (i=0; i<8; i++) // X axis
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	88 30       	cpi	r24, 0x08	; 8
     d0c:	91 05       	cpc	r25, r1
     d0e:	59 f7       	brne	.-42     	; 0xce6 <n64Update+0x124>
     d10:	29 83       	std	Y+1, r18	; 0x01
     d12:	2a 81       	ldd	r18, Y+2	; 0x02
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
		tmpdata[0] |= gcn64_workbuf[i+16] ? (0x80>>i) : 0;
	
	for (i=0; i<8; i++) // Y axis
		tmpdata[1] |= gcn64_workbuf[i+24] ? (0x80>>i) : 0;	
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	40 e8       	ldi	r20, 0x80	; 128
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	62 2f       	mov	r22, r18
     d20:	fc 01       	movw	r30, r24
     d22:	e4 56       	subi	r30, 0x64	; 100
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	20 81       	ld	r18, Z
     d28:	22 23       	and	r18, r18
     d2a:	41 f0       	breq	.+16     	; 0xd3c <n64Update+0x17a>
     d2c:	9a 01       	movw	r18, r20
     d2e:	08 2e       	mov	r0, r24
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <n64Update+0x174>
     d32:	35 95       	asr	r19
     d34:	27 95       	ror	r18
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <n64Update+0x170>
     d3a:	01 c0       	rjmp	.+2      	; 0xd3e <n64Update+0x17c>
     d3c:	27 2f       	mov	r18, r23
     d3e:	26 2b       	or	r18, r22
		tmpdata[3] |= gcn64_workbuf[i+10] ? (0x01<<i) : 0;

	for (i=0; i<8; i++) // X axis
		tmpdata[0] |= gcn64_workbuf[i+16] ? (0x80>>i) : 0;
	
	for (i=0; i<8; i++) // Y axis
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	88 30       	cpi	r24, 0x08	; 8
     d44:	91 05       	cpc	r25, r1
     d46:	59 f7       	brne	.-42     	; 0xd1e <n64Update+0x15c>
     d48:	2a 83       	std	Y+2, r18	; 0x02
		tmpdata[1] |= gcn64_workbuf[i+24] ? (0x80>>i) : 0;	

	// analog joystick
	last_built_report[0] = ((int)((signed char)tmpdata[0]))+127;
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	81 58       	subi	r24, 0x81	; 129
     d4e:	80 93 42 01 	sts	0x0142, r24
	last_built_report[1] = ((int)( -((signed char)tmpdata[1])) )+127;
     d52:	8f e7       	ldi	r24, 0x7F	; 127
     d54:	98 2f       	mov	r25, r24
     d56:	92 1b       	sub	r25, r18
     d58:	90 93 43 01 	sts	0x0143, r25

	last_built_report[2] = 0x7f;
     d5c:	80 93 44 01 	sts	0x0144, r24
	last_built_report[3] = 0x7f;
     d60:	80 93 45 01 	sts	0x0145, r24
	last_built_report[4] = 0x7f;
     d64:	80 93 46 01 	sts	0x0146, r24
	last_built_report[5] = 0x7f;
     d68:	80 93 47 01 	sts	0x0147, r24

	// buttons
	last_built_report[6] = tmpdata[2];
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	80 93 48 01 	sts	0x0148, r24
	last_built_report[7] = tmpdata[3];
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	80 93 49 01 	sts	0x0149, r24
	

	// dpad as buttons
	if (gcn64_workbuf[4]) 
     d78:	90 91 88 01 	lds	r25, 0x0188
     d7c:	99 23       	and	r25, r25
     d7e:	19 f0       	breq	.+6      	; 0xd86 <n64Update+0x1c4>
		last_built_report[7] |= 0x04;
     d80:	84 60       	ori	r24, 0x04	; 4
     d82:	80 93 49 01 	sts	0x0149, r24
	if (gcn64_workbuf[5])
     d86:	80 91 89 01 	lds	r24, 0x0189
     d8a:	88 23       	and	r24, r24
     d8c:	29 f0       	breq	.+10     	; 0xd98 <n64Update+0x1d6>
		last_built_report[7] |= 0x08;
     d8e:	e9 e4       	ldi	r30, 0x49	; 73
     d90:	f1 e0       	ldi	r31, 0x01	; 1
     d92:	80 81       	ld	r24, Z
     d94:	88 60       	ori	r24, 0x08	; 8
     d96:	80 83       	st	Z, r24
	if (gcn64_workbuf[6])
     d98:	80 91 8a 01 	lds	r24, 0x018A
     d9c:	88 23       	and	r24, r24
     d9e:	29 f0       	breq	.+10     	; 0xdaa <n64Update+0x1e8>
		last_built_report[7] |= 0x10;
     da0:	e9 e4       	ldi	r30, 0x49	; 73
     da2:	f1 e0       	ldi	r31, 0x01	; 1
     da4:	80 81       	ld	r24, Z
     da6:	80 61       	ori	r24, 0x10	; 16
     da8:	80 83       	st	Z, r24
	if (gcn64_workbuf[7])
     daa:	80 91 8b 01 	lds	r24, 0x018B
     dae:	88 23       	and	r24, r24
     db0:	49 f0       	breq	.+18     	; 0xdc4 <n64Update+0x202>
		last_built_report[7] |= 0x20;
     db2:	e9 e4       	ldi	r30, 0x49	; 73
     db4:	f1 e0       	ldi	r31, 0x01	; 1
     db6:	80 81       	ld	r24, Z
     db8:	80 62       	ori	r24, 0x20	; 32
     dba:	80 83       	st	Z, r24

	return 0;
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	03 c0       	rjmp	.+6      	; 0xdc6 <n64Update+0x204>
	else
	{
		count = gcn64_transaction2(tmpdata, 1);
	}
	if (count != N64_GET_STATUS_REPLY_LENGTH) {
		return -1;
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <n64Update+0x204>
	if (gcn64_workbuf[6])
		last_built_report[7] |= 0x10;
	if (gcn64_workbuf[7])
		last_built_report[7] |= 0x20;

	return 0;
     dc4:	80 e0       	ldi	r24, 0x00	; 0
}
     dc6:	a6 96       	adiw	r28, 0x26	; 38
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	08 95       	ret

00000dda <n64Init>:
static unsigned char last_sent_report[GCN64_REPORT_SIZE];


static void n64Init(boolean isCont2)
{
	n64Update(isCont2);
     dda:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <n64Update>
     dde:	08 95       	ret

00000de0 <n64Probe>:

	return 0;
}

static char n64Probe(boolean isCont2)
{
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	1f 92       	push	r1
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	08 2f       	mov	r16, r24
	 *
	 * Bit 0 tells us if there is something connected to the expansion port.
	 * Bit 1 tells is if there was something connected that has been removed.
	 */

	n64_rumble_state = RSTATE_UNAVAILABLE;
     df0:	85 e0       	ldi	r24, 0x05	; 5
     df2:	80 93 18 01 	sts	0x0118, r24
     df6:	1f e0       	ldi	r17, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     df8:	2f ef       	ldi	r18, 0xFF	; 255
     dfa:	86 e7       	ldi	r24, 0x76	; 118
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	21 50       	subi	r18, 0x01	; 1
     e00:	80 40       	sbci	r24, 0x00	; 0
     e02:	90 40       	sbci	r25, 0x00	; 0
     e04:	e1 f7       	brne	.-8      	; 0xdfe <n64Probe+0x1e>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <n64Probe+0x28>
     e08:	00 00       	nop
	for (i=0; i<15; i++)
	{
		//usbPoll(); // must be called at each 50ms or less
		_delay_ms(30);
		
		tmp = N64_GET_CAPABILITIES;
     e0a:	19 82       	std	Y+1, r1	; 0x01
		
		if (!isCont2)
     e0c:	01 11       	cpse	r16, r1
     e0e:	07 c0       	rjmp	.+14     	; 0xe1e <n64Probe+0x3e>
		{
			count = gcn64_transaction(&tmp, 1);
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	ce 01       	movw	r24, r28
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <gcn64_transaction>
     e1c:	06 c0       	rjmp	.+12     	; 0xe2a <n64Probe+0x4a>
		}
		else
		{
			count = gcn64_transaction2(&tmp, 1);
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	ce 01       	movw	r24, r28
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	0e 94 dd 04 	call	0x9ba	; 0x9ba <gcn64_transaction2>
		}

		if (count == N64_CAPS_REPLY_LENGTH) {
     e2a:	48 97       	sbiw	r24, 0x18	; 24
     e2c:	19 f0       	breq	.+6      	; 0xe34 <n64Probe+0x54>
     e2e:	11 50       	subi	r17, 0x01	; 1
	 * Bit 1 tells is if there was something connected that has been removed.
	 */

	n64_rumble_state = RSTATE_UNAVAILABLE;

	for (i=0; i<15; i++)
     e30:	19 f7       	brne	.-58     	; 0xdf8 <n64Probe+0x18>
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <n64Probe+0x56>
		{
			count = gcn64_transaction2(&tmp, 1);
		}

		if (count == N64_CAPS_REPLY_LENGTH) {
			return 1;
     e34:	11 e0       	ldi	r17, 0x01	; 1
		}
	}
	return 0;
}
     e36:	81 2f       	mov	r24, r17
     e38:	0f 90       	pop	r0
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	08 95       	ret

00000e44 <n64Changed>:


static char n64Changed(int id)
{
	return memcmp(last_built_report, last_sent_report, GCN64_REPORT_SIZE);
     e44:	48 e0       	ldi	r20, 0x08	; 8
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	6a e3       	ldi	r22, 0x3A	; 58
     e4a:	71 e0       	ldi	r23, 0x01	; 1
     e4c:	82 e4       	ldi	r24, 0x42	; 66
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <memcmp>
}
     e54:	08 95       	ret

00000e56 <n64GetGamepad>:
};

GCpad *n64GetGamepad()
{
	return &N64Gamepad;
}
     e56:	8c e0       	ldi	r24, 0x0C	; 12
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	08 95       	ret

00000e5c <_Z12hardwareInitv>:
	sei();
}

void hardwareInit()
{
	DDRC = 0x00;
     e5c:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xff;
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	88 b9       	out	0x08, r24	; 8
	DDRF = 0x00;
     e62:	10 ba       	out	0x10, r1	; 16
	PORTF = 0xff;
     e64:	81 bb       	out	0x11, r24	; 17
     e66:	08 95       	ret

00000e68 <_Z17detectControllersv>:
	
}

void detectControllers()
{
	if (curGamepad == NULL)
     e68:	80 91 6c 01 	lds	r24, 0x016C
     e6c:	90 91 6d 01 	lds	r25, 0x016D
     e70:	89 2b       	or	r24, r25
     e72:	59 f5       	brne	.+86     	; 0xeca <_Z17detectControllersv+0x62>
	{
		int gcncont = gcn64_detectController();
     e74:	0e 94 9e 04 	call	0x93c	; 0x93c <gcn64_detectController>
		switch(gcncont)
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	91 05       	cpc	r25, r1
     e7c:	19 f0       	breq	.+6      	; 0xe84 <_Z17detectControllersv+0x1c>
     e7e:	02 97       	sbiw	r24, 0x02	; 2
     e80:	99 f0       	breq	.+38     	; 0xea8 <_Z17detectControllersv+0x40>
     e82:	23 c0       	rjmp	.+70     	; 0xeca <_Z17detectControllersv+0x62>
		{
			case CONTROLLER_IS_N64:
			curGamepad = n64GetGamepad();
     e84:	0e 94 2b 07 	call	0xe56	; 0xe56 <n64GetGamepad>
     e88:	90 93 6d 01 	sts	0x016D, r25
     e8c:	80 93 6c 01 	sts	0x016C, r24
			curGamepad->init(false);
     e90:	dc 01       	movw	r26, r24
     e92:	12 96       	adiw	r26, 0x02	; 2
     e94:	ed 91       	ld	r30, X+
     e96:	fc 91       	ld	r31, X
     e98:	13 97       	sbiw	r26, 0x03	; 3
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	09 95       	icall
			error_count = 0;
     e9e:	10 92 4f 01 	sts	0x014F, r1
     ea2:	10 92 4e 01 	sts	0x014E, r1
			break;
     ea6:	11 c0       	rjmp	.+34     	; 0xeca <_Z17detectControllersv+0x62>

			case CONTROLLER_IS_GC:
			curGamepad = gamecubeGetGamepad();
     ea8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <gamecubeGetGamepad>
     eac:	90 93 6d 01 	sts	0x016D, r25
     eb0:	80 93 6c 01 	sts	0x016C, r24
			curGamepad->init(false);
     eb4:	dc 01       	movw	r26, r24
     eb6:	12 96       	adiw	r26, 0x02	; 2
     eb8:	ed 91       	ld	r30, X+
     eba:	fc 91       	ld	r31, X
     ebc:	13 97       	sbiw	r26, 0x03	; 3
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	09 95       	icall
			error_count = 0;
     ec2:	10 92 4f 01 	sts	0x014F, r1
     ec6:	10 92 4e 01 	sts	0x014E, r1
			break;

		}
	}
	if (enable2ndController)
     eca:	80 91 4a 01 	lds	r24, 0x014A
     ece:	90 91 4b 01 	lds	r25, 0x014B
     ed2:	89 2b       	or	r24, r25
     ed4:	89 f1       	breq	.+98     	; 0xf38 <_Z17detectControllersv+0xd0>
	{
		if (curGamepad2 == NULL)
     ed6:	80 91 6a 01 	lds	r24, 0x016A
     eda:	90 91 6b 01 	lds	r25, 0x016B
     ede:	89 2b       	or	r24, r25
     ee0:	59 f5       	brne	.+86     	; 0xf38 <_Z17detectControllersv+0xd0>
		{
			int gcncont = gcn64_detectController2();
     ee2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <gcn64_detectController2>
			switch(gcncont)
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	19 f0       	breq	.+6      	; 0xef2 <_Z17detectControllersv+0x8a>
     eec:	02 97       	sbiw	r24, 0x02	; 2
     eee:	99 f0       	breq	.+38     	; 0xf16 <_Z17detectControllersv+0xae>
     ef0:	08 95       	ret
			{
				case CONTROLLER_IS_N64:
				curGamepad2 = n64GetGamepad();
     ef2:	0e 94 2b 07 	call	0xe56	; 0xe56 <n64GetGamepad>
     ef6:	90 93 6b 01 	sts	0x016B, r25
     efa:	80 93 6a 01 	sts	0x016A, r24
				curGamepad2->init(true);
     efe:	dc 01       	movw	r26, r24
     f00:	12 96       	adiw	r26, 0x02	; 2
     f02:	ed 91       	ld	r30, X+
     f04:	fc 91       	ld	r31, X
     f06:	13 97       	sbiw	r26, 0x03	; 3
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	09 95       	icall
				error_count2 = 0;
     f0c:	10 92 4d 01 	sts	0x014D, r1
     f10:	10 92 4c 01 	sts	0x014C, r1
				break;
     f14:	08 95       	ret

				case CONTROLLER_IS_GC:
				curGamepad2 = gamecubeGetGamepad();
     f16:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <gamecubeGetGamepad>
     f1a:	90 93 6b 01 	sts	0x016B, r25
     f1e:	80 93 6a 01 	sts	0x016A, r24
				curGamepad2->init(true);
     f22:	dc 01       	movw	r26, r24
     f24:	12 96       	adiw	r26, 0x02	; 2
     f26:	ed 91       	ld	r30, X+
     f28:	fc 91       	ld	r31, X
     f2a:	13 97       	sbiw	r26, 0x03	; 3
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	09 95       	icall
				error_count2 = 0;
     f30:	10 92 4d 01 	sts	0x014D, r1
     f34:	10 92 4c 01 	sts	0x014C, r1
     f38:	08 95       	ret

00000f3a <_Z23checkForNullControllersv>:
	}
}

void checkForNullControllers()
{
	if (error_count > 30)
     f3a:	80 91 4e 01 	lds	r24, 0x014E
     f3e:	90 91 4f 01 	lds	r25, 0x014F
     f42:	4f 97       	sbiw	r24, 0x1f	; 31
     f44:	24 f0       	brlt	.+8      	; 0xf4e <_Z23checkForNullControllersv+0x14>
	{
		curGamepad = NULL;
     f46:	10 92 6d 01 	sts	0x016D, r1
     f4a:	10 92 6c 01 	sts	0x016C, r1
	}
	if (error_count2 > 30)
     f4e:	80 91 4c 01 	lds	r24, 0x014C
     f52:	90 91 4d 01 	lds	r25, 0x014D
     f56:	4f 97       	sbiw	r24, 0x1f	; 31
     f58:	24 f0       	brlt	.+8      	; 0xf62 <_Z23checkForNullControllersv+0x28>
	{
		curGamepad2 = NULL;
     f5a:	10 92 6b 01 	sts	0x016B, r1
     f5e:	10 92 6a 01 	sts	0x016A, r1
     f62:	08 95       	ret

00000f64 <_Z17updateControllersv>:
	}
}

void updateControllers()
{
     f64:	4f 92       	push	r4
     f66:	5f 92       	push	r5
     f68:	6f 92       	push	r6
     f6a:	7f 92       	push	r7
     f6c:	8f 92       	push	r8
     f6e:	9f 92       	push	r9
     f70:	af 92       	push	r10
     f72:	bf 92       	push	r11
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	64 97       	sbiw	r28, 0x14	; 20
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
	if (curGamepad != NULL)
     f94:	e0 91 6c 01 	lds	r30, 0x016C
     f98:	f0 91 6d 01 	lds	r31, 0x016D
     f9c:	30 97       	sbiw	r30, 0x00	; 0
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <_Z17updateControllersv+0x3e>
     fa0:	8f c1       	rjmp	.+798    	; 0x12c0 <_Z17updateControllersv+0x35c>
	{
		if (curGamepad->update(false)) {
     fa2:	04 80       	ldd	r0, Z+4	; 0x04
     fa4:	f5 81       	ldd	r31, Z+5	; 0x05
     fa6:	e0 2d       	mov	r30, r0
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	09 95       	icall
     fac:	88 23       	and	r24, r24
     fae:	51 f0       	breq	.+20     	; 0xfc4 <_Z17updateControllersv+0x60>
			error_count++;
     fb0:	80 91 4e 01 	lds	r24, 0x014E
     fb4:	90 91 4f 01 	lds	r25, 0x014F
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	90 93 4f 01 	sts	0x014F, r25
     fbe:	80 93 4e 01 	sts	0x014E, r24
     fc2:	04 c0       	rjmp	.+8      	; 0xfcc <_Z17updateControllersv+0x68>
			} else {
			error_count = 0;
     fc4:	10 92 4f 01 	sts	0x014F, r1
     fc8:	10 92 4e 01 	sts	0x014E, r1
		}
		if (curGamepad->gamepad == 1)
     fcc:	e0 91 6c 01 	lds	r30, 0x016C
     fd0:	f0 91 6d 01 	lds	r31, 0x016D
     fd4:	80 81       	ld	r24, Z
     fd6:	91 81       	ldd	r25, Z+1	; 0x01
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	09 f0       	breq	.+2      	; 0xfde <_Z17updateControllersv+0x7a>
     fdc:	1c c1       	rjmp	.+568    	; 0x1216 <_Z17updateControllersv+0x2b2>
static void sendGamecube(bool cont2)
{
	if (!cont2)
	{
		unsigned char padData[8];
		curGamepad->buildReport(padData, 1);
     fde:	00 84       	ldd	r0, Z+8	; 0x08
     fe0:	f1 85       	ldd	r31, Z+9	; 0x09
     fe2:	e0 2d       	mov	r30, r0
     fe4:	61 e0       	ldi	r22, 0x01	; 1
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	ce 01       	movw	r24, r28
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	09 95       	icall
		
		int x = map(constrain(padData[0], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);
     fee:	29 81       	ldd	r18, Y+1	; 0x01
     ff0:	2b 31       	cpi	r18, 0x1B	; 27
     ff2:	38 f0       	brcs	.+14     	; 0x1002 <_Z17updateControllersv+0x9e>
     ff4:	24 3e       	cpi	r18, 0xE4	; 228
     ff6:	50 f4       	brcc	.+20     	; 0x100c <_Z17updateControllersv+0xa8>
     ff8:	82 2f       	mov	r24, r18
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	a0 e0       	ldi	r26, 0x00	; 0
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	09 c0       	rjmp	.+18     	; 0x1014 <_Z17updateControllersv+0xb0>
    1002:	8b e1       	ldi	r24, 0x1B	; 27
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	a0 e0       	ldi	r26, 0x00	; 0
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <_Z17updateControllersv+0xb0>
    100c:	83 ee       	ldi	r24, 0xE3	; 227
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	a0 e0       	ldi	r26, 0x00	; 0
    1012:	b0 e0       	ldi	r27, 0x00	; 0

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1014:	9c 01       	movw	r18, r24
    1016:	ad 01       	movw	r20, r26
    1018:	2b 51       	subi	r18, 0x1B	; 27
    101a:	31 09       	sbc	r19, r1
    101c:	41 09       	sbc	r20, r1
    101e:	51 09       	sbc	r21, r1
    1020:	af ef       	ldi	r26, 0xFF	; 255
    1022:	b3 e0       	ldi	r27, 0x03	; 3
    1024:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__muluhisi3>
    1028:	28 ec       	ldi	r18, 0xC8	; 200
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
    1034:	29 87       	std	Y+9, r18	; 0x09
    1036:	3a 87       	std	Y+10, r19	; 0x0a
    1038:	4b 87       	std	Y+11, r20	; 0x0b
    103a:	5c 87       	std	Y+12, r21	; 0x0c
		unsigned char padData[8];
		curGamepad->buildReport(padData, 1);
		
		int x = map(constrain(padData[0], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);

		int y = map(constrain(padData[1], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);
    103c:	2a 81       	ldd	r18, Y+2	; 0x02
    103e:	2b 31       	cpi	r18, 0x1B	; 27
    1040:	38 f0       	brcs	.+14     	; 0x1050 <_Z17updateControllersv+0xec>
    1042:	24 3e       	cpi	r18, 0xE4	; 228
    1044:	50 f4       	brcc	.+20     	; 0x105a <_Z17updateControllersv+0xf6>
    1046:	82 2f       	mov	r24, r18
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	a0 e0       	ldi	r26, 0x00	; 0
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	09 c0       	rjmp	.+18     	; 0x1062 <_Z17updateControllersv+0xfe>
    1050:	8b e1       	ldi	r24, 0x1B	; 27
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	04 c0       	rjmp	.+8      	; 0x1062 <_Z17updateControllersv+0xfe>
    105a:	83 ee       	ldi	r24, 0xE3	; 227
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	a0 e0       	ldi	r26, 0x00	; 0
    1060:	b0 e0       	ldi	r27, 0x00	; 0

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1062:	9c 01       	movw	r18, r24
    1064:	ad 01       	movw	r20, r26
    1066:	2b 51       	subi	r18, 0x1B	; 27
    1068:	31 09       	sbc	r19, r1
    106a:	41 09       	sbc	r20, r1
    106c:	51 09       	sbc	r21, r1
    106e:	af ef       	ldi	r26, 0xFF	; 255
    1070:	b3 e0       	ldi	r27, 0x03	; 3
    1072:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__muluhisi3>
    1076:	28 ec       	ldi	r18, 0xC8	; 200
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
    1082:	2d 87       	std	Y+13, r18	; 0x0d
    1084:	3e 87       	std	Y+14, r19	; 0x0e
    1086:	4f 87       	std	Y+15, r20	; 0x0f
    1088:	58 8b       	std	Y+16, r21	; 0x10
		curGamepad->buildReport(padData, 1);
		
		int x = map(constrain(padData[0], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);

		int y = map(constrain(padData[1], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);
		int cx = map(constrain(padData[2],127 - RIGHT_DIFF, 127 + RIGHT_DIFF),127 - RIGHT_DIFF, 127 + RIGHT_DIFF, 0, 1023);
    108a:	2b 81       	ldd	r18, Y+3	; 0x03
    108c:	25 32       	cpi	r18, 0x25	; 37
    108e:	38 f0       	brcs	.+14     	; 0x109e <_Z17updateControllersv+0x13a>
    1090:	2a 3d       	cpi	r18, 0xDA	; 218
    1092:	50 f4       	brcc	.+20     	; 0x10a8 <_Z17updateControllersv+0x144>
    1094:	82 2f       	mov	r24, r18
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a0 e0       	ldi	r26, 0x00	; 0
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	09 c0       	rjmp	.+18     	; 0x10b0 <_Z17updateControllersv+0x14c>
    109e:	85 e2       	ldi	r24, 0x25	; 37
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	a0 e0       	ldi	r26, 0x00	; 0
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <_Z17updateControllersv+0x14c>
    10a8:	89 ed       	ldi	r24, 0xD9	; 217
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	a0 e0       	ldi	r26, 0x00	; 0
    10ae:	b0 e0       	ldi	r27, 0x00	; 0

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    10b0:	9c 01       	movw	r18, r24
    10b2:	ad 01       	movw	r20, r26
    10b4:	25 52       	subi	r18, 0x25	; 37
    10b6:	31 09       	sbc	r19, r1
    10b8:	41 09       	sbc	r20, r1
    10ba:	51 09       	sbc	r21, r1
    10bc:	af ef       	ldi	r26, 0xFF	; 255
    10be:	b3 e0       	ldi	r27, 0x03	; 3
    10c0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__muluhisi3>
    10c4:	24 eb       	ldi	r18, 0xB4	; 180
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e0       	ldi	r20, 0x00	; 0
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
    10d0:	49 01       	movw	r8, r18
    10d2:	5a 01       	movw	r10, r20
		
		int x = map(constrain(padData[0], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);

		int y = map(constrain(padData[1], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);
		int cx = map(constrain(padData[2],127 - RIGHT_DIFF, 127 + RIGHT_DIFF),127 - RIGHT_DIFF, 127 + RIGHT_DIFF, 0, 1023);
		int cy = map(constrain(padData[3],127 - RIGHT_DIFF, 127 + RIGHT_DIFF),127 - RIGHT_DIFF, 127 + RIGHT_DIFF, 0, 1023);
    10d4:	2c 81       	ldd	r18, Y+4	; 0x04
    10d6:	25 32       	cpi	r18, 0x25	; 37
    10d8:	38 f0       	brcs	.+14     	; 0x10e8 <_Z17updateControllersv+0x184>
    10da:	2a 3d       	cpi	r18, 0xDA	; 218
    10dc:	50 f4       	brcc	.+20     	; 0x10f2 <_Z17updateControllersv+0x18e>
    10de:	82 2f       	mov	r24, r18
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	a0 e0       	ldi	r26, 0x00	; 0
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <_Z17updateControllersv+0x196>
    10e8:	85 e2       	ldi	r24, 0x25	; 37
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a0 e0       	ldi	r26, 0x00	; 0
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	04 c0       	rjmp	.+8      	; 0x10fa <_Z17updateControllersv+0x196>
    10f2:	89 ed       	ldi	r24, 0xD9	; 217
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	a0 e0       	ldi	r26, 0x00	; 0
    10f8:	b0 e0       	ldi	r27, 0x00	; 0

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    10fa:	9c 01       	movw	r18, r24
    10fc:	ad 01       	movw	r20, r26
    10fe:	25 52       	subi	r18, 0x25	; 37
    1100:	31 09       	sbc	r19, r1
    1102:	41 09       	sbc	r20, r1
    1104:	51 09       	sbc	r21, r1
    1106:	af ef       	ldi	r26, 0xFF	; 255
    1108:	b3 e0       	ldi	r27, 0x03	; 3
    110a:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__muluhisi3>
    110e:	24 eb       	ldi	r18, 0xB4	; 180
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	50 e0       	ldi	r21, 0x00	; 0
    1116:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
    111a:	29 01       	movw	r4, r18
    111c:	3a 01       	movw	r6, r20
		int x = map(constrain(padData[0], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);

		int y = map(constrain(padData[1], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);
		int cx = map(constrain(padData[2],127 - RIGHT_DIFF, 127 + RIGHT_DIFF),127 - RIGHT_DIFF, 127 + RIGHT_DIFF, 0, 1023);
		int cy = map(constrain(padData[3],127 - RIGHT_DIFF, 127 + RIGHT_DIFF),127 - RIGHT_DIFF, 127 + RIGHT_DIFF, 0, 1023);
		int lt = map(constrain(padData[4], 245 - SLIDER_DIFF, 245), 245 - SLIDER_DIFF, 245, 0, 1023);
    111e:	2d 81       	ldd	r18, Y+5	; 0x05
    1120:	26 34       	cpi	r18, 0x46	; 70
    1122:	38 f0       	brcs	.+14     	; 0x1132 <_Z17updateControllersv+0x1ce>
    1124:	26 3f       	cpi	r18, 0xF6	; 246
    1126:	50 f4       	brcc	.+20     	; 0x113c <_Z17updateControllersv+0x1d8>
    1128:	82 2f       	mov	r24, r18
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	a0 e0       	ldi	r26, 0x00	; 0
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	09 c0       	rjmp	.+18     	; 0x1144 <_Z17updateControllersv+0x1e0>
    1132:	86 e4       	ldi	r24, 0x46	; 70
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a0 e0       	ldi	r26, 0x00	; 0
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	04 c0       	rjmp	.+8      	; 0x1144 <_Z17updateControllersv+0x1e0>
    113c:	85 ef       	ldi	r24, 0xF5	; 245
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a0 e0       	ldi	r26, 0x00	; 0
    1142:	b0 e0       	ldi	r27, 0x00	; 0

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1144:	9c 01       	movw	r18, r24
    1146:	ad 01       	movw	r20, r26
    1148:	26 54       	subi	r18, 0x46	; 70
    114a:	31 09       	sbc	r19, r1
    114c:	41 09       	sbc	r20, r1
    114e:	51 09       	sbc	r21, r1
    1150:	af ef       	ldi	r26, 0xFF	; 255
    1152:	b3 e0       	ldi	r27, 0x03	; 3
    1154:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__muluhisi3>
    1158:	2f ea       	ldi	r18, 0xAF	; 175
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
    1164:	29 8b       	std	Y+17, r18	; 0x11
    1166:	3a 8b       	std	Y+18, r19	; 0x12
    1168:	4b 8b       	std	Y+19, r20	; 0x13
    116a:	5c 8b       	std	Y+20, r21	; 0x14

		int y = map(constrain(padData[1], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);
		int cx = map(constrain(padData[2],127 - RIGHT_DIFF, 127 + RIGHT_DIFF),127 - RIGHT_DIFF, 127 + RIGHT_DIFF, 0, 1023);
		int cy = map(constrain(padData[3],127 - RIGHT_DIFF, 127 + RIGHT_DIFF),127 - RIGHT_DIFF, 127 + RIGHT_DIFF, 0, 1023);
		int lt = map(constrain(padData[4], 245 - SLIDER_DIFF, 245), 245 - SLIDER_DIFF, 245, 0, 1023);
		int rt = map(constrain(padData[5], 245 - SLIDER_DIFF, 245), 245 - SLIDER_DIFF, 245, 0, 1023);
    116c:	8e 81       	ldd	r24, Y+6	; 0x06
    116e:	86 34       	cpi	r24, 0x46	; 70
    1170:	38 f0       	brcs	.+14     	; 0x1180 <_Z17updateControllersv+0x21c>
    1172:	86 3f       	cpi	r24, 0xF6	; 246
    1174:	68 f4       	brcc	.+26     	; 0x1190 <_Z17updateControllersv+0x22c>
    1176:	c8 2e       	mov	r12, r24
    1178:	d1 2c       	mov	r13, r1
    117a:	e1 2c       	mov	r14, r1
    117c:	f1 2c       	mov	r15, r1
    117e:	0f c0       	rjmp	.+30     	; 0x119e <_Z17updateControllersv+0x23a>
    1180:	0f 2e       	mov	r0, r31
    1182:	f6 e4       	ldi	r31, 0x46	; 70
    1184:	cf 2e       	mov	r12, r31
    1186:	d1 2c       	mov	r13, r1
    1188:	e1 2c       	mov	r14, r1
    118a:	f1 2c       	mov	r15, r1
    118c:	f0 2d       	mov	r31, r0
    118e:	07 c0       	rjmp	.+14     	; 0x119e <_Z17updateControllersv+0x23a>
    1190:	0f 2e       	mov	r0, r31
    1192:	f5 ef       	ldi	r31, 0xF5	; 245
    1194:	cf 2e       	mov	r12, r31
    1196:	d1 2c       	mov	r13, r1
    1198:	e1 2c       	mov	r14, r1
    119a:	f1 2c       	mov	r15, r1
    119c:	f0 2d       	mov	r31, r0
		
		uint32_t buttons = padData[7];
    119e:	48 85       	ldd	r20, Y+8	; 0x08
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	70 e0       	ldi	r23, 0x00	; 0
		buttons <<= 8;
    11a6:	76 2f       	mov	r23, r22
    11a8:	65 2f       	mov	r22, r21
    11aa:	54 2f       	mov	r21, r20
    11ac:	44 27       	eor	r20, r20
		buttons |= padData[6];
    11ae:	8f 81       	ldd	r24, Y+7	; 0x07
    11b0:	48 2b       	or	r20, r24
		gPad1.setButtons(buttons);
    11b2:	8d e5       	ldi	r24, 0x5D	; 93
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN8Gamepad_10setButtonsEm>

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    11ba:	a7 01       	movw	r20, r14
    11bc:	96 01       	movw	r18, r12
    11be:	26 54       	subi	r18, 0x46	; 70
    11c0:	31 09       	sbc	r19, r1
    11c2:	41 09       	sbc	r20, r1
    11c4:	51 09       	sbc	r21, r1
    11c6:	af ef       	ldi	r26, 0xFF	; 255
    11c8:	b3 e0       	ldi	r27, 0x03	; 3
    11ca:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__muluhisi3>
    11ce:	2f ea       	ldi	r18, 0xAF	; 175
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e0       	ldi	r20, 0x00	; 0
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
		
		uint32_t buttons = padData[7];
		buttons <<= 8;
		buttons |= padData[6];
		gPad1.setButtons(buttons);
		gPad1.setAxes(Gamepad.packAxisPacket(x, y, cx,cy,lt,rt));
    11da:	69 01       	movw	r12, r18
    11dc:	e9 88       	ldd	r14, Y+17	; 0x11
    11de:	fa 88       	ldd	r15, Y+18	; 0x12
    11e0:	82 01       	movw	r16, r4
    11e2:	94 01       	movw	r18, r8
    11e4:	4d 85       	ldd	r20, Y+13	; 0x0d
    11e6:	5e 85       	ldd	r21, Y+14	; 0x0e
    11e8:	69 85       	ldd	r22, Y+9	; 0x09
    11ea:	7a 85       	ldd	r23, Y+10	; 0x0a
    11ec:	8e e6       	ldi	r24, 0x6E	; 110
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	0e 94 a9 0b 	call	0x1752	; 0x1752 <_ZN8Gamepad_14packAxisPacketEiiiiii>
    11f4:	02 2f       	mov	r16, r18
    11f6:	13 2f       	mov	r17, r19
    11f8:	24 2f       	mov	r18, r20
    11fa:	35 2f       	mov	r19, r21
    11fc:	46 2f       	mov	r20, r22
    11fe:	57 2f       	mov	r21, r23
    1200:	68 2f       	mov	r22, r24
    1202:	79 2f       	mov	r23, r25
    1204:	8d e5       	ldi	r24, 0x5D	; 93
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	0e 94 17 0c 	call	0x182e	; 0x182e <_ZN8Gamepad_7setAxesEy>
		gPad1.update();
    120c:	8d e5       	ldi	r24, 0x5D	; 93
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_ZN8Gamepad_6updateEv>
    1214:	61 c0       	rjmp	.+194    	; 0x12d8 <_Z17updateControllersv+0x374>
static void sendN64(bool cont2)
{
	if (!cont2)
	{
		unsigned char padData[8];
		curGamepad->buildReport(padData, 1);
    1216:	00 84       	ldd	r0, Z+8	; 0x08
    1218:	f1 85       	ldd	r31, Z+9	; 0x09
    121a:	e0 2d       	mov	r30, r0
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	09 95       	icall
		int x = map(padData[0],0,255,0,1023);
    1226:	29 81       	ldd	r18, Y+1	; 0x01

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	af ef       	ldi	r26, 0xFF	; 255
    122c:	b3 e0       	ldi	r27, 0x03	; 3
    122e:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__umulhisi3>
    1232:	c1 2c       	mov	r12, r1
    1234:	d1 2c       	mov	r13, r1
    1236:	76 01       	movw	r14, r12
    1238:	ca 94       	dec	r12
    123a:	a7 01       	movw	r20, r14
    123c:	96 01       	movw	r18, r12
    123e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
    1242:	49 01       	movw	r8, r18
    1244:	5a 01       	movw	r10, r20
	if (!cont2)
	{
		unsigned char padData[8];
		curGamepad->buildReport(padData, 1);
		int x = map(padData[0],0,255,0,1023);
		int y = map(padData[1],0,255,0,1023);
    1246:	2a 81       	ldd	r18, Y+2	; 0x02

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	af ef       	ldi	r26, 0xFF	; 255
    124c:	b3 e0       	ldi	r27, 0x03	; 3
    124e:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__umulhisi3>
    1252:	a7 01       	movw	r20, r14
    1254:	96 01       	movw	r18, r12
    1256:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
    125a:	29 01       	movw	r4, r18
    125c:	3a 01       	movw	r6, r20
	{
		unsigned char padData[8];
		curGamepad->buildReport(padData, 1);
		int x = map(padData[0],0,255,0,1023);
		int y = map(padData[1],0,255,0,1023);
		uint32_t buttons = padData[7];
    125e:	48 85       	ldd	r20, Y+8	; 0x08
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	70 e0       	ldi	r23, 0x00	; 0
		buttons <<= 8;
    1266:	76 2f       	mov	r23, r22
    1268:	65 2f       	mov	r22, r21
    126a:	54 2f       	mov	r21, r20
    126c:	44 27       	eor	r20, r20
		buttons |= padData[6];
    126e:	8f 81       	ldd	r24, Y+7	; 0x07
    1270:	48 2b       	or	r20, r24
		gPad1.setButtons(buttons);
    1272:	8d e5       	ldi	r24, 0x5D	; 93
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN8Gamepad_10setButtonsEm>
		gPad1.setAxes(Gamepad.packAxisPacket(x, y, 512,512,512,512));
    127a:	c1 2c       	mov	r12, r1
    127c:	68 94       	set
    127e:	dd 24       	eor	r13, r13
    1280:	d1 f8       	bld	r13, 1
    1282:	e1 2c       	mov	r14, r1
    1284:	68 94       	set
    1286:	ff 24       	eor	r15, r15
    1288:	f1 f8       	bld	r15, 1
    128a:	00 e0       	ldi	r16, 0x00	; 0
    128c:	12 e0       	ldi	r17, 0x02	; 2
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	32 e0       	ldi	r19, 0x02	; 2
    1292:	a2 01       	movw	r20, r4
    1294:	b4 01       	movw	r22, r8
    1296:	8e e6       	ldi	r24, 0x6E	; 110
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <_ZN8Gamepad_14packAxisPacketEiiiiii>
    129e:	02 2f       	mov	r16, r18
    12a0:	13 2f       	mov	r17, r19
    12a2:	24 2f       	mov	r18, r20
    12a4:	35 2f       	mov	r19, r21
    12a6:	46 2f       	mov	r20, r22
    12a8:	57 2f       	mov	r21, r23
    12aa:	68 2f       	mov	r22, r24
    12ac:	79 2f       	mov	r23, r25
    12ae:	8d e5       	ldi	r24, 0x5D	; 93
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	0e 94 17 0c 	call	0x182e	; 0x182e <_ZN8Gamepad_7setAxesEy>
		gPad1.update();
    12b6:	8d e5       	ldi	r24, 0x5D	; 93
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_ZN8Gamepad_6updateEv>
    12be:	0c c0       	rjmp	.+24     	; 0x12d8 <_Z17updateControllersv+0x374>

static void sendBlank(bool cont2)
{
	if (!cont2)
	{
		gPad1.setAxesBlank();
    12c0:	8d e5       	ldi	r24, 0x5D	; 93
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	0e 94 3d 0c 	call	0x187a	; 0x187a <_ZN8Gamepad_12setAxesBlankEv>
		gPad1.setButtonsBlank();
    12c8:	8d e5       	ldi	r24, 0x5D	; 93
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN8Gamepad_15setButtonsBlankEv>
		gPad1.update();
    12d0:	8d e5       	ldi	r24, 0x5D	; 93
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_ZN8Gamepad_6updateEv>
	else
	{
		sendBlank(false);
	}
	
	if (curGamepad2 != NULL)
    12d8:	e0 91 6a 01 	lds	r30, 0x016A
    12dc:	f0 91 6b 01 	lds	r31, 0x016B
    12e0:	30 97       	sbiw	r30, 0x00	; 0
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <_Z17updateControllersv+0x382>
    12e4:	8f c1       	rjmp	.+798    	; 0x1604 <_Z17updateControllersv+0x6a0>
	{
		if (curGamepad2->update(true)) {
    12e6:	04 80       	ldd	r0, Z+4	; 0x04
    12e8:	f5 81       	ldd	r31, Z+5	; 0x05
    12ea:	e0 2d       	mov	r30, r0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	09 95       	icall
    12f0:	88 23       	and	r24, r24
    12f2:	51 f0       	breq	.+20     	; 0x1308 <_Z17updateControllersv+0x3a4>
			error_count2++;
    12f4:	80 91 4c 01 	lds	r24, 0x014C
    12f8:	90 91 4d 01 	lds	r25, 0x014D
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	90 93 4d 01 	sts	0x014D, r25
    1302:	80 93 4c 01 	sts	0x014C, r24
    1306:	04 c0       	rjmp	.+8      	; 0x1310 <_Z17updateControllersv+0x3ac>
			} else {
			error_count2 = 0;
    1308:	10 92 4d 01 	sts	0x014D, r1
    130c:	10 92 4c 01 	sts	0x014C, r1
		}
		if (curGamepad2->gamepad == 1)
    1310:	e0 91 6a 01 	lds	r30, 0x016A
    1314:	f0 91 6b 01 	lds	r31, 0x016B
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	09 f0       	breq	.+2      	; 0x1322 <_Z17updateControllersv+0x3be>
    1320:	1c c1       	rjmp	.+568    	; 0x155a <_Z17updateControllersv+0x5f6>
		gPad1.update();
	}
	else
	{
		unsigned char padData[8];
		curGamepad2->buildReport(padData, 1);
    1322:	00 84       	ldd	r0, Z+8	; 0x08
    1324:	f1 85       	ldd	r31, Z+9	; 0x09
    1326:	e0 2d       	mov	r30, r0
    1328:	61 e0       	ldi	r22, 0x01	; 1
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	ce 01       	movw	r24, r28
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	09 95       	icall
		
		int x = map(constrain(padData[0], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);
    1332:	29 81       	ldd	r18, Y+1	; 0x01
    1334:	2b 31       	cpi	r18, 0x1B	; 27
    1336:	38 f0       	brcs	.+14     	; 0x1346 <_Z17updateControllersv+0x3e2>
    1338:	24 3e       	cpi	r18, 0xE4	; 228
    133a:	50 f4       	brcc	.+20     	; 0x1350 <_Z17updateControllersv+0x3ec>
    133c:	82 2f       	mov	r24, r18
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	a0 e0       	ldi	r26, 0x00	; 0
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	09 c0       	rjmp	.+18     	; 0x1358 <_Z17updateControllersv+0x3f4>
    1346:	8b e1       	ldi	r24, 0x1B	; 27
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a0 e0       	ldi	r26, 0x00	; 0
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <_Z17updateControllersv+0x3f4>
    1350:	83 ee       	ldi	r24, 0xE3	; 227
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	a0 e0       	ldi	r26, 0x00	; 0
    1356:	b0 e0       	ldi	r27, 0x00	; 0

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1358:	9c 01       	movw	r18, r24
    135a:	ad 01       	movw	r20, r26
    135c:	2b 51       	subi	r18, 0x1B	; 27
    135e:	31 09       	sbc	r19, r1
    1360:	41 09       	sbc	r20, r1
    1362:	51 09       	sbc	r21, r1
    1364:	af ef       	ldi	r26, 0xFF	; 255
    1366:	b3 e0       	ldi	r27, 0x03	; 3
    1368:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__muluhisi3>
    136c:	28 ec       	ldi	r18, 0xC8	; 200
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
    1378:	29 87       	std	Y+9, r18	; 0x09
    137a:	3a 87       	std	Y+10, r19	; 0x0a
    137c:	4b 87       	std	Y+11, r20	; 0x0b
    137e:	5c 87       	std	Y+12, r21	; 0x0c
		unsigned char padData[8];
		curGamepad2->buildReport(padData, 1);
		
		int x = map(constrain(padData[0], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);

		int y = map(constrain(padData[1], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);
    1380:	2a 81       	ldd	r18, Y+2	; 0x02
    1382:	2b 31       	cpi	r18, 0x1B	; 27
    1384:	38 f0       	brcs	.+14     	; 0x1394 <_Z17updateControllersv+0x430>
    1386:	24 3e       	cpi	r18, 0xE4	; 228
    1388:	50 f4       	brcc	.+20     	; 0x139e <_Z17updateControllersv+0x43a>
    138a:	82 2f       	mov	r24, r18
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	a0 e0       	ldi	r26, 0x00	; 0
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	09 c0       	rjmp	.+18     	; 0x13a6 <_Z17updateControllersv+0x442>
    1394:	8b e1       	ldi	r24, 0x1B	; 27
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a0 e0       	ldi	r26, 0x00	; 0
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <_Z17updateControllersv+0x442>
    139e:	83 ee       	ldi	r24, 0xE3	; 227
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	a0 e0       	ldi	r26, 0x00	; 0
    13a4:	b0 e0       	ldi	r27, 0x00	; 0

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    13a6:	9c 01       	movw	r18, r24
    13a8:	ad 01       	movw	r20, r26
    13aa:	2b 51       	subi	r18, 0x1B	; 27
    13ac:	31 09       	sbc	r19, r1
    13ae:	41 09       	sbc	r20, r1
    13b0:	51 09       	sbc	r21, r1
    13b2:	af ef       	ldi	r26, 0xFF	; 255
    13b4:	b3 e0       	ldi	r27, 0x03	; 3
    13b6:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__muluhisi3>
    13ba:	28 ec       	ldi	r18, 0xC8	; 200
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
    13c6:	2d 87       	std	Y+13, r18	; 0x0d
    13c8:	3e 87       	std	Y+14, r19	; 0x0e
    13ca:	4f 87       	std	Y+15, r20	; 0x0f
    13cc:	58 8b       	std	Y+16, r21	; 0x10
		curGamepad2->buildReport(padData, 1);
		
		int x = map(constrain(padData[0], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);

		int y = map(constrain(padData[1], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);
		int cx = map(constrain(padData[2],127 - RIGHT_DIFF, 127 + RIGHT_DIFF),127 - RIGHT_DIFF, 127 + RIGHT_DIFF, 0, 1023);
    13ce:	2b 81       	ldd	r18, Y+3	; 0x03
    13d0:	25 32       	cpi	r18, 0x25	; 37
    13d2:	38 f0       	brcs	.+14     	; 0x13e2 <_Z17updateControllersv+0x47e>
    13d4:	2a 3d       	cpi	r18, 0xDA	; 218
    13d6:	50 f4       	brcc	.+20     	; 0x13ec <_Z17updateControllersv+0x488>
    13d8:	82 2f       	mov	r24, r18
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a0 e0       	ldi	r26, 0x00	; 0
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	09 c0       	rjmp	.+18     	; 0x13f4 <_Z17updateControllersv+0x490>
    13e2:	85 e2       	ldi	r24, 0x25	; 37
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	a0 e0       	ldi	r26, 0x00	; 0
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	04 c0       	rjmp	.+8      	; 0x13f4 <_Z17updateControllersv+0x490>
    13ec:	89 ed       	ldi	r24, 0xD9	; 217
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a0 e0       	ldi	r26, 0x00	; 0
    13f2:	b0 e0       	ldi	r27, 0x00	; 0

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    13f4:	9c 01       	movw	r18, r24
    13f6:	ad 01       	movw	r20, r26
    13f8:	25 52       	subi	r18, 0x25	; 37
    13fa:	31 09       	sbc	r19, r1
    13fc:	41 09       	sbc	r20, r1
    13fe:	51 09       	sbc	r21, r1
    1400:	af ef       	ldi	r26, 0xFF	; 255
    1402:	b3 e0       	ldi	r27, 0x03	; 3
    1404:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__muluhisi3>
    1408:	24 eb       	ldi	r18, 0xB4	; 180
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
    1414:	49 01       	movw	r8, r18
    1416:	5a 01       	movw	r10, r20
		
		int x = map(constrain(padData[0], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);

		int y = map(constrain(padData[1], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);
		int cx = map(constrain(padData[2],127 - RIGHT_DIFF, 127 + RIGHT_DIFF),127 - RIGHT_DIFF, 127 + RIGHT_DIFF, 0, 1023);
		int cy = map(constrain(padData[3],127 - RIGHT_DIFF, 127 + RIGHT_DIFF),127 - RIGHT_DIFF, 127 + RIGHT_DIFF, 0, 1023);
    1418:	2c 81       	ldd	r18, Y+4	; 0x04
    141a:	25 32       	cpi	r18, 0x25	; 37
    141c:	38 f0       	brcs	.+14     	; 0x142c <_Z17updateControllersv+0x4c8>
    141e:	2a 3d       	cpi	r18, 0xDA	; 218
    1420:	50 f4       	brcc	.+20     	; 0x1436 <_Z17updateControllersv+0x4d2>
    1422:	82 2f       	mov	r24, r18
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	09 c0       	rjmp	.+18     	; 0x143e <_Z17updateControllersv+0x4da>
    142c:	85 e2       	ldi	r24, 0x25	; 37
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	a0 e0       	ldi	r26, 0x00	; 0
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	04 c0       	rjmp	.+8      	; 0x143e <_Z17updateControllersv+0x4da>
    1436:	89 ed       	ldi	r24, 0xD9	; 217
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a0 e0       	ldi	r26, 0x00	; 0
    143c:	b0 e0       	ldi	r27, 0x00	; 0

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    143e:	9c 01       	movw	r18, r24
    1440:	ad 01       	movw	r20, r26
    1442:	25 52       	subi	r18, 0x25	; 37
    1444:	31 09       	sbc	r19, r1
    1446:	41 09       	sbc	r20, r1
    1448:	51 09       	sbc	r21, r1
    144a:	af ef       	ldi	r26, 0xFF	; 255
    144c:	b3 e0       	ldi	r27, 0x03	; 3
    144e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__muluhisi3>
    1452:	24 eb       	ldi	r18, 0xB4	; 180
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
    145e:	29 01       	movw	r4, r18
    1460:	3a 01       	movw	r6, r20
		int x = map(constrain(padData[0], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);

		int y = map(constrain(padData[1], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);
		int cx = map(constrain(padData[2],127 - RIGHT_DIFF, 127 + RIGHT_DIFF),127 - RIGHT_DIFF, 127 + RIGHT_DIFF, 0, 1023);
		int cy = map(constrain(padData[3],127 - RIGHT_DIFF, 127 + RIGHT_DIFF),127 - RIGHT_DIFF, 127 + RIGHT_DIFF, 0, 1023);
		int lt = map(constrain(padData[4], 245 - SLIDER_DIFF, 245), 245 - SLIDER_DIFF, 245, 0, 1023);
    1462:	2d 81       	ldd	r18, Y+5	; 0x05
    1464:	26 34       	cpi	r18, 0x46	; 70
    1466:	38 f0       	brcs	.+14     	; 0x1476 <_Z17updateControllersv+0x512>
    1468:	26 3f       	cpi	r18, 0xF6	; 246
    146a:	50 f4       	brcc	.+20     	; 0x1480 <_Z17updateControllersv+0x51c>
    146c:	82 2f       	mov	r24, r18
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a0 e0       	ldi	r26, 0x00	; 0
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	09 c0       	rjmp	.+18     	; 0x1488 <_Z17updateControllersv+0x524>
    1476:	86 e4       	ldi	r24, 0x46	; 70
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a0 e0       	ldi	r26, 0x00	; 0
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	04 c0       	rjmp	.+8      	; 0x1488 <_Z17updateControllersv+0x524>
    1480:	85 ef       	ldi	r24, 0xF5	; 245
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a0 e0       	ldi	r26, 0x00	; 0
    1486:	b0 e0       	ldi	r27, 0x00	; 0

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1488:	9c 01       	movw	r18, r24
    148a:	ad 01       	movw	r20, r26
    148c:	26 54       	subi	r18, 0x46	; 70
    148e:	31 09       	sbc	r19, r1
    1490:	41 09       	sbc	r20, r1
    1492:	51 09       	sbc	r21, r1
    1494:	af ef       	ldi	r26, 0xFF	; 255
    1496:	b3 e0       	ldi	r27, 0x03	; 3
    1498:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__muluhisi3>
    149c:	2f ea       	ldi	r18, 0xAF	; 175
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
    14a8:	29 8b       	std	Y+17, r18	; 0x11
    14aa:	3a 8b       	std	Y+18, r19	; 0x12
    14ac:	4b 8b       	std	Y+19, r20	; 0x13
    14ae:	5c 8b       	std	Y+20, r21	; 0x14

		int y = map(constrain(padData[1], 127 - LEFT_DIFF, 127 + LEFT_DIFF), 127 - LEFT_DIFF, 127+ LEFT_DIFF, 0, 1023);
		int cx = map(constrain(padData[2],127 - RIGHT_DIFF, 127 + RIGHT_DIFF),127 - RIGHT_DIFF, 127 + RIGHT_DIFF, 0, 1023);
		int cy = map(constrain(padData[3],127 - RIGHT_DIFF, 127 + RIGHT_DIFF),127 - RIGHT_DIFF, 127 + RIGHT_DIFF, 0, 1023);
		int lt = map(constrain(padData[4], 245 - SLIDER_DIFF, 245), 245 - SLIDER_DIFF, 245, 0, 1023);
		int rt = map(constrain(padData[5], 245 - SLIDER_DIFF, 245), 245 - SLIDER_DIFF, 245, 0, 1023);
    14b0:	8e 81       	ldd	r24, Y+6	; 0x06
    14b2:	86 34       	cpi	r24, 0x46	; 70
    14b4:	38 f0       	brcs	.+14     	; 0x14c4 <_Z17updateControllersv+0x560>
    14b6:	86 3f       	cpi	r24, 0xF6	; 246
    14b8:	68 f4       	brcc	.+26     	; 0x14d4 <_Z17updateControllersv+0x570>
    14ba:	c8 2e       	mov	r12, r24
    14bc:	d1 2c       	mov	r13, r1
    14be:	e1 2c       	mov	r14, r1
    14c0:	f1 2c       	mov	r15, r1
    14c2:	0f c0       	rjmp	.+30     	; 0x14e2 <_Z17updateControllersv+0x57e>
    14c4:	0f 2e       	mov	r0, r31
    14c6:	f6 e4       	ldi	r31, 0x46	; 70
    14c8:	cf 2e       	mov	r12, r31
    14ca:	d1 2c       	mov	r13, r1
    14cc:	e1 2c       	mov	r14, r1
    14ce:	f1 2c       	mov	r15, r1
    14d0:	f0 2d       	mov	r31, r0
    14d2:	07 c0       	rjmp	.+14     	; 0x14e2 <_Z17updateControllersv+0x57e>
    14d4:	0f 2e       	mov	r0, r31
    14d6:	f5 ef       	ldi	r31, 0xF5	; 245
    14d8:	cf 2e       	mov	r12, r31
    14da:	d1 2c       	mov	r13, r1
    14dc:	e1 2c       	mov	r14, r1
    14de:	f1 2c       	mov	r15, r1
    14e0:	f0 2d       	mov	r31, r0
		
		uint32_t buttons = padData[7];
    14e2:	48 85       	ldd	r20, Y+8	; 0x08
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	70 e0       	ldi	r23, 0x00	; 0
		buttons <<= 8;
    14ea:	76 2f       	mov	r23, r22
    14ec:	65 2f       	mov	r22, r21
    14ee:	54 2f       	mov	r21, r20
    14f0:	44 27       	eor	r20, r20
		buttons |= padData[6];
    14f2:	8f 81       	ldd	r24, Y+7	; 0x07
    14f4:	48 2b       	or	r20, r24
		gPad2.setButtons(buttons);
    14f6:	80 e5       	ldi	r24, 0x50	; 80
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN8Gamepad_10setButtonsEm>

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    14fe:	a7 01       	movw	r20, r14
    1500:	96 01       	movw	r18, r12
    1502:	26 54       	subi	r18, 0x46	; 70
    1504:	31 09       	sbc	r19, r1
    1506:	41 09       	sbc	r20, r1
    1508:	51 09       	sbc	r21, r1
    150a:	af ef       	ldi	r26, 0xFF	; 255
    150c:	b3 e0       	ldi	r27, 0x03	; 3
    150e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__muluhisi3>
    1512:	2f ea       	ldi	r18, 0xAF	; 175
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
		
		uint32_t buttons = padData[7];
		buttons <<= 8;
		buttons |= padData[6];
		gPad2.setButtons(buttons);
		gPad2.setAxes(Gamepad.packAxisPacket(x, y, cx,cy,lt,rt));
    151e:	69 01       	movw	r12, r18
    1520:	e9 88       	ldd	r14, Y+17	; 0x11
    1522:	fa 88       	ldd	r15, Y+18	; 0x12
    1524:	82 01       	movw	r16, r4
    1526:	94 01       	movw	r18, r8
    1528:	4d 85       	ldd	r20, Y+13	; 0x0d
    152a:	5e 85       	ldd	r21, Y+14	; 0x0e
    152c:	69 85       	ldd	r22, Y+9	; 0x09
    152e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1530:	8e e6       	ldi	r24, 0x6E	; 110
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	0e 94 a9 0b 	call	0x1752	; 0x1752 <_ZN8Gamepad_14packAxisPacketEiiiiii>
    1538:	02 2f       	mov	r16, r18
    153a:	13 2f       	mov	r17, r19
    153c:	24 2f       	mov	r18, r20
    153e:	35 2f       	mov	r19, r21
    1540:	46 2f       	mov	r20, r22
    1542:	57 2f       	mov	r21, r23
    1544:	68 2f       	mov	r22, r24
    1546:	79 2f       	mov	r23, r25
    1548:	80 e5       	ldi	r24, 0x50	; 80
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	0e 94 17 0c 	call	0x182e	; 0x182e <_ZN8Gamepad_7setAxesEy>
		gPad2.update();
    1550:	80 e5       	ldi	r24, 0x50	; 80
    1552:	91 e0       	ldi	r25, 0x01	; 1
    1554:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_ZN8Gamepad_6updateEv>
    1558:	67 c0       	rjmp	.+206    	; 0x1628 <_Z17updateControllersv+0x6c4>
	
	else
	{
		//Set 2nd here
		unsigned char padData[8];
		curGamepad2->buildReport(padData, 1);
    155a:	00 84       	ldd	r0, Z+8	; 0x08
    155c:	f1 85       	ldd	r31, Z+9	; 0x09
    155e:	e0 2d       	mov	r30, r0
    1560:	61 e0       	ldi	r22, 0x01	; 1
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	ce 01       	movw	r24, r28
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	09 95       	icall
		int x = map(padData[0],0,255,0,1023);
    156a:	29 81       	ldd	r18, Y+1	; 0x01

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	af ef       	ldi	r26, 0xFF	; 255
    1570:	b3 e0       	ldi	r27, 0x03	; 3
    1572:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__umulhisi3>
    1576:	c1 2c       	mov	r12, r1
    1578:	d1 2c       	mov	r13, r1
    157a:	76 01       	movw	r14, r12
    157c:	ca 94       	dec	r12
    157e:	a7 01       	movw	r20, r14
    1580:	96 01       	movw	r18, r12
    1582:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
    1586:	49 01       	movw	r8, r18
    1588:	5a 01       	movw	r10, r20
	{
		//Set 2nd here
		unsigned char padData[8];
		curGamepad2->buildReport(padData, 1);
		int x = map(padData[0],0,255,0,1023);
		int y = map(padData[1],0,255,0,1023);
    158a:	2a 81       	ldd	r18, Y+2	; 0x02

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	af ef       	ldi	r26, 0xFF	; 255
    1590:	b3 e0       	ldi	r27, 0x03	; 3
    1592:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__umulhisi3>
    1596:	a7 01       	movw	r20, r14
    1598:	96 01       	movw	r18, r12
    159a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divmodsi4>
    159e:	29 01       	movw	r4, r18
    15a0:	3a 01       	movw	r6, r20
		//Set 2nd here
		unsigned char padData[8];
		curGamepad2->buildReport(padData, 1);
		int x = map(padData[0],0,255,0,1023);
		int y = map(padData[1],0,255,0,1023);
		uint32_t buttons = padData[7];
    15a2:	48 85       	ldd	r20, Y+8	; 0x08
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	70 e0       	ldi	r23, 0x00	; 0
		buttons <<= 8;
    15aa:	76 2f       	mov	r23, r22
    15ac:	65 2f       	mov	r22, r21
    15ae:	54 2f       	mov	r21, r20
    15b0:	44 27       	eor	r20, r20
		buttons |= padData[6];
    15b2:	8f 81       	ldd	r24, Y+7	; 0x07
    15b4:	48 2b       	or	r20, r24
		gPad2.setButtons(buttons);
    15b6:	80 e5       	ldi	r24, 0x50	; 80
    15b8:	91 e0       	ldi	r25, 0x01	; 1
    15ba:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN8Gamepad_10setButtonsEm>
		gPad2.setAxes(Gamepad.packAxisPacket(x, y, 512,512,512,512));
    15be:	c1 2c       	mov	r12, r1
    15c0:	68 94       	set
    15c2:	dd 24       	eor	r13, r13
    15c4:	d1 f8       	bld	r13, 1
    15c6:	e1 2c       	mov	r14, r1
    15c8:	68 94       	set
    15ca:	ff 24       	eor	r15, r15
    15cc:	f1 f8       	bld	r15, 1
    15ce:	00 e0       	ldi	r16, 0x00	; 0
    15d0:	12 e0       	ldi	r17, 0x02	; 2
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	32 e0       	ldi	r19, 0x02	; 2
    15d6:	a2 01       	movw	r20, r4
    15d8:	b4 01       	movw	r22, r8
    15da:	8e e6       	ldi	r24, 0x6E	; 110
    15dc:	91 e0       	ldi	r25, 0x01	; 1
    15de:	0e 94 a9 0b 	call	0x1752	; 0x1752 <_ZN8Gamepad_14packAxisPacketEiiiiii>
    15e2:	02 2f       	mov	r16, r18
    15e4:	13 2f       	mov	r17, r19
    15e6:	24 2f       	mov	r18, r20
    15e8:	35 2f       	mov	r19, r21
    15ea:	46 2f       	mov	r20, r22
    15ec:	57 2f       	mov	r21, r23
    15ee:	68 2f       	mov	r22, r24
    15f0:	79 2f       	mov	r23, r25
    15f2:	80 e5       	ldi	r24, 0x50	; 80
    15f4:	91 e0       	ldi	r25, 0x01	; 1
    15f6:	0e 94 17 0c 	call	0x182e	; 0x182e <_ZN8Gamepad_7setAxesEy>
		gPad2.update();
    15fa:	80 e5       	ldi	r24, 0x50	; 80
    15fc:	91 e0       	ldi	r25, 0x01	; 1
    15fe:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_ZN8Gamepad_6updateEv>
    1602:	12 c0       	rjmp	.+36     	; 0x1628 <_Z17updateControllersv+0x6c4>
		else
		{
			sendN64(true);
		}
	}
	else if (enable2ndController)
    1604:	80 91 4a 01 	lds	r24, 0x014A
    1608:	90 91 4b 01 	lds	r25, 0x014B
    160c:	89 2b       	or	r24, r25
    160e:	61 f0       	breq	.+24     	; 0x1628 <_Z17updateControllersv+0x6c4>
		gPad1.update();
		
	}
	else
	{
		gPad2.setAxesBlank();
    1610:	80 e5       	ldi	r24, 0x50	; 80
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	0e 94 3d 0c 	call	0x187a	; 0x187a <_ZN8Gamepad_12setAxesBlankEv>
		gPad2.setButtonsBlank();
    1618:	80 e5       	ldi	r24, 0x50	; 80
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN8Gamepad_15setButtonsBlankEv>
		gPad2.update();
    1620:	80 e5       	ldi	r24, 0x50	; 80
    1622:	91 e0       	ldi	r25, 0x01	; 1
    1624:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_ZN8Gamepad_6updateEv>
	else if (enable2ndController)
	{
		sendBlank(true);
	}
	
    1628:	64 96       	adiw	r28, 0x14	; 20
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	ff 90       	pop	r15
    163e:	ef 90       	pop	r14
    1640:	df 90       	pop	r13
    1642:	cf 90       	pop	r12
    1644:	bf 90       	pop	r11
    1646:	af 90       	pop	r10
    1648:	9f 90       	pop	r9
    164a:	8f 90       	pop	r8
    164c:	7f 90       	pop	r7
    164e:	6f 90       	pop	r6
    1650:	5f 90       	pop	r5
    1652:	4f 90       	pop	r4
    1654:	08 95       	ret

00001656 <main>:
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void init()
{
	sei();
    1656:	78 94       	sei
int main(void)
{
	
	init();
	
	DDRC &= ~(1<<1);
    1658:	39 98       	cbi	0x07, 1	; 7
	PORTD |= (1<<1);
    165a:	59 9a       	sbi	0x0b, 1	; 11
    165c:	2f ef       	ldi	r18, 0xFF	; 255
    165e:	89 ef       	ldi	r24, 0xF9	; 249
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	21 50       	subi	r18, 0x01	; 1
    1664:	80 40       	sbci	r24, 0x00	; 0
    1666:	90 40       	sbci	r25, 0x00	; 0
    1668:	e1 f7       	brne	.-8      	; 0x1662 <main+0xc>
    166a:	00 c0       	rjmp	.+0      	; 0x166c <main+0x16>
    166c:	00 00       	nop
	
	//pinMode(2, INPUT_PULLUP);
	
	_delay_ms(20);
	
	enable2ndController = PIND & (1<<1);
    166e:	89 b1       	in	r24, 0x09	; 9
    1670:	82 70       	andi	r24, 0x02	; 2
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	90 93 4b 01 	sts	0x014B, r25
    1678:	80 93 4a 01 	sts	0x014A, r24
	
	
	if (enable2ndController)
    167c:	89 2b       	or	r24, r25
    167e:	21 f0       	breq	.+8      	; 0x1688 <main+0x32>
	{
		setDC(true);
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_Z5setDCh>
    1686:	03 c0       	rjmp	.+6      	; 0x168e <main+0x38>
	}
	else
	{
		setDC(false);
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_Z5setDCh>

static void sendBlank(bool cont2)
{
	if (!cont2)
	{
		gPad1.setAxesBlank();
    168e:	8d e5       	ldi	r24, 0x5D	; 93
    1690:	91 e0       	ldi	r25, 0x01	; 1
    1692:	0e 94 3d 0c 	call	0x187a	; 0x187a <_ZN8Gamepad_12setAxesBlankEv>
		gPad1.setButtonsBlank();
    1696:	8d e5       	ldi	r24, 0x5D	; 93
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN8Gamepad_15setButtonsBlankEv>
		gPad1.update();
    169e:	8d e5       	ldi	r24, 0x5D	; 93
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_ZN8Gamepad_6updateEv>
	
	sendBlank(false);
	
	
	//Only if controller 2 is enabled
	if (enable2ndController)
    16a6:	80 91 4a 01 	lds	r24, 0x014A
    16aa:	90 91 4b 01 	lds	r25, 0x014B
    16ae:	89 2b       	or	r24, r25
    16b0:	81 f0       	breq	.+32     	; 0x16d2 <main+0x7c>
	{
		gPad2.setController2();
    16b2:	80 e5       	ldi	r24, 0x50	; 80
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	0e 94 13 0c 	call	0x1826	; 0x1826 <_ZN8Gamepad_14setController2Ev>
		gPad1.update();
		
	}
	else
	{
		gPad2.setAxesBlank();
    16ba:	80 e5       	ldi	r24, 0x50	; 80
    16bc:	91 e0       	ldi	r25, 0x01	; 1
    16be:	0e 94 3d 0c 	call	0x187a	; 0x187a <_ZN8Gamepad_12setAxesBlankEv>
		gPad2.setButtonsBlank();
    16c2:	80 e5       	ldi	r24, 0x50	; 80
    16c4:	91 e0       	ldi	r25, 0x01	; 1
    16c6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN8Gamepad_15setButtonsBlankEv>
		gPad2.update();
    16ca:	80 e5       	ldi	r24, 0x50	; 80
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_ZN8Gamepad_6updateEv>
	{
		gPad2.setController2();
		sendBlank(true);
	}
	
	hardwareInit();
    16d2:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_Z12hardwareInitv>
    16d6:	2f ef       	ldi	r18, 0xFF	; 255
    16d8:	83 ed       	ldi	r24, 0xD3	; 211
    16da:	90 e3       	ldi	r25, 0x30	; 48
    16dc:	21 50       	subi	r18, 0x01	; 1
    16de:	80 40       	sbci	r24, 0x00	; 0
    16e0:	90 40       	sbci	r25, 0x00	; 0
    16e2:	e1 f7       	brne	.-8      	; 0x16dc <main+0x86>
    16e4:	00 c0       	rjmp	.+0      	; 0x16e6 <main+0x90>
    16e6:	00 00       	nop

	_delay_ms(1000);
	
	if (enable2ndController)
    16e8:	80 91 4a 01 	lds	r24, 0x014A
    16ec:	90 91 4b 01 	lds	r25, 0x014B
    16f0:	89 2b       	or	r24, r25
    16f2:	11 f0       	breq	.+4      	; 0x16f8 <main+0xa2>
	{
		gcn64protocol_hwinit2();
    16f4:	0e 94 da 04 	call	0x9b4	; 0x9b4 <gcn64protocol_hwinit2>
	}
	gcn64protocol_hwinit();
    16f8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <gcn64protocol_hwinit>

	wdt_enable(WDTO_2S);
    16fc:	2f e0       	ldi	r18, 0x0F	; 15
    16fe:	88 e1       	ldi	r24, 0x18	; 24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	a8 95       	wdr
    1708:	80 93 60 00 	sts	0x0060, r24
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	20 93 60 00 	sts	0x0060, r18

	while (1)
	{
		wdt_reset();
    1712:	a8 95       	wdr
		checkForNullControllers();
    1714:	0e 94 9d 07 	call	0xf3a	; 0xf3a <_Z23checkForNullControllersv>
		detectControllers();
    1718:	0e 94 34 07 	call	0xe68	; 0xe68 <_Z17detectControllersv>
		updateControllers();
    171c:	0e 94 b2 07 	call	0xf64	; 0xf64 <_Z17updateControllersv>
    1720:	f8 cf       	rjmp	.-16     	; 0x1712 <main+0xbc>

00001722 <_GLOBAL__sub_I_gPad1>:
#include "USB Code/GamepadHID.h"

static GCpad *curGamepad = NULL;
static GCpad *curGamepad2 = NULL;

Gamepad_ gPad1;
    1722:	8d e5       	ldi	r24, 0x5D	; 93
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN8Gamepad_C1Ev>
Gamepad_ gPad2;
    172a:	80 e5       	ldi	r24, 0x50	; 80
    172c:	91 e0       	ldi	r25, 0x01	; 1
    172e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN8Gamepad_C1Ev>
    1732:	08 95       	ret

00001734 <_ZN8Gamepad_C1Ev>:

#include "USBAPI.h"

Gamepad_ Gamepad;

Gamepad_::Gamepad_()
    1734:	fc 01       	movw	r30, r24
{
	gamepad.buttons = 0;
    1736:	10 82       	st	Z, r1
    1738:	11 82       	std	Z+1, r1	; 0x01
    173a:	12 82       	std	Z+2, r1	; 0x02
    173c:	13 82       	std	Z+3, r1	; 0x03
	gamepad.axes = 0;
    173e:	14 82       	std	Z+4, r1	; 0x04
    1740:	15 82       	std	Z+5, r1	; 0x05
    1742:	16 82       	std	Z+6, r1	; 0x06
    1744:	17 82       	std	Z+7, r1	; 0x07
    1746:	10 86       	std	Z+8, r1	; 0x08
    1748:	11 86       	std	Z+9, r1	; 0x09
    174a:	12 86       	std	Z+10, r1	; 0x0a
    174c:	13 86       	std	Z+11, r1	; 0x0b
	isController2 = false;
    174e:	14 86       	std	Z+12, r1	; 0x0c
    1750:	08 95       	ret

00001752 <_ZN8Gamepad_14packAxisPacketEiiiiii>:
void Gamepad_::end()
{
}

uint64_t Gamepad_::packAxisPacket(int x, int y, int z, int rx, int ry, int rz)
{
    1752:	9f 92       	push	r9
    1754:	af 92       	push	r10
    1756:	bf 92       	push	r11
    1758:	cf 92       	push	r12
    175a:	df 92       	push	r13
    175c:	ef 92       	push	r14
    175e:	ff 92       	push	r15
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	d6 2f       	mov	r29, r22
    176a:	f7 2f       	mov	r31, r23
    176c:	b4 2e       	mov	r11, r20
    176e:	a5 2f       	mov	r26, r21
    1770:	a2 2e       	mov	r10, r18
    1772:	b3 2f       	mov	r27, r19
    1774:	90 2e       	mov	r9, r16
    1776:	3d 2d       	mov	r19, r13
	uint64_t result = rz;
    1778:	2c 2d       	mov	r18, r12
    177a:	9d 2d       	mov	r25, r13
    177c:	99 0f       	add	r25, r25
    177e:	99 0b       	sbc	r25, r25
	result = result << 10;
    1780:	49 2f       	mov	r20, r25
    1782:	59 2f       	mov	r21, r25
    1784:	69 2f       	mov	r22, r25
    1786:	79 2f       	mov	r23, r25
    1788:	89 2f       	mov	r24, r25
    178a:	0a e0       	ldi	r16, 0x0A	; 10
    178c:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__ashldi3>
	result |= ry;
    1790:	ef 2d       	mov	r30, r15
    1792:	ee 0f       	add	r30, r30
    1794:	ee 0b       	sbc	r30, r30
    1796:	2e 29       	or	r18, r14
    1798:	3f 29       	or	r19, r15
    179a:	4e 2b       	or	r20, r30
    179c:	5e 2b       	or	r21, r30
    179e:	6e 2b       	or	r22, r30
    17a0:	7e 2b       	or	r23, r30
	result = result << 10;
    17a2:	8e 2b       	or	r24, r30
    17a4:	9e 2b       	or	r25, r30
    17a6:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__ashldi3>
	result |= rx;
    17aa:	e1 2f       	mov	r30, r17
    17ac:	ee 0f       	add	r30, r30
    17ae:	ee 0b       	sbc	r30, r30
    17b0:	29 29       	or	r18, r9
    17b2:	31 2b       	or	r19, r17
    17b4:	4e 2b       	or	r20, r30
    17b6:	5e 2b       	or	r21, r30
    17b8:	6e 2b       	or	r22, r30
    17ba:	7e 2b       	or	r23, r30
	result = result << 10;
    17bc:	8e 2b       	or	r24, r30
    17be:	9e 2b       	or	r25, r30
    17c0:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__ashldi3>
	result |= z;
    17c4:	eb 2f       	mov	r30, r27
    17c6:	ee 0f       	add	r30, r30
    17c8:	ee 0b       	sbc	r30, r30
    17ca:	2a 29       	or	r18, r10
    17cc:	3b 2b       	or	r19, r27
    17ce:	4e 2b       	or	r20, r30
    17d0:	5e 2b       	or	r21, r30
    17d2:	6e 2b       	or	r22, r30
    17d4:	7e 2b       	or	r23, r30
	result = result << 10;
    17d6:	8e 2b       	or	r24, r30
    17d8:	9e 2b       	or	r25, r30
    17da:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__ashldi3>
	result |= y;
    17de:	ea 2f       	mov	r30, r26
    17e0:	ee 0f       	add	r30, r30
    17e2:	ee 0b       	sbc	r30, r30
    17e4:	2b 29       	or	r18, r11
    17e6:	3a 2b       	or	r19, r26
    17e8:	4e 2b       	or	r20, r30
    17ea:	5e 2b       	or	r21, r30
    17ec:	6e 2b       	or	r22, r30
    17ee:	7e 2b       	or	r23, r30
	result = result << 10;
    17f0:	8e 2b       	or	r24, r30
    17f2:	9e 2b       	or	r25, r30
    17f4:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__ashldi3>
	result |= x;
    17f8:	ef 2f       	mov	r30, r31
    17fa:	ee 0f       	add	r30, r30
    17fc:	ee 0b       	sbc	r30, r30
    17fe:	2d 2b       	or	r18, r29
    1800:	3f 2b       	or	r19, r31
    1802:	4e 2b       	or	r20, r30
    1804:	5e 2b       	or	r21, r30
    1806:	6e 2b       	or	r22, r30
    1808:	7e 2b       	or	r23, r30


	return result;
}
    180a:	8e 2b       	or	r24, r30
    180c:	9e 2b       	or	r25, r30
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	ff 90       	pop	r15
    1818:	ef 90       	pop	r14
    181a:	df 90       	pop	r13
    181c:	cf 90       	pop	r12
    181e:	bf 90       	pop	r11
    1820:	af 90       	pop	r10
    1822:	9f 90       	pop	r9
    1824:	08 95       	ret

00001826 <_ZN8Gamepad_14setController2Ev>:

void Gamepad_::setController2()
{
	isController2 = true;
    1826:	21 e0       	ldi	r18, 0x01	; 1
    1828:	fc 01       	movw	r30, r24
    182a:	24 87       	std	Z+12, r18	; 0x0c
    182c:	08 95       	ret

0000182e <_ZN8Gamepad_7setAxesEy>:
{
	return map(input, 0,255,0,1023);
}

void Gamepad_::setAxes(uint64_t axes)
{
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	fc 01       	movw	r30, r24
	gamepad.axes = axes;
    1834:	04 83       	std	Z+4, r16	; 0x04
    1836:	15 83       	std	Z+5, r17	; 0x05
    1838:	26 83       	std	Z+6, r18	; 0x06
    183a:	37 83       	std	Z+7, r19	; 0x07
    183c:	40 87       	std	Z+8, r20	; 0x08
    183e:	51 87       	std	Z+9, r21	; 0x09
    1840:	62 87       	std	Z+10, r22	; 0x0a
    1842:	73 87       	std	Z+11, r23	; 0x0b
}
    1844:	1f 91       	pop	r17
    1846:	0f 91       	pop	r16
    1848:	08 95       	ret

0000184a <_ZN8Gamepad_10setButtonsEm>:

void Gamepad_::setButtons(uint32_t buttons)
{
	gamepad.buttons = buttons;
    184a:	fc 01       	movw	r30, r24
    184c:	40 83       	st	Z, r20
    184e:	51 83       	std	Z+1, r21	; 0x01
    1850:	62 83       	std	Z+2, r22	; 0x02
    1852:	73 83       	std	Z+3, r23	; 0x03
    1854:	08 95       	ret

00001856 <_ZN8Gamepad_6updateEv>:
}

void Gamepad_::update()
{
	if (!isController2)
    1856:	fc 01       	movw	r30, r24
    1858:	24 85       	ldd	r18, Z+12	; 0x0c
    185a:	21 11       	cpse	r18, r1
    185c:	07 c0       	rjmp	.+14     	; 0x186c <_ZN8Gamepad_6updateEv+0x16>
	{
		HID_SendReport(1, &gamepad, sizeof(gamepad));
    185e:	4c e0       	ldi	r20, 0x0C	; 12
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	bc 01       	movw	r22, r24
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	0e 94 82 0c 	call	0x1904	; 0x1904 <_Z14HID_SendReporthPKvi>
    186a:	08 95       	ret
	}
	else
	{
		HID_SendReport(2, &gamepad, sizeof(gamepad));
    186c:	4c e0       	ldi	r20, 0x0C	; 12
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	bc 01       	movw	r22, r24
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	0e 94 82 0c 	call	0x1904	; 0x1904 <_Z14HID_SendReporthPKvi>
    1878:	08 95       	ret

0000187a <_ZN8Gamepad_12setAxesBlankEv>:
	}
}

void Gamepad_::setAxesBlank()
{
    187a:	fc 01       	movw	r30, r24
	gamepad.axes = CENTER_ALL;
    187c:	14 82       	std	Z+4, r1	; 0x04
    187e:	92 e0       	ldi	r25, 0x02	; 2
    1880:	95 83       	std	Z+5, r25	; 0x05
    1882:	88 e0       	ldi	r24, 0x08	; 8
    1884:	86 83       	std	Z+6, r24	; 0x06
    1886:	20 e2       	ldi	r18, 0x20	; 32
    1888:	27 83       	std	Z+7, r18	; 0x07
    188a:	20 e8       	ldi	r18, 0x80	; 128
    188c:	20 87       	std	Z+8, r18	; 0x08
    188e:	11 86       	std	Z+9, r1	; 0x09
    1890:	92 87       	std	Z+10, r25	; 0x0a
    1892:	83 87       	std	Z+11, r24	; 0x0b
    1894:	08 95       	ret

00001896 <_ZN8Gamepad_15setButtonsBlankEv>:
}

void Gamepad_::setButtonsBlank()
{
	gamepad.buttons = 0;
    1896:	fc 01       	movw	r30, r24
    1898:	10 82       	st	Z, r1
    189a:	11 82       	std	Z+1, r1	; 0x01
    189c:	12 82       	std	Z+2, r1	; 0x02
    189e:	13 82       	std	Z+3, r1	; 0x03
    18a0:	08 95       	ret

000018a2 <_GLOBAL__sub_I_Gamepad>:
#include "GamepadHID.h"

#include "USBAPI.h"

Gamepad_ Gamepad;
    18a2:	8e e6       	ldi	r24, 0x6E	; 110
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN8Gamepad_C1Ev>
    18aa:	08 95       	ret

000018ac <_Z16HID_GetInterfacePhh>:

#define WEAK __attribute__ ((weak))

int WEAK HID_GetInterface(u8* interfaceNum, boolean dualCont)
{
	if (!dualCont)
    18ac:	61 11       	cpse	r22, r1
    18ae:	0c c0       	rjmp	.+24     	; 0x18c8 <_Z16HID_GetInterfacePhh+0x1c>
	{
	interfaceNum[0] += 1;	// uses 1
    18b0:	fc 01       	movw	r30, r24
    18b2:	20 81       	ld	r18, Z
    18b4:	2f 5f       	subi	r18, 0xFF	; 255
    18b6:	20 83       	st	Z, r18
	return USB_SendControl(TRANSFER_PGM,&_hidInterface,sizeof(_hidInterface));
    18b8:	49 e1       	ldi	r20, 0x19	; 25
    18ba:	50 e0       	ldi	r21, 0x00	; 0
    18bc:	6b e3       	ldi	r22, 0x3B	; 59
    18be:	71 e0       	ldi	r23, 0x01	; 1
    18c0:	80 e8       	ldi	r24, 0x80	; 128
    18c2:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_Z15USB_SendControlhPKvi>
    18c6:	08 95       	ret
	}
	else
	{
		interfaceNum[0] += 1;	// uses 1
    18c8:	fc 01       	movw	r30, r24
    18ca:	20 81       	ld	r18, Z
    18cc:	2f 5f       	subi	r18, 0xFF	; 255
    18ce:	20 83       	st	Z, r18
	return USB_SendControl(TRANSFER_PGM,&_hidInterface2,sizeof(_hidInterface2));
    18d0:	49 e1       	ldi	r20, 0x19	; 25
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	6c ea       	ldi	r22, 0xAC	; 172
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	80 e8       	ldi	r24, 0x80	; 128
    18da:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_Z15USB_SendControlhPKvi>
	}
}
    18de:	08 95       	ret

000018e0 <_Z17HID_GetDescriptorih>:

int WEAK HID_GetDescriptor(int i, boolean dualCont)
{
	if (!dualCont)
    18e0:	61 11       	cpse	r22, r1
    18e2:	08 c0       	rjmp	.+16     	; 0x18f4 <_Z17HID_GetDescriptorih+0x14>
	{
		return USB_SendControl(TRANSFER_PGM,_hidReportDescriptor,sizeof(_hidReportDescriptor));
    18e4:	4b e3       	ldi	r20, 0x3B	; 59
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	64 e5       	ldi	r22, 0x54	; 84
    18ea:	71 e0       	ldi	r23, 0x01	; 1
    18ec:	80 e8       	ldi	r24, 0x80	; 128
    18ee:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_Z15USB_SendControlhPKvi>
    18f2:	08 95       	ret
	}
	else
	{
		return USB_SendControl(TRANSFER_PGM,_hidReportDescriptor2,sizeof(_hidReportDescriptor2));
    18f4:	46 e7       	ldi	r20, 0x76	; 118
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	65 ec       	ldi	r22, 0xC5	; 197
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	80 e8       	ldi	r24, 0x80	; 128
    18fe:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_Z15USB_SendControlhPKvi>
	}
}
    1902:	08 95       	ret

00001904 <_Z14HID_SendReporthPKvi>:

void WEAK HID_SendReport(u8 id, const void* data, int len)
{
    1904:	ef 92       	push	r14
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	1f 92       	push	r1
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	8b 01       	movw	r16, r22
    191a:	7a 01       	movw	r14, r20
	USB_Send(HID_TX, &id, 1);
    191c:	41 e0       	ldi	r20, 0x01	; 1
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	be 01       	movw	r22, r28
    1922:	6f 5f       	subi	r22, 0xFF	; 255
    1924:	7f 4f       	sbci	r23, 0xFF	; 255
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_Z8USB_SendhPKvi>
	USB_Send(HID_TX | TRANSFER_RELEASE,data,len);
    192c:	a7 01       	movw	r20, r14
    192e:	b8 01       	movw	r22, r16
    1930:	81 e4       	ldi	r24, 0x41	; 65
    1932:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_Z8USB_SendhPKvi>
}
    1936:	0f 90       	pop	r0
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	1f 91       	pop	r17
    193e:	0f 91       	pop	r16
    1940:	ff 90       	pop	r15
    1942:	ef 90       	pop	r14
    1944:	08 95       	ret

00001946 <_Z9HID_SetupR5Setup>:

bool WEAK HID_Setup(Setup& setup)
{
    1946:	fc 01       	movw	r30, r24
	u8 r = setup.bRequest;
    1948:	91 81       	ldd	r25, Z+1	; 0x01
	u8 requestType = setup.bmRequestType;
    194a:	80 81       	ld	r24, Z
	if (REQUEST_DEVICETOHOST_CLASS_INTERFACE == requestType)
    194c:	81 3a       	cpi	r24, 0xA1	; 161
    194e:	31 f4       	brne	.+12     	; 0x195c <_Z9HID_SetupR5Setup+0x16>
	{
		if (HID_GET_REPORT == r)
    1950:	9d 7f       	andi	r25, 0xFD	; 253
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	91 30       	cpi	r25, 0x01	; 1
    1956:	a9 f0       	breq	.+42     	; 0x1982 <_Z9HID_SetupR5Setup+0x3c>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	08 95       	ret
			//Send8(_hid_protocol);	// TODO
			return true;
		}
	}
	
	if (REQUEST_HOSTTODEVICE_CLASS_INTERFACE == requestType)
    195c:	81 32       	cpi	r24, 0x21	; 33
    195e:	71 f4       	brne	.+28     	; 0x197c <_Z9HID_SetupR5Setup+0x36>
	{
		if (HID_SET_PROTOCOL == r)
    1960:	9b 30       	cpi	r25, 0x0B	; 11
    1962:	29 f4       	brne	.+10     	; 0x196e <_Z9HID_SetupR5Setup+0x28>
		{
			_hid_protocol = setup.wValueL;
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	80 93 1a 01 	sts	0x011A, r24
			return true;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	08 95       	ret
		}

		if (HID_SET_IDLE == r)
    196e:	9a 30       	cpi	r25, 0x0A	; 10
    1970:	39 f4       	brne	.+14     	; 0x1980 <_Z9HID_SetupR5Setup+0x3a>
		{
			_hid_idle = setup.wValueL;
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	80 93 19 01 	sts	0x0119, r24
			return true;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	08 95       	ret
		}
	}
	return false;
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	08 95       	ret
    1980:	80 e0       	ldi	r24, 0x00	; 0
}
    1982:	08 95       	ret

00001984 <_Z4RecvPVhh>:
{
	UEINTX = ~(1<<RXOUTI);
}

void Recv(volatile u8* data, u8 count)
{
    1984:	fc 01       	movw	r30, r24
	while (count--)
    1986:	2f ef       	ldi	r18, 0xFF	; 255
    1988:	26 0f       	add	r18, r22
    198a:	66 23       	and	r22, r22
    198c:	51 f0       	breq	.+20     	; 0x19a2 <_Z4RecvPVhh+0x1e>
		*data++ = UEDATX;
    198e:	a1 ef       	ldi	r26, 0xF1	; 241
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	cf 01       	movw	r24, r30
    1994:	01 96       	adiw	r24, 0x01	; 1
    1996:	3c 91       	ld	r19, X
    1998:	30 83       	st	Z, r19
	UEINTX = ~(1<<RXOUTI);
}

void Recv(volatile u8* data, u8 count)
{
	while (count--)
    199a:	21 50       	subi	r18, 0x01	; 1
    199c:	10 f0       	brcs	.+4      	; 0x19a2 <_Z4RecvPVhh+0x1e>
		*data++ = UEDATX;
    199e:	fc 01       	movw	r30, r24
    19a0:	f8 cf       	rjmp	.-16     	; 0x1992 <_Z4RecvPVhh+0xe>
	
	RXLED1;					// light the RX LED
    19a2:	28 98       	cbi	0x05, 0	; 5
	RxLEDPulse = TX_RX_LED_PULSE_MS;	
    19a4:	84 e6       	ldi	r24, 0x64	; 100
    19a6:	80 93 81 01 	sts	0x0181, r24
    19aa:	08 95       	ret

000019ac <_Z13USB_SendSpaceh>:
#define USB_RECV_TIMEOUT
class LockEP
{
	u8 _sreg;
public:
	LockEP(u8 ep) : _sreg(SREG)
    19ac:	2f b7       	in	r18, 0x3f	; 63
	{
		cli();
    19ae:	f8 94       	cli
		SetEP(ep & 7);
    19b0:	87 70       	andi	r24, 0x07	; 7
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    19b2:	80 93 e9 00 	sts	0x00E9, r24
	UECONX = (1<<STALLRQ) | (1<<EPEN);
}

static inline u8 ReadWriteAllowed()
{
	return UEINTX & (1<<RWAL);
    19b6:	90 91 e8 00 	lds	r25, 0x00E8

//	Space in send EP
u8 USB_SendSpace(u8 ep)
{
	LockEP lock(ep);
	if (!ReadWriteAllowed())
    19ba:	89 2f       	mov	r24, r25
    19bc:	80 72       	andi	r24, 0x20	; 32
    19be:	95 ff       	sbrs	r25, 5
    19c0:	04 c0       	rjmp	.+8      	; 0x19ca <_Z13USB_SendSpaceh+0x1e>
	UENUM = ep;
}

static inline u8 FifoByteCount()
{
	return UEBCLX;
    19c2:	90 91 f2 00 	lds	r25, 0x00F2
u8 USB_SendSpace(u8 ep)
{
	LockEP lock(ep);
	if (!ReadWriteAllowed())
		return 0;
	return 64 - FifoByteCount();
    19c6:	80 e4       	ldi	r24, 0x40	; 64
    19c8:	89 1b       	sub	r24, r25
		cli();
		SetEP(ep & 7);
	}
	~LockEP()
	{
		SREG = _sreg;
    19ca:	2f bf       	out	0x3f, r18	; 63
{
	LockEP lock(ep);
	if (!ReadWriteAllowed())
		return 0;
	return 64 - FifoByteCount();
}
    19cc:	08 95       	ret

000019ce <_Z8USB_SendhPKvi>:

//	Blocking Send of data to an endpoint
int USB_Send(u8 ep, const void* d, int len)
{
    19ce:	2f 92       	push	r2
    19d0:	3f 92       	push	r3
    19d2:	4f 92       	push	r4
    19d4:	5f 92       	push	r5
    19d6:	6f 92       	push	r6
    19d8:	7f 92       	push	r7
    19da:	8f 92       	push	r8
    19dc:	9f 92       	push	r9
    19de:	af 92       	push	r10
    19e0:	bf 92       	push	r11
    19e2:	cf 92       	push	r12
    19e4:	df 92       	push	r13
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	68 2e       	mov	r6, r24
    19f4:	6b 01       	movw	r12, r22
    19f6:	4a 01       	movw	r8, r20
	if (!_usbConfiguration)
    19f8:	80 91 80 01 	lds	r24, 0x0180
    19fc:	88 23       	and	r24, r24
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <_Z8USB_SendhPKvi+0x34>
    1a00:	80 c0       	rjmp	.+256    	; 0x1b02 <_Z8USB_SendhPKvi+0x134>

	int r = len;
	const u8* data = (const u8*)d;
	u8 zero = ep & TRANSFER_ZERO;
	u8 timeout = 250;		// 250ms timeout on send? TODO
	while (len)
    1a02:	41 15       	cp	r20, r1
    1a04:	51 05       	cpc	r21, r1
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <_Z8USB_SendhPKvi+0x3c>
    1a08:	75 c0       	rjmp	.+234    	; 0x1af4 <_Z8USB_SendhPKvi+0x126>
    1a0a:	8a 01       	movw	r16, r20
    1a0c:	0f 2e       	mov	r0, r31
    1a0e:	fa ef       	ldi	r31, 0xFA	; 250
    1a10:	7f 2e       	mov	r7, r31
    1a12:	f0 2d       	mov	r31, r0
	u8 _sreg;
public:
	LockEP(u8 ep) : _sreg(SREG)
	{
		cli();
		SetEP(ep & 7);
    1a14:	86 2d       	mov	r24, r6
    1a16:	87 70       	andi	r24, 0x07	; 7
    1a18:	48 2e       	mov	r4, r24
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    1a1a:	0f 2e       	mov	r0, r31
    1a1c:	f9 ee       	ldi	r31, 0xE9	; 233
    1a1e:	af 2e       	mov	r10, r31
    1a20:	b1 2c       	mov	r11, r1
    1a22:	f0 2d       	mov	r31, r0
		if (n > len)
			n = len;
		len -= n;
		{
			LockEP lock(ep);
			if (ep & TRANSFER_ZERO)
    1a24:	96 2d       	mov	r25, r6
    1a26:	90 72       	andi	r25, 0x20	; 32
    1a28:	59 2e       	mov	r5, r25
	UECONX = (1<<STALLRQ) | (1<<EPEN);
}

static inline u8 ReadWriteAllowed()
{
	return UEINTX & (1<<RWAL);
    1a2a:	0f 2e       	mov	r0, r31
    1a2c:	f8 ee       	ldi	r31, 0xE8	; 232
    1a2e:	ef 2e       	mov	r14, r31
    1a30:	f1 2c       	mov	r15, r1
    1a32:	f0 2d       	mov	r31, r0
	UEINTX = 0x6B;	// FIFOCON=0 NAKINI=1 RWAL=1 NAKOUTI=0 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=1
}

static inline void ReleaseTX()
{
	UEINTX = 0x3A;	// FIFOCON=0 NAKINI=0 RWAL=1 NAKOUTI=1 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=0
    1a34:	0f 2e       	mov	r0, r31
    1a36:	fa e3       	ldi	r31, 0x3A	; 58
    1a38:	3f 2e       	mov	r3, r31
    1a3a:	f0 2d       	mov	r31, r0
			else
			{
				while (n--)
					Send8(*data++);
			}
			if (!ReadWriteAllowed() || ((len == 0) && (ep & TRANSFER_RELEASE)))	// Release full buffer
    1a3c:	e6 2d       	mov	r30, r6
    1a3e:	e0 74       	andi	r30, 0x40	; 64
    1a40:	2e 2e       	mov	r2, r30
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1a42:	c1 ef       	ldi	r28, 0xF1	; 241
    1a44:	d0 e0       	ldi	r29, 0x00	; 0
	const u8* data = (const u8*)d;
	u8 zero = ep & TRANSFER_ZERO;
	u8 timeout = 250;		// 250ms timeout on send? TODO
	while (len)
	{
		u8 n = USB_SendSpace(ep);
    1a46:	86 2d       	mov	r24, r6
    1a48:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_Z13USB_SendSpaceh>
		if (n == 0)
    1a4c:	81 11       	cpse	r24, r1
    1a4e:	0a c0       	rjmp	.+20     	; 0x1a64 <_Z8USB_SendhPKvi+0x96>
		{
			if (!(--timeout))
    1a50:	7a 94       	dec	r7
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <_Z8USB_SendhPKvi+0x88>
    1a54:	59 c0       	rjmp	.+178    	; 0x1b08 <_Z8USB_SendhPKvi+0x13a>
    1a56:	8f e9       	ldi	r24, 0x9F	; 159
    1a58:	9f e0       	ldi	r25, 0x0F	; 15
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <_Z8USB_SendhPKvi+0x8c>
    1a5e:	00 c0       	rjmp	.+0      	; 0x1a60 <_Z8USB_SendhPKvi+0x92>
    1a60:	00 00       	nop
    1a62:	44 c0       	rjmp	.+136    	; 0x1aec <_Z8USB_SendhPKvi+0x11e>
				return -1;
			_delay_ms(1);
			continue;
		}

		if (n > len)
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	02 17       	cp	r16, r18
    1a6a:	13 07       	cpc	r17, r19
    1a6c:	0c f4       	brge	.+2      	; 0x1a70 <_Z8USB_SendhPKvi+0xa2>
			n = len;
    1a6e:	80 2f       	mov	r24, r16
		len -= n;
    1a70:	08 1b       	sub	r16, r24
    1a72:	11 09       	sbc	r17, r1
#define USB_RECV_TIMEOUT
class LockEP
{
	u8 _sreg;
public:
	LockEP(u8 ep) : _sreg(SREG)
    1a74:	2f b7       	in	r18, 0x3f	; 63
	{
		cli();
    1a76:	f8 94       	cli
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    1a78:	f5 01       	movw	r30, r10
    1a7a:	40 82       	st	Z, r4
		if (n > len)
			n = len;
		len -= n;
		{
			LockEP lock(ep);
			if (ep & TRANSFER_ZERO)
    1a7c:	55 20       	and	r5, r5
    1a7e:	41 f0       	breq	.+16     	; 0x1a90 <_Z8USB_SendhPKvi+0xc2>
			{
				while (n--)
    1a80:	9f ef       	ldi	r25, 0xFF	; 255
    1a82:	98 0f       	add	r25, r24
    1a84:	88 23       	and	r24, r24
    1a86:	41 f1       	breq	.+80     	; 0x1ad8 <_Z8USB_SendhPKvi+0x10a>
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1a88:	18 82       	st	Y, r1
		len -= n;
		{
			LockEP lock(ep);
			if (ep & TRANSFER_ZERO)
			{
				while (n--)
    1a8a:	91 50       	subi	r25, 0x01	; 1
    1a8c:	e8 f7       	brcc	.-6      	; 0x1a88 <_Z8USB_SendhPKvi+0xba>
    1a8e:	24 c0       	rjmp	.+72     	; 0x1ad8 <_Z8USB_SendhPKvi+0x10a>
					Send8(0);
			}
			else if (ep & TRANSFER_PGM)
    1a90:	66 20       	and	r6, r6
    1a92:	2c f0       	brlt	.+10     	; 0x1a9e <_Z8USB_SendhPKvi+0xd0>
				while (n--)
					Send8(pgm_read_byte(data++));
			}
			else
			{
				while (n--)
    1a94:	4f ef       	ldi	r20, 0xFF	; 255
    1a96:	48 0f       	add	r20, r24
    1a98:	81 11       	cpse	r24, r1
    1a9a:	13 c0       	rjmp	.+38     	; 0x1ac2 <_Z8USB_SendhPKvi+0xf4>
    1a9c:	1d c0       	rjmp	.+58     	; 0x1ad8 <_Z8USB_SendhPKvi+0x10a>
				while (n--)
					Send8(0);
			}
			else if (ep & TRANSFER_PGM)
			{
				while (n--)
    1a9e:	4f ef       	ldi	r20, 0xFF	; 255
    1aa0:	48 0f       	add	r20, r24
    1aa2:	88 23       	and	r24, r24
    1aa4:	c9 f0       	breq	.+50     	; 0x1ad8 <_Z8USB_SendhPKvi+0x10a>
    1aa6:	f6 01       	movw	r30, r12
    1aa8:	94 2f       	mov	r25, r20
					Send8(pgm_read_byte(data++));
    1aaa:	34 91       	lpm	r19, Z
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1aac:	38 83       	st	Y, r19
				while (n--)
					Send8(0);
			}
			else if (ep & TRANSFER_PGM)
			{
				while (n--)
    1aae:	91 50       	subi	r25, 0x01	; 1
    1ab0:	31 96       	adiw	r30, 0x01	; 1
    1ab2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ab4:	d1 f7       	brne	.-12     	; 0x1aaa <_Z8USB_SendhPKvi+0xdc>
    1ab6:	84 2f       	mov	r24, r20
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	01 96       	adiw	r24, 0x01	; 1
    1abc:	c8 0e       	add	r12, r24
    1abe:	d9 1e       	adc	r13, r25
    1ac0:	0b c0       	rjmp	.+22     	; 0x1ad8 <_Z8USB_SendhPKvi+0x10a>
    1ac2:	f6 01       	movw	r30, r12
					Send8(pgm_read_byte(data++));
			}
			else
			{
				while (n--)
    1ac4:	94 2f       	mov	r25, r20
					Send8(*data++);
    1ac6:	31 91       	ld	r19, Z+
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1ac8:	38 83       	st	Y, r19
				while (n--)
					Send8(pgm_read_byte(data++));
			}
			else
			{
				while (n--)
    1aca:	91 50       	subi	r25, 0x01	; 1
    1acc:	e0 f7       	brcc	.-8      	; 0x1ac6 <_Z8USB_SendhPKvi+0xf8>
    1ace:	84 2f       	mov	r24, r20
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	c8 0e       	add	r12, r24
    1ad6:	d9 1e       	adc	r13, r25
	UECONX = (1<<STALLRQ) | (1<<EPEN);
}

static inline u8 ReadWriteAllowed()
{
	return UEINTX & (1<<RWAL);
    1ad8:	f7 01       	movw	r30, r14
    1ada:	80 81       	ld	r24, Z
			else
			{
				while (n--)
					Send8(*data++);
			}
			if (!ReadWriteAllowed() || ((len == 0) && (ep & TRANSFER_RELEASE)))	// Release full buffer
    1adc:	85 ff       	sbrs	r24, 5
    1ade:	17 c0       	rjmp	.+46     	; 0x1b0e <_Z8USB_SendhPKvi+0x140>
    1ae0:	01 15       	cp	r16, r1
    1ae2:	11 05       	cpc	r17, r1
    1ae4:	11 f4       	brne	.+4      	; 0x1aea <_Z8USB_SendhPKvi+0x11c>
    1ae6:	21 10       	cpse	r2, r1
    1ae8:	12 c0       	rjmp	.+36     	; 0x1b0e <_Z8USB_SendhPKvi+0x140>
		cli();
		SetEP(ep & 7);
	}
	~LockEP()
	{
		SREG = _sreg;
    1aea:	2f bf       	out	0x3f, r18	; 63

	int r = len;
	const u8* data = (const u8*)d;
	u8 zero = ep & TRANSFER_ZERO;
	u8 timeout = 250;		// 250ms timeout on send? TODO
	while (len)
    1aec:	01 15       	cp	r16, r1
    1aee:	11 05       	cpc	r17, r1
    1af0:	09 f0       	breq	.+2      	; 0x1af4 <_Z8USB_SendhPKvi+0x126>
    1af2:	a9 cf       	rjmp	.-174    	; 0x1a46 <_Z8USB_SendhPKvi+0x78>
			}
			if (!ReadWriteAllowed() || ((len == 0) && (ep & TRANSFER_RELEASE)))	// Release full buffer
				ReleaseTX();
		}
	}
	TXLED1;					// light the TX LED
    1af4:	5d 98       	cbi	0x0b, 5	; 11
	TxLEDPulse = TX_RX_LED_PULSE_MS;
    1af6:	84 e6       	ldi	r24, 0x64	; 100
    1af8:	80 93 82 01 	sts	0x0182, r24
	return r;
    1afc:	88 2d       	mov	r24, r8
    1afe:	99 2d       	mov	r25, r9
    1b00:	09 c0       	rjmp	.+18     	; 0x1b14 <_Z8USB_SendhPKvi+0x146>

//	Blocking Send of data to an endpoint
int USB_Send(u8 ep, const void* d, int len)
{
	if (!_usbConfiguration)
		return -1;
    1b02:	8f ef       	ldi	r24, 0xFF	; 255
    1b04:	9f ef       	ldi	r25, 0xFF	; 255
    1b06:	06 c0       	rjmp	.+12     	; 0x1b14 <_Z8USB_SendhPKvi+0x146>
	{
		u8 n = USB_SendSpace(ep);
		if (n == 0)
		{
			if (!(--timeout))
				return -1;
    1b08:	8f ef       	ldi	r24, 0xFF	; 255
    1b0a:	9f ef       	ldi	r25, 0xFF	; 255
    1b0c:	03 c0       	rjmp	.+6      	; 0x1b14 <_Z8USB_SendhPKvi+0x146>
	UEINTX = 0x6B;	// FIFOCON=0 NAKINI=1 RWAL=1 NAKOUTI=0 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=1
}

static inline void ReleaseTX()
{
	UEINTX = 0x3A;	// FIFOCON=0 NAKINI=0 RWAL=1 NAKOUTI=1 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=0
    1b0e:	f7 01       	movw	r30, r14
    1b10:	30 82       	st	Z, r3
    1b12:	eb cf       	rjmp	.-42     	; 0x1aea <_Z8USB_SendhPKvi+0x11c>
		}
	}
	TXLED1;					// light the TX LED
	TxLEDPulse = TX_RX_LED_PULSE_MS;
	return r;
}
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	df 90       	pop	r13
    1b22:	cf 90       	pop	r12
    1b24:	bf 90       	pop	r11
    1b26:	af 90       	pop	r10
    1b28:	9f 90       	pop	r9
    1b2a:	8f 90       	pop	r8
    1b2c:	7f 90       	pop	r7
    1b2e:	6f 90       	pop	r6
    1b30:	5f 90       	pop	r5
    1b32:	4f 90       	pop	r4
    1b34:	3f 90       	pop	r3
    1b36:	2f 90       	pop	r2
    1b38:	08 95       	ret

00001b3a <_Z11InitControli>:
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    1b3a:	10 92 e9 00 	sts	0x00E9, r1
int _cmark;
int _cend;
void InitControl(int end)
{
	SetEP(0);
	_cmark = 0;
    1b3e:	10 92 7f 01 	sts	0x017F, r1
    1b42:	10 92 7e 01 	sts	0x017E, r1
	_cend = end;
    1b46:	90 93 7d 01 	sts	0x017D, r25
    1b4a:	80 93 7c 01 	sts	0x017C, r24
    1b4e:	08 95       	ret

00001b50 <_Z15USB_SendControlhPKvi>:
	return true;
};

//	Clipped by _cmark/_cend
int USB_SendControl(u8 flags, const void* d, int len)
{
    1b50:	df 92       	push	r13
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	04 2f       	mov	r16, r20
    1b60:	15 2f       	mov	r17, r21
	int sent = len;
	const u8* data = (const u8*)d;
	bool pgm = flags & TRANSFER_PGM;
	while (len--)
    1b62:	e6 2f       	mov	r30, r22
    1b64:	f7 2f       	mov	r31, r23
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
		;
}

static inline u8 WaitForINOrOUT()
{
	while (!(UEINTX & ((1<<TXINI)|(1<<RXOUTI))))
    1b6a:	a8 ee       	ldi	r26, 0xE8	; 232
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1b6e:	0f 2e       	mov	r0, r31
    1b70:	f1 ef       	ldi	r31, 0xF1	; 241
    1b72:	ef 2e       	mov	r14, r31
    1b74:	f1 2c       	mov	r15, r1
    1b76:	f0 2d       	mov	r31, r0
	while (!(UEINTX & (1<<TXINI)));
}

static inline void ClearIN(void)
{
	UEINTX = ~(1<<TXINI);
    1b78:	9e ef       	ldi	r25, 0xFE	; 254
int USB_SendControl(u8 flags, const void* d, int len)
{
	int sent = len;
	const u8* data = (const u8*)d;
	bool pgm = flags & TRANSFER_PGM;
	while (len--)
    1b7a:	30 c0       	rjmp	.+96     	; 0x1bdc <_Z15USB_SendControlhPKvi+0x8c>
	{
		u8 c = pgm ? pgm_read_byte(data++) : *data++;
    1b7c:	88 23       	and	r24, r24
    1b7e:	14 f4       	brge	.+4      	; 0x1b84 <_Z15USB_SendControlhPKvi+0x34>
    1b80:	d4 90       	lpm	r13, Z
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <_Z15USB_SendControlhPKvi+0x36>
    1b84:	d0 80       	ld	r13, Z
}

static
bool SendControl(u8 d)
{
	if (_cmark < _cend)
    1b86:	c0 91 7e 01 	lds	r28, 0x017E
    1b8a:	d0 91 7f 01 	lds	r29, 0x017F
    1b8e:	60 91 7c 01 	lds	r22, 0x017C
    1b92:	70 91 7d 01 	lds	r23, 0x017D
    1b96:	c6 17       	cp	r28, r22
    1b98:	d7 07       	cpc	r29, r23
    1b9a:	9c f4       	brge	.+38     	; 0x1bc2 <_Z15USB_SendControlhPKvi+0x72>
		;
}

static inline u8 WaitForINOrOUT()
{
	while (!(UEINTX & ((1<<TXINI)|(1<<RXOUTI))))
    1b9c:	6c 91       	ld	r22, X
    1b9e:	65 70       	andi	r22, 0x05	; 5
    1ba0:	e9 f3       	breq	.-6      	; 0x1b9c <_Z15USB_SendControlhPKvi+0x4c>
		;
	return (UEINTX & (1<<RXOUTI)) == 0;
    1ba2:	6c 91       	ld	r22, X
static
bool SendControl(u8 d)
{
	if (_cmark < _cend)
	{
		if (!WaitForINOrOUT())
    1ba4:	62 fd       	sbrc	r22, 2
    1ba6:	20 c0       	rjmp	.+64     	; 0x1be8 <_Z15USB_SendControlhPKvi+0x98>
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1ba8:	e7 01       	movw	r28, r14
    1baa:	d8 82       	st	Y, r13
	if (_cmark < _cend)
	{
		if (!WaitForINOrOUT())
			return false;
		Send8(d);
		if (!((_cmark + 1) & 0x3F))
    1bac:	60 91 7e 01 	lds	r22, 0x017E
    1bb0:	70 91 7f 01 	lds	r23, 0x017F
    1bb4:	6f 5f       	subi	r22, 0xFF	; 255
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb8:	6f 73       	andi	r22, 0x3F	; 63
    1bba:	77 27       	eor	r23, r23
    1bbc:	67 2b       	or	r22, r23
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <_Z15USB_SendControlhPKvi+0x72>
	while (!(UEINTX & (1<<TXINI)));
}

static inline void ClearIN(void)
{
	UEINTX = ~(1<<TXINI);
    1bc0:	9c 93       	st	X, r25
			return false;
		Send8(d);
		if (!((_cmark + 1) & 0x3F))
			ClearIN();	// Fifo is full, release this packet
	}
	_cmark++;
    1bc2:	60 91 7e 01 	lds	r22, 0x017E
    1bc6:	70 91 7f 01 	lds	r23, 0x017F
    1bca:	6f 5f       	subi	r22, 0xFF	; 255
    1bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bce:	70 93 7f 01 	sts	0x017F, r23
    1bd2:	60 93 7e 01 	sts	0x017E, r22
    1bd6:	2f 5f       	subi	r18, 0xFF	; 255
    1bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bda:	31 96       	adiw	r30, 0x01	; 1
int USB_SendControl(u8 flags, const void* d, int len)
{
	int sent = len;
	const u8* data = (const u8*)d;
	bool pgm = flags & TRANSFER_PGM;
	while (len--)
    1bdc:	20 17       	cp	r18, r16
    1bde:	31 07       	cpc	r19, r17
    1be0:	69 f6       	brne	.-102    	; 0x1b7c <_Z15USB_SendControlhPKvi+0x2c>
	{
		u8 c = pgm ? pgm_read_byte(data++) : *data++;
		if (!SendControl(c))
			return -1;
	}
	return sent;
    1be2:	84 2f       	mov	r24, r20
    1be4:	95 2f       	mov	r25, r21
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <_Z15USB_SendControlhPKvi+0x9c>
	bool pgm = flags & TRANSFER_PGM;
	while (len--)
	{
		u8 c = pgm ? pgm_read_byte(data++) : *data++;
		if (!SendControl(c))
			return -1;
    1be8:	8f ef       	ldi	r24, 0xFF	; 255
    1bea:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return sent;
}
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	1f 91       	pop	r17
    1bf2:	0f 91       	pop	r16
    1bf4:	ff 90       	pop	r15
    1bf6:	ef 90       	pop	r14
    1bf8:	df 90       	pop	r13
    1bfa:	08 95       	ret

00001bfc <_Z14SendInterfacesh>:
	ClearOUT();
	return len;
}

int SendInterfaces(boolean dualCont)
{
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	1f 92       	push	r1
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
	int total = 0;
	u8 interfaces = 0;
    1c06:	19 82       	std	Y+1, r1	; 0x01
#ifdef CDC_ENABLED
	total = CDC_GetInterface(&interfaces);
#endif

#ifdef HID_ENABLED
	total += HID_GetInterface(&interfaces, dualCont);
    1c08:	68 2f       	mov	r22, r24
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_Z16HID_GetInterfacePhh>
#endif

	return interfaces;
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	0f 90       	pop	r0
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	08 95       	ret

00001c1e <_Z5setDCh>:
	return true;
}

void setDC(boolean dualCont)
{
	dC = dualCont;
    1c1e:	80 93 83 01 	sts	0x0183, r24
    1c22:	08 95       	ret

00001c24 <__vector_11>:
}


//	Endpoint 0 interrupt
ISR(USB_COM_vect)
{
    1c24:	1f 92       	push	r1
    1c26:	0f 92       	push	r0
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	0f 92       	push	r0
    1c2c:	11 24       	eor	r1, r1
    1c2e:	df 92       	push	r13
    1c30:	ef 92       	push	r14
    1c32:	ff 92       	push	r15
    1c34:	0f 93       	push	r16
    1c36:	1f 93       	push	r17
    1c38:	2f 93       	push	r18
    1c3a:	3f 93       	push	r19
    1c3c:	4f 93       	push	r20
    1c3e:	5f 93       	push	r21
    1c40:	6f 93       	push	r22
    1c42:	7f 93       	push	r23
    1c44:	8f 93       	push	r24
    1c46:	9f 93       	push	r25
    1c48:	af 93       	push	r26
    1c4a:	bf 93       	push	r27
    1c4c:	ef 93       	push	r30
    1c4e:	ff 93       	push	r31
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	61 97       	sbiw	r28, 0x11	; 17
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	cd bf       	out	0x3d, r28	; 61
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    1c5e:	10 92 e9 00 	sts	0x00E9, r1
	return UEBCLX;
}

static inline u8 ReceivedSetupInt()
{
	return UEINTX & (1<<RXSTPI);
    1c62:	80 91 e8 00 	lds	r24, 0x00E8

//	Endpoint 0 interrupt
ISR(USB_COM_vect)
{
    SetEP(0);
	if (!ReceivedSetupInt())
    1c66:	83 ff       	sbrs	r24, 3
    1c68:	ed c0       	rjmp	.+474    	; 0x1e44 <__vector_11+0x220>
		return;

	Setup setup;
	Recv((u8*)&setup,8);
    1c6a:	68 e0       	ldi	r22, 0x08	; 8
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	0a 96       	adiw	r24, 0x0a	; 10
    1c70:	0e 94 c2 0c 	call	0x1984	; 0x1984 <_Z4RecvPVhh>
	return UEINTX & (1<<RXSTPI);
}

static inline void ClearSetupInt()
{
	UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1c74:	82 ef       	ldi	r24, 0xF2	; 242
    1c76:	80 93 e8 00 	sts	0x00E8, r24

	Setup setup;
	Recv((u8*)&setup,8);
	ClearSetupInt();

	u8 requestType = setup.bmRequestType;
    1c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
	if (requestType & REQUEST_DEVICETOHOST)
    1c7c:	99 23       	and	r25, r25
    1c7e:	34 f4       	brge	.+12     	; 0x1c8c <__vector_11+0x68>

volatile u8 _usbConfiguration = 0;

static inline void WaitIN(void)
{
	while (!(UEINTX & (1<<TXINI)));
    1c80:	e8 ee       	ldi	r30, 0xE8	; 232
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	80 ff       	sbrs	r24, 0
    1c88:	fd cf       	rjmp	.-6      	; 0x1c84 <__vector_11+0x60>
    1c8a:	03 c0       	rjmp	.+6      	; 0x1c92 <__vector_11+0x6e>
}

static inline void ClearIN(void)
{
	UEINTX = ~(1<<TXINI);
    1c8c:	8e ef       	ldi	r24, 0xFE	; 254
    1c8e:	80 93 e8 00 	sts	0x00E8, r24
		WaitIN();
	else
		ClearIN();

    bool ok = true;
	if (REQUEST_STANDARD == (requestType & REQUEST_TYPE))
    1c92:	89 2f       	mov	r24, r25
    1c94:	80 76       	andi	r24, 0x60	; 96
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <__vector_11+0x76>
    1c98:	be c0       	rjmp	.+380    	; 0x1e16 <__vector_11+0x1f2>
	{
		//	Standard Requests
		u8 r = setup.bRequest;
    1c9a:	8b 85       	ldd	r24, Y+11	; 0x0b
		if (GET_STATUS == r)
    1c9c:	81 11       	cpse	r24, r1
    1c9e:	05 c0       	rjmp	.+10     	; 0x1caa <__vector_11+0x86>
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1ca0:	e1 ef       	ldi	r30, 0xF1	; 241
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	10 82       	st	Z, r1
    1ca6:	10 82       	st	Z, r1
    1ca8:	c6 c0       	rjmp	.+396    	; 0x1e36 <__vector_11+0x212>
		if (GET_STATUS == r)
		{
			Send8(0);		// TODO
			Send8(0);
		}
		else if (CLEAR_FEATURE == r)
    1caa:	28 2f       	mov	r18, r24
    1cac:	2d 7f       	andi	r18, 0xFD	; 253
    1cae:	21 30       	cpi	r18, 0x01	; 1
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <__vector_11+0x90>
    1cb2:	c1 c0       	rjmp	.+386    	; 0x1e36 <__vector_11+0x212>
		{
		}
		else if (SET_FEATURE == r)
		{
		}
		else if (SET_ADDRESS == r)
    1cb4:	85 30       	cpi	r24, 0x05	; 5
    1cb6:	51 f4       	brne	.+20     	; 0x1ccc <__vector_11+0xa8>

volatile u8 _usbConfiguration = 0;

static inline void WaitIN(void)
{
	while (!(UEINTX & (1<<TXINI)));
    1cb8:	e8 ee       	ldi	r30, 0xE8	; 232
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	80 ff       	sbrs	r24, 0
    1cc0:	fd cf       	rjmp	.-6      	; 0x1cbc <__vector_11+0x98>
		{
		}
		else if (SET_ADDRESS == r)
		{
			WaitIN();
			UDADDR = setup.wValueL | (1<<ADDEN);
    1cc2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cc4:	80 68       	ori	r24, 0x80	; 128
    1cc6:	80 93 e3 00 	sts	0x00E3, r24
    1cca:	b5 c0       	rjmp	.+362    	; 0x1e36 <__vector_11+0x212>
		}
		else if (GET_DESCRIPTOR == r)
    1ccc:	86 30       	cpi	r24, 0x06	; 6
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <__vector_11+0xae>
    1cd0:	80 c0       	rjmp	.+256    	; 0x1dd2 <__vector_11+0x1ae>
		{
			ok = SendDescriptor(setup, dC);
    1cd2:	d0 90 83 01 	lds	r13, 0x0183
u8 _cdcComposite = 0;

static
bool SendDescriptor(Setup& setup, boolean dualCont)
{
	u8 t = setup.wValueH;
    1cd6:	1d 85       	ldd	r17, Y+13	; 0x0d
	if (USB_CONFIGURATION_DESCRIPTOR_TYPE == t)
    1cd8:	12 30       	cpi	r17, 0x02	; 2
    1cda:	91 f5       	brne	.+100    	; 0x1d40 <__vector_11+0x11c>
		return SendConfiguration(setup.wLength, dualCont);
    1cdc:	e8 88       	ldd	r14, Y+16	; 0x10
    1cde:	f9 88       	ldd	r15, Y+17	; 0x11
//	TODO
static
bool SendConfiguration(int maxlen, boolean dualCont)
{
	//	Count and measure interfaces
	InitControl(0);	
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <_Z11InitControli>
	int interfaces = SendInterfaces(dualCont);
    1ce8:	8d 2d       	mov	r24, r13
    1cea:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_Z14SendInterfacesh>
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
    1cee:	99 e0       	ldi	r25, 0x09	; 9
    1cf0:	8e 01       	movw	r16, r28
    1cf2:	0f 5f       	subi	r16, 0xFF	; 255
    1cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	29 2f       	mov	r18, r25
    1cfa:	11 92       	st	Z+, r1
    1cfc:	2a 95       	dec	r18
    1cfe:	e9 f7       	brne	.-6      	; 0x1cfa <__vector_11+0xd6>
    1d00:	99 83       	std	Y+1, r25	; 0x01
    1d02:	92 e0       	ldi	r25, 0x02	; 2
    1d04:	9a 83       	std	Y+2, r25	; 0x02
    1d06:	91 e0       	ldi	r25, 0x01	; 1
    1d08:	9e 83       	std	Y+6, r25	; 0x06
    1d0a:	90 e8       	ldi	r25, 0x80	; 128
    1d0c:	98 87       	std	Y+8, r25	; 0x08
    1d0e:	9a ef       	ldi	r25, 0xFA	; 250
    1d10:	99 87       	std	Y+9, r25	; 0x09
    1d12:	20 91 7e 01 	lds	r18, 0x017E
    1d16:	30 91 7f 01 	lds	r19, 0x017F
    1d1a:	27 5f       	subi	r18, 0xF7	; 247
    1d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1e:	3c 83       	std	Y+4, r19	; 0x04
    1d20:	2b 83       	std	Y+3, r18	; 0x03
    1d22:	8d 83       	std	Y+5, r24	; 0x05

	//	Now send them
	InitControl(maxlen);
    1d24:	c7 01       	movw	r24, r14
    1d26:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <_Z11InitControli>
	USB_SendControl(0,&config,sizeof(ConfigDescriptor));
    1d2a:	49 e0       	ldi	r20, 0x09	; 9
    1d2c:	50 e0       	ldi	r21, 0x00	; 0
    1d2e:	b8 01       	movw	r22, r16
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_Z15USB_SendControlhPKvi>
	SendInterfaces(dualCont);
    1d36:	8d 2d       	mov	r24, r13
    1d38:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_Z14SendInterfacesh>
static
bool SendDescriptor(Setup& setup, boolean dualCont)
{
	u8 t = setup.wValueH;
	if (USB_CONFIGURATION_DESCRIPTOR_TYPE == t)
		return SendConfiguration(setup.wLength, dualCont);
    1d3c:	21 e0       	ldi	r18, 0x01	; 1
    1d3e:	79 c0       	rjmp	.+242    	; 0x1e32 <__vector_11+0x20e>

	InitControl(setup.wLength);
    1d40:	88 89       	ldd	r24, Y+16	; 0x10
    1d42:	99 89       	ldd	r25, Y+17	; 0x11
    1d44:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <_Z11InitControli>
#ifdef HID_ENABLED
	if (HID_REPORT_DESCRIPTOR_TYPE == t)
    1d48:	12 32       	cpi	r17, 0x22	; 34
    1d4a:	59 f4       	brne	.+22     	; 0x1d62 <__vector_11+0x13e>
		return HID_GetDescriptor(t, dualCont);
    1d4c:	6d 2d       	mov	r22, r13
    1d4e:	82 e2       	ldi	r24, 0x22	; 34
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_Z17HID_GetDescriptorih>
    1d56:	21 e0       	ldi	r18, 0x01	; 1
    1d58:	89 2b       	or	r24, r25
    1d5a:	09 f0       	breq	.+2      	; 0x1d5e <__vector_11+0x13a>
    1d5c:	6a c0       	rjmp	.+212    	; 0x1e32 <__vector_11+0x20e>
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	68 c0       	rjmp	.+208    	; 0x1e32 <__vector_11+0x20e>
#endif

	u8 desc_length = 0;
	const u8* desc_addr = 0;
	if (USB_DEVICE_DESCRIPTOR_TYPE == t)
    1d62:	11 30       	cpi	r17, 0x01	; 1
    1d64:	89 f4       	brne	.+34     	; 0x1d88 <__vector_11+0x164>
	{
		if (setup.wLength == 8)
    1d66:	88 89       	ldd	r24, Y+16	; 0x10
    1d68:	99 89       	ldd	r25, Y+17	; 0x11
    1d6a:	08 97       	sbiw	r24, 0x08	; 8
    1d6c:	31 f4       	brne	.+12     	; 0x1d7a <__vector_11+0x156>
			_cdcComposite = 1;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	80 93 7b 01 	sts	0x017B, r24
		desc_addr = _cdcComposite ?  (const u8*)&USB_DeviceDescriptorA : (const u8*)&USB_DeviceDescriptor;
    1d74:	61 e9       	ldi	r22, 0x91	; 145
    1d76:	71 e0       	ldi	r23, 0x01	; 1
    1d78:	1b c0       	rjmp	.+54     	; 0x1db0 <__vector_11+0x18c>
    1d7a:	80 91 7b 01 	lds	r24, 0x017B
    1d7e:	88 23       	and	r24, r24
    1d80:	79 f0       	breq	.+30     	; 0x1da0 <__vector_11+0x17c>
    1d82:	61 e9       	ldi	r22, 0x91	; 145
    1d84:	71 e0       	ldi	r23, 0x01	; 1
    1d86:	14 c0       	rjmp	.+40     	; 0x1db0 <__vector_11+0x18c>
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    1d88:	13 30       	cpi	r17, 0x03	; 3
    1d8a:	e9 f4       	brne	.+58     	; 0x1dc6 <__vector_11+0x1a2>
	{
		if (setup.wValueL == 0)
    1d8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d8e:	88 23       	and	r24, r24
    1d90:	51 f0       	breq	.+20     	; 0x1da6 <__vector_11+0x182>
			desc_addr = (const u8*)&STRING_LANGUAGE;
		else if (setup.wValueL == IPRODUCT) 
    1d92:	82 30       	cpi	r24, 0x02	; 2
    1d94:	59 f0       	breq	.+22     	; 0x1dac <__vector_11+0x188>
			desc_addr = (const u8*)&STRING_IPRODUCT;
		else if (setup.wValueL == IMANUFACTURER)
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	c1 f4       	brne	.+48     	; 0x1dca <__vector_11+0x1a6>
			desc_addr = (const u8*)&STRING_IMANUFACTURER;
    1d9a:	65 eb       	ldi	r22, 0xB5	; 181
    1d9c:	71 e0       	ldi	r23, 0x01	; 1
    1d9e:	08 c0       	rjmp	.+16     	; 0x1db0 <__vector_11+0x18c>
	const u8* desc_addr = 0;
	if (USB_DEVICE_DESCRIPTOR_TYPE == t)
	{
		if (setup.wLength == 8)
			_cdcComposite = 1;
		desc_addr = _cdcComposite ?  (const u8*)&USB_DeviceDescriptorA : (const u8*)&USB_DeviceDescriptor;
    1da0:	63 ea       	ldi	r22, 0xA3	; 163
    1da2:	71 e0       	ldi	r23, 0x01	; 1
    1da4:	05 c0       	rjmp	.+10     	; 0x1db0 <__vector_11+0x18c>
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
	{
		if (setup.wValueL == 0)
			desc_addr = (const u8*)&STRING_LANGUAGE;
    1da6:	6f ee       	ldi	r22, 0xEF	; 239
    1da8:	71 e0       	ldi	r23, 0x01	; 1
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <__vector_11+0x18c>
		else if (setup.wValueL == IPRODUCT) 
			desc_addr = (const u8*)&STRING_IPRODUCT;
    1dac:	6d ec       	ldi	r22, 0xCD	; 205
    1dae:	71 e0       	ldi	r23, 0x01	; 1
			desc_addr = (const u8*)&STRING_IMANUFACTURER;
		else
			return false;
	}

	if (desc_addr == 0)
    1db0:	61 15       	cp	r22, r1
    1db2:	71 05       	cpc	r23, r1
    1db4:	61 f0       	breq	.+24     	; 0x1dce <__vector_11+0x1aa>
		return false;
	if (desc_length == 0)
		desc_length = pgm_read_byte(desc_addr);
    1db6:	fb 01       	movw	r30, r22
    1db8:	44 91       	lpm	r20, Z

	USB_SendControl(TRANSFER_PGM,desc_addr,desc_length);
    1dba:	50 e0       	ldi	r21, 0x00	; 0
    1dbc:	80 e8       	ldi	r24, 0x80	; 128
    1dbe:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_Z15USB_SendControlhPKvi>
	return true;
    1dc2:	21 e0       	ldi	r18, 0x01	; 1
    1dc4:	36 c0       	rjmp	.+108    	; 0x1e32 <__vector_11+0x20e>
		else
			return false;
	}

	if (desc_addr == 0)
		return false;
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	34 c0       	rjmp	.+104    	; 0x1e32 <__vector_11+0x20e>
		else if (setup.wValueL == IPRODUCT) 
			desc_addr = (const u8*)&STRING_IPRODUCT;
		else if (setup.wValueL == IMANUFACTURER)
			desc_addr = (const u8*)&STRING_IMANUFACTURER;
		else
			return false;
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	32 c0       	rjmp	.+100    	; 0x1e32 <__vector_11+0x20e>
	}

	if (desc_addr == 0)
		return false;
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 c0       	rjmp	.+96     	; 0x1e32 <__vector_11+0x20e>
		}
		else if (GET_DESCRIPTOR == r)
		{
			ok = SendDescriptor(setup, dC);
		}
		else if (SET_DESCRIPTOR == r)
    1dd2:	87 30       	cpi	r24, 0x07	; 7
    1dd4:	a1 f1       	breq	.+104    	; 0x1e3e <__vector_11+0x21a>
		{
			ok = false;
		}
		else if (GET_CONFIGURATION == r)
    1dd6:	88 30       	cpi	r24, 0x08	; 8
    1dd8:	21 f4       	brne	.+8      	; 0x1de2 <__vector_11+0x1be>
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	80 93 f1 00 	sts	0x00F1, r24
    1de0:	2a c0       	rjmp	.+84     	; 0x1e36 <__vector_11+0x212>
		}
		else if (GET_CONFIGURATION == r)
		{
			Send8(1);
		}
		else if (SET_CONFIGURATION == r)
    1de2:	89 30       	cpi	r24, 0x09	; 9
    1de4:	41 f5       	brne	.+80     	; 0x1e36 <__vector_11+0x212>
		{
			if (REQUEST_DEVICE == (requestType & REQUEST_RECIPIENT))
    1de6:	93 70       	andi	r25, 0x03	; 3
    1de8:	51 f5       	brne	.+84     	; 0x1e3e <__vector_11+0x21a>
static
void InitEndpoints()
{
	for (u8 i = 1; i < sizeof(_initEndpoints); i++)
	{
		UENUM = i;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	80 93 e9 00 	sts	0x00E9, r24
		UECONX = 1;
    1df0:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = pgm_read_byte(_initEndpoints+i);
    1df4:	e0 e9       	ldi	r30, 0x90	; 144
    1df6:	f1 e0       	ldi	r31, 0x01	; 1
    1df8:	e4 91       	lpm	r30, Z
    1dfa:	e0 93 ec 00 	sts	0x00EC, r30
		UECFG1X = EP_DOUBLE_64;
    1dfe:	86 e3       	ldi	r24, 0x36	; 54
    1e00:	80 93 ed 00 	sts	0x00ED, r24
	}
	UERST = 0x7E;	// And reset them
    1e04:	ea ee       	ldi	r30, 0xEA	; 234
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	8e e7       	ldi	r24, 0x7E	; 126
    1e0a:	80 83       	st	Z, r24
	UERST = 0;
    1e0c:	10 82       	st	Z, r1
		else if (SET_CONFIGURATION == r)
		{
			if (REQUEST_DEVICE == (requestType & REQUEST_RECIPIENT))
			{
				InitEndpoints();
				_usbConfiguration = setup.wValueL;
    1e0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e10:	80 93 80 01 	sts	0x0180, r24
    1e14:	10 c0       	rjmp	.+32     	; 0x1e36 <__vector_11+0x212>
		{
		}
	}
	else
	{
		InitControl(setup.wLength);		//	Max length of transfer
    1e16:	88 89       	ldd	r24, Y+16	; 0x10
    1e18:	99 89       	ldd	r25, Y+17	; 0x11
    1e1a:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <_Z11InitControli>
	if (CDC_ACM_INTERFACE == i)
		return CDC_Setup(setup);
#endif

#ifdef HID_ENABLED
	if (HID_INTERFACE == i)
    1e1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e20:	81 11       	cpse	r24, r1
    1e22:	06 c0       	rjmp	.+12     	; 0x1e30 <__vector_11+0x20c>
		return HID_Setup(setup);
    1e24:	ce 01       	movw	r24, r28
    1e26:	0a 96       	adiw	r24, 0x0a	; 10
    1e28:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_Z9HID_SetupR5Setup>
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	01 c0       	rjmp	.+2      	; 0x1e32 <__vector_11+0x20e>
#endif
	return false;
    1e30:	20 e0       	ldi	r18, 0x00	; 0
	{
		InitControl(setup.wLength);		//	Max length of transfer
		ok = ClassInterfaceRequest(setup);
	}

	if (ok)
    1e32:	22 23       	and	r18, r18
    1e34:	21 f0       	breq	.+8      	; 0x1e3e <__vector_11+0x21a>
	while (!(UEINTX & (1<<TXINI)));
}

static inline void ClearIN(void)
{
	UEINTX = ~(1<<TXINI);
    1e36:	8e ef       	ldi	r24, 0xFE	; 254
    1e38:	80 93 e8 00 	sts	0x00E8, r24
    1e3c:	03 c0       	rjmp	.+6      	; 0x1e44 <__vector_11+0x220>
	UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
}

static inline void Stall()
{
	UECONX = (1<<STALLRQ) | (1<<EPEN);
    1e3e:	81 e2       	ldi	r24, 0x21	; 33
    1e40:	80 93 eb 00 	sts	0x00EB, r24
		ClearIN();
	else
	{
		Stall();
	}
}
    1e44:	61 96       	adiw	r28, 0x11	; 17
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	ff 91       	pop	r31
    1e56:	ef 91       	pop	r30
    1e58:	bf 91       	pop	r27
    1e5a:	af 91       	pop	r26
    1e5c:	9f 91       	pop	r25
    1e5e:	8f 91       	pop	r24
    1e60:	7f 91       	pop	r23
    1e62:	6f 91       	pop	r22
    1e64:	5f 91       	pop	r21
    1e66:	4f 91       	pop	r20
    1e68:	3f 91       	pop	r19
    1e6a:	2f 91       	pop	r18
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	ff 90       	pop	r15
    1e72:	ef 90       	pop	r14
    1e74:	df 90       	pop	r13
    1e76:	0f 90       	pop	r0
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	0f 90       	pop	r0
    1e7c:	1f 90       	pop	r1
    1e7e:	18 95       	reti

00001e80 <__vector_10>:
		ReleaseTX();
}

//	General interrupt
ISR(USB_GEN_vect)
{
    1e80:	1f 92       	push	r1
    1e82:	0f 92       	push	r0
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	0f 92       	push	r0
    1e88:	11 24       	eor	r1, r1
    1e8a:	8f 93       	push	r24
    1e8c:	9f 93       	push	r25
    1e8e:	ef 93       	push	r30
    1e90:	ff 93       	push	r31
	u8 udint = UDINT;
    1e92:	e1 ee       	ldi	r30, 0xE1	; 225
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
	UDINT = 0;
    1e98:	10 82       	st	Z, r1

	//	End of Reset
	if (udint & (1<<EORSTI))
    1e9a:	83 ff       	sbrs	r24, 3
    1e9c:	0f c0       	rjmp	.+30     	; 0x1ebc <__vector_10+0x3c>
#define EP_DOUBLE_64 0x36	// Other endpoints

static
void InitEP(u8 index, u8 type, u8 size)
{
	UENUM = index;
    1e9e:	10 92 e9 00 	sts	0x00E9, r1
	UECONX = 1;
    1ea2:	91 e0       	ldi	r25, 0x01	; 1
    1ea4:	90 93 eb 00 	sts	0x00EB, r25
	UECFG0X = type;
    1ea8:	10 92 ec 00 	sts	0x00EC, r1
	UECFG1X = size;
    1eac:	92 e3       	ldi	r25, 0x32	; 50
    1eae:	90 93 ed 00 	sts	0x00ED, r25

	//	End of Reset
	if (udint & (1<<EORSTI))
	{
		InitEP(0,EP_TYPE_CONTROL,EP_SINGLE_64);	// init ep0
		_usbConfiguration = 0;			// not configured yet
    1eb2:	10 92 80 01 	sts	0x0180, r1
		UEIENX = 1 << RXSTPE;			// Enable interrupts for ep0
    1eb6:	98 e0       	ldi	r25, 0x08	; 8
    1eb8:	90 93 f0 00 	sts	0x00F0, r25
	}

	//	Start of Frame - happens every millisecond so we use it for TX and RX LED one-shot timing, too
	if (udint & (1<<SOFI))
    1ebc:	82 ff       	sbrs	r24, 2
    1ebe:	18 c0       	rjmp	.+48     	; 0x1ef0 <__vector_10+0x70>
		if (USB_Available(CDC_RX))	// Handle received bytes (if any)
			Serial.accept();
#endif
		
		// check whether the one-shot period has elapsed.  if so, turn off the LED
		if (TxLEDPulse && !(--TxLEDPulse))
    1ec0:	80 91 82 01 	lds	r24, 0x0182
    1ec4:	88 23       	and	r24, r24
    1ec6:	41 f0       	breq	.+16     	; 0x1ed8 <__vector_10+0x58>
    1ec8:	80 91 82 01 	lds	r24, 0x0182
    1ecc:	81 50       	subi	r24, 0x01	; 1
    1ece:	80 93 82 01 	sts	0x0182, r24
    1ed2:	81 11       	cpse	r24, r1
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <__vector_10+0x58>
			TXLED0;
    1ed6:	5d 9a       	sbi	0x0b, 5	; 11
		if (RxLEDPulse && !(--RxLEDPulse))
    1ed8:	80 91 81 01 	lds	r24, 0x0181
    1edc:	88 23       	and	r24, r24
    1ede:	41 f0       	breq	.+16     	; 0x1ef0 <__vector_10+0x70>
    1ee0:	80 91 81 01 	lds	r24, 0x0181
    1ee4:	81 50       	subi	r24, 0x01	; 1
    1ee6:	80 93 81 01 	sts	0x0181, r24
    1eea:	81 11       	cpse	r24, r1
    1eec:	01 c0       	rjmp	.+2      	; 0x1ef0 <__vector_10+0x70>
			RXLED0;
    1eee:	28 9a       	sbi	0x05, 0	; 5
	}
}
    1ef0:	ff 91       	pop	r31
    1ef2:	ef 91       	pop	r30
    1ef4:	9f 91       	pop	r25
    1ef6:	8f 91       	pop	r24
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	0f 90       	pop	r0
    1efe:	1f 90       	pop	r1
    1f00:	18 95       	reti

00001f02 <__divmodsi4>:
    1f02:	05 2e       	mov	r0, r21
    1f04:	97 fb       	bst	r25, 7
    1f06:	1e f4       	brtc	.+6      	; 0x1f0e <__divmodsi4+0xc>
    1f08:	00 94       	com	r0
    1f0a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__negsi2>
    1f0e:	57 fd       	sbrc	r21, 7
    1f10:	07 d0       	rcall	.+14     	; 0x1f20 <__divmodsi4_neg2>
    1f12:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__udivmodsi4>
    1f16:	07 fc       	sbrc	r0, 7
    1f18:	03 d0       	rcall	.+6      	; 0x1f20 <__divmodsi4_neg2>
    1f1a:	4e f4       	brtc	.+18     	; 0x1f2e <__divmodsi4_exit>
    1f1c:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__negsi2>

00001f20 <__divmodsi4_neg2>:
    1f20:	50 95       	com	r21
    1f22:	40 95       	com	r20
    1f24:	30 95       	com	r19
    1f26:	21 95       	neg	r18
    1f28:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2a:	4f 4f       	sbci	r20, 0xFF	; 255
    1f2c:	5f 4f       	sbci	r21, 0xFF	; 255

00001f2e <__divmodsi4_exit>:
    1f2e:	08 95       	ret

00001f30 <__negsi2>:
    1f30:	90 95       	com	r25
    1f32:	80 95       	com	r24
    1f34:	70 95       	com	r23
    1f36:	61 95       	neg	r22
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3e:	08 95       	ret

00001f40 <__umulhisi3>:
    1f40:	a2 9f       	mul	r26, r18
    1f42:	b0 01       	movw	r22, r0
    1f44:	b3 9f       	mul	r27, r19
    1f46:	c0 01       	movw	r24, r0
    1f48:	a3 9f       	mul	r26, r19
    1f4a:	70 0d       	add	r23, r0
    1f4c:	81 1d       	adc	r24, r1
    1f4e:	11 24       	eor	r1, r1
    1f50:	91 1d       	adc	r25, r1
    1f52:	b2 9f       	mul	r27, r18
    1f54:	70 0d       	add	r23, r0
    1f56:	81 1d       	adc	r24, r1
    1f58:	11 24       	eor	r1, r1
    1f5a:	91 1d       	adc	r25, r1
    1f5c:	08 95       	ret

00001f5e <__muluhisi3>:
    1f5e:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__umulhisi3>
    1f62:	a5 9f       	mul	r26, r21
    1f64:	90 0d       	add	r25, r0
    1f66:	b4 9f       	mul	r27, r20
    1f68:	90 0d       	add	r25, r0
    1f6a:	a4 9f       	mul	r26, r20
    1f6c:	80 0d       	add	r24, r0
    1f6e:	91 1d       	adc	r25, r1
    1f70:	11 24       	eor	r1, r1
    1f72:	08 95       	ret

00001f74 <__ashldi3>:
    1f74:	0f 93       	push	r16
    1f76:	08 30       	cpi	r16, 0x08	; 8
    1f78:	90 f0       	brcs	.+36     	; 0x1f9e <__ashldi3+0x2a>
    1f7a:	98 2f       	mov	r25, r24
    1f7c:	87 2f       	mov	r24, r23
    1f7e:	76 2f       	mov	r23, r22
    1f80:	65 2f       	mov	r22, r21
    1f82:	54 2f       	mov	r21, r20
    1f84:	43 2f       	mov	r20, r19
    1f86:	32 2f       	mov	r19, r18
    1f88:	22 27       	eor	r18, r18
    1f8a:	08 50       	subi	r16, 0x08	; 8
    1f8c:	f4 cf       	rjmp	.-24     	; 0x1f76 <__ashldi3+0x2>
    1f8e:	22 0f       	add	r18, r18
    1f90:	33 1f       	adc	r19, r19
    1f92:	44 1f       	adc	r20, r20
    1f94:	55 1f       	adc	r21, r21
    1f96:	66 1f       	adc	r22, r22
    1f98:	77 1f       	adc	r23, r23
    1f9a:	88 1f       	adc	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	0a 95       	dec	r16
    1fa0:	b2 f7       	brpl	.-20     	; 0x1f8e <__ashldi3+0x1a>
    1fa2:	0f 91       	pop	r16
    1fa4:	08 95       	ret

00001fa6 <__udivmodsi4>:
    1fa6:	a1 e2       	ldi	r26, 0x21	; 33
    1fa8:	1a 2e       	mov	r1, r26
    1faa:	aa 1b       	sub	r26, r26
    1fac:	bb 1b       	sub	r27, r27
    1fae:	fd 01       	movw	r30, r26
    1fb0:	0d c0       	rjmp	.+26     	; 0x1fcc <__udivmodsi4_ep>

00001fb2 <__udivmodsi4_loop>:
    1fb2:	aa 1f       	adc	r26, r26
    1fb4:	bb 1f       	adc	r27, r27
    1fb6:	ee 1f       	adc	r30, r30
    1fb8:	ff 1f       	adc	r31, r31
    1fba:	a2 17       	cp	r26, r18
    1fbc:	b3 07       	cpc	r27, r19
    1fbe:	e4 07       	cpc	r30, r20
    1fc0:	f5 07       	cpc	r31, r21
    1fc2:	20 f0       	brcs	.+8      	; 0x1fcc <__udivmodsi4_ep>
    1fc4:	a2 1b       	sub	r26, r18
    1fc6:	b3 0b       	sbc	r27, r19
    1fc8:	e4 0b       	sbc	r30, r20
    1fca:	f5 0b       	sbc	r31, r21

00001fcc <__udivmodsi4_ep>:
    1fcc:	66 1f       	adc	r22, r22
    1fce:	77 1f       	adc	r23, r23
    1fd0:	88 1f       	adc	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	1a 94       	dec	r1
    1fd6:	69 f7       	brne	.-38     	; 0x1fb2 <__udivmodsi4_loop>
    1fd8:	60 95       	com	r22
    1fda:	70 95       	com	r23
    1fdc:	80 95       	com	r24
    1fde:	90 95       	com	r25
    1fe0:	9b 01       	movw	r18, r22
    1fe2:	ac 01       	movw	r20, r24
    1fe4:	bd 01       	movw	r22, r26
    1fe6:	cf 01       	movw	r24, r30
    1fe8:	08 95       	ret

00001fea <__tablejump2__>:
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31

00001fee <__tablejump__>:
    1fee:	05 90       	lpm	r0, Z+
    1ff0:	f4 91       	lpm	r31, Z
    1ff2:	e0 2d       	mov	r30, r0
    1ff4:	09 94       	ijmp

00001ff6 <memcmp>:
    1ff6:	fb 01       	movw	r30, r22
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	04 c0       	rjmp	.+8      	; 0x2004 <memcmp+0xe>
    1ffc:	8d 91       	ld	r24, X+
    1ffe:	01 90       	ld	r0, Z+
    2000:	80 19       	sub	r24, r0
    2002:	21 f4       	brne	.+8      	; 0x200c <memcmp+0x16>
    2004:	41 50       	subi	r20, 0x01	; 1
    2006:	50 40       	sbci	r21, 0x00	; 0
    2008:	c8 f7       	brcc	.-14     	; 0x1ffc <memcmp+0x6>
    200a:	88 1b       	sub	r24, r24
    200c:	99 0b       	sbc	r25, r25
    200e:	08 95       	ret

00002010 <_exit>:
    2010:	f8 94       	cli

00002012 <__stop_program>:
    2012:	ff cf       	rjmp	.-2      	; 0x2012 <__stop_program>
